#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ExampleFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc Examplealloc

    #define yyrealloc Examplerealloc

    #define yyfree Examplefree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *Examplealloc ( yy_size_t  );
void *Examplerealloc ( void *, yy_size_t  );
void Examplefree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[850] =
    {   0,
        0,    0,   20,   18,   16,   17,   18,   12,   12,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   16,    0,    2,   13,   12,    0,   15,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    0,    0,    2,
       13,   13,   15,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    1,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   10,   14,   14,   14,   14,   14,

       14,   14,   14,   14,    3,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   11,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    9,    9,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,    9,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,    6,    7,
        8,   14,   14,   14,   14,   14,    9,   14,   14,    9,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,    9,   14,   14,   14,   14,   14,   14,
        9,   14,   14,   14,   14,   14,    5,   14,    9,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    9,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,    4,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        9,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        9,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    9,   14,    9,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,    9,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,    9,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    9,   14,   14,   14,   14,   14,   14,   14,    9,
       14,   14,    9,   14,   14,   14,   14,   14,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   26,   26,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   26,   26,   39,
        1,    1,    1,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    8,
        6,    6,    6,    6,    6,    7,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    9,    6,    6
    } ;

static const flex_int16_t yy_base[858] =
    {   0,
        0,    0,  138, 3143,   65, 3143,   63,   63,   65,   67,
       69,   71,   73,   75,   84,   77,   80,   94,   99,   82,
      101,  106,  138,  147,  155,  108,    0,   86,  162,   90,
      166,  100,  131,    0,   70,   88,    0,    0,   92,  151,
      169,  171,  176,  158,  178,  181,  103,  195,  200,  202,
      211,  213,  216,  220,  222,  226,  228,  230,  232,  237,
      243,  239,  245,  247,  251,  257,  263,  265,  274,  270,
      277,  280,  282,  295,  297,  300,  302,  307,  309,  313,
      315,  319,    0,  322,  324,  326,  333,  112,   77,    0,
      143, 3143,    0,  337,  339,  341,  343,  347,  349,  356,

      358,  362,  364,  371,  374,  377,  382,  387,  392,  395,
      397,  400,  402,  404,  416,  420,  428,  430,  432,  442,
      445,  452,  456,  460,  462,  464,  466,  468,  470,  472,
      474,  476,  479,  483,  486,  497,  490,  499,  501,  514,
      516,  518,  522,  526,  532, 3143,  534,  536,  538,  540,
      542,  544,  546,  548,  562,  555,  569,  564,  575,  586,
      588,  590,  592,  594,  598,  601,  603,  606,  608,  610,
      615,  617,  621,  623,  625,  628,  631,  634,  643,  647,
      649,  651,  653,  656,  658,  661,  667,  679,  681,  685,
      687,  691,  694,  701,  703,  705,  711,  714,  716,  718,

      720,  767,  722,  728,  730,  732,  734,  783,  741,  736,
      743,  750,  748,  756,  790,  785,  792,  759,  763,  752,
      813,  817,  819,  823,  825,  827,  829,  831,  835,  837,
      839,  888,  841,  844,  848,  850,  846,  852,  854,  857,
      874,  877,  880,  883,  885,  860,  894,  870,  909,  918,
      920,  925,  927,  929,  932,  934,  936,  938,  940,  944,
      949,  946,  950,  951,  964,  966,  976,  979,  981,  984,
      986,  989,  991,  993,  999, 1001, 1003, 1005, 1007, 1010,
     1013, 1017, 1019, 1022, 1024, 1033, 1037, 1041, 1043, 1045,
     1051, 1053, 1065, 1068, 1073, 1077, 1079, 1081, 1084, 1087,

     1089, 1091, 1093, 1095, 1103, 1097, 1107, 1109, 1111, 1113,
     1115, 1117, 1121, 1126, 1129, 1151, 1155, 1135, 1145, 1158,
     1160, 1162, 1164, 1168, 1171, 1174, 1176, 1185, 1188, 1191,
     1194, 1198, 1204, 1201, 1206, 1211, 1208, 1214, 1217, 1227,
     1230, 1232, 1237, 1241, 1247, 1244, 1251, 1254, 1256, 1258,
     1261, 1265, 1263, 1271, 1273, 1275, 1277, 1279, 1284, 1289,
     1298, 1295, 1300, 1302, 1304, 1306, 1315, 1322, 1324, 1328,
     1331, 1333, 1335, 1344, 1347, 1350, 1354, 1352, 1357, 1359,
     1364, 1369, 1373, 1377, 1380, 1382, 1388, 1390, 1392, 1396,
     1401, 1404, 1411, 1413, 1415, 1424, 1426, 1428, 1432, 1436,

     1441, 1443, 1445, 1447, 1449, 1451, 1454, 1462, 1475, 1465,
     1467, 1477, 1469, 1471, 1480, 1489, 1504, 1509, 1511, 1516,
     1522, 1525, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1547,
     1549, 1551, 1553, 1555, 1557, 1573, 1567, 1575, 1584, 1580,
     1586, 1588, 1593, 1598, 1605, 1608, 1610, 1612, 1616, 1619,
     1626, 1622, 1628, 1630, 1632, 1640, 1642, 1648, 1650, 1654,
     1661, 1664, 1669, 1671, 1673, 1677, 1680, 1682, 1685, 1688,
     1690, 1692, 1694, 1697, 1709, 1700, 1715, 1720, 1727, 1712,
     1729, 1735, 1737, 1739, 1741, 1744, 1756, 1759, 1763, 1765,
     1767, 1771, 1775, 1777, 1779, 1782, 1784, 1786, 1788, 1790,

     1796, 1799, 1801, 1803, 1807, 1810, 1818, 1823, 1825, 1814,
     1832, 1842, 1844, 1846, 1848, 1850, 1854, 1856, 1860, 1867,
     1869, 1871, 1873, 1876, 1880, 1882, 1884, 1892, 1896, 1900,
     1903, 1905, 1907, 1910, 1915, 1923, 1927, 1929, 1933, 1935,
     1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1965,
     1972, 1974, 1976, 1982, 1985, 1987, 1991, 1998, 2010, 2012,
     2016, 2021, 2018, 2026, 2031, 2033, 2035, 2037, 2041, 2043,
     2045, 2047, 2049, 2054, 2056, 2059, 2062, 2065, 2069, 2071,
     2073, 2077, 2081, 2084, 2088, 2092, 2094, 2098, 2100, 2105,
     2120, 2107, 2122, 2125, 2127, 2134, 2136, 2138, 2141, 2150,

     2152, 2162, 2154, 2164, 2171, 2173, 2178, 2180, 2182, 2184,
     2186, 2190, 2192, 2194, 2201, 2198, 2203, 2205, 2211, 2213,
     2215, 2218, 2220, 2225, 2231, 2241, 2249, 2253, 2255, 2257,
     2260, 2262, 2264, 2268, 2272, 2274, 2277, 2279, 2281, 2283,
     2285, 2287, 2289, 2292, 2301, 2308, 2310, 2316, 2314, 2323,
     2325, 2332, 2334, 2336, 2343, 2350, 2352, 2354, 2356, 2361,
     2363, 2367, 2369, 2372, 2374, 2381, 2383, 2385, 2389, 2394,
     2396, 2398, 2403, 2407, 2412, 2416, 2418, 2420, 2424, 2426,
     2439, 2430, 2443, 2449, 2453, 2455, 2458, 2464, 2466, 2468,
     2470, 2474, 2477, 2481, 2485, 2487, 2489, 2494, 2496, 2498,

     2502, 2504, 2506, 2508, 2513, 2518, 2525, 2529, 2531, 2533,
     2540, 2542, 2558, 2560, 2562, 2566, 2568, 2570, 2575, 2577,
     2580, 2584, 2590, 2592, 2594, 2599, 2602, 2604, 2613, 2606,
     2617, 2619, 2625, 2627, 2629, 2631, 2634, 2637, 2643, 2646,
     2648, 2653, 2650, 2655, 2657, 2661, 2663, 2667, 2669, 2673,
     2677, 2679, 2683, 2686, 2689, 2692, 2694, 2700, 2702, 2710,
     2713, 2716, 2719, 2721, 2727, 2729, 2734, 2739, 2741, 2743,
     2748, 2750, 2759, 2754, 2764, 2768, 2770, 2777, 2779, 2783,
     2785, 2790, 2797, 2799, 2801, 2804, 2807, 2810, 2812, 2815,
     2822, 2827, 2829, 2831, 2833, 2836, 2845, 2848, 2853, 2860,

     2863, 2865, 2867, 2869, 2871, 2873, 2886, 2879, 2888, 2894,
     2896, 2898, 2900, 2904, 2902, 2907, 2910, 2912, 2915, 2918,
     2920, 2924, 2929, 2938, 2940, 2943, 2946, 2951, 2954, 2956,
     2960, 2980, 2963, 2968, 2965, 2972, 2977, 2989, 2995, 2999,
     3002, 3007, 3017, 3027, 3032, 3036, 3040, 3042, 3143, 3089,
     3096, 3101, 3110, 3119, 3124, 3126, 3133
    } ;

static const flex_int16_t yy_def[858] =
    {   0,
      849,    1,  849,  849,  849,  849,  849,  850,  850,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  852,  851,  851,  851,
      851,  849,  853,  854,  855,  850,  856,  857,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  852,  851,  851,  851,  851,  853,  853,  854,
      855,  849,  857,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  849,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  202,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,    0,  849,
      849,  849,  849,  849,  849,  849,  849
    } ;

static const flex_int16_t yy_nxt[3210] =
    {   0,
        4,    5,    6,    5,    4,    4,    4,    7,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   16,   17,   18,   19,   20,
       16,   21,   22,   23,   24,   16,   25,   26,   16,   27,
       16,   16,   28,   16,   16,   29,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   30,   16,   16,   16,   31,
       16,   16,   16,   16,   16,   16,   32,   33,   32,   35,
       34,   35,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  146,   38,   38,   38,   38,   38,
       38,   38,   38,   92,   35,   38,   38,   38,   38,   38,

       38,   32,   52,   32,   38,   38,   38,   38,   38,   38,
       40,   38,   38,   38,   38,   92,   89,   49,   41,   42,
       43,   50,   46,   44,   52,   47,   37,   51,  849,   45,
       86,   48,   53,   55,   56,   89,   62,  849,   54,   59,
       84,   63,   57,   38,   38,  849,   67,   60,   58,   64,
       68,  849,   38,   38,  101,   65,   38,   38,   66,   61,
       38,   38,   81,   38,   38,   82,   92,   38,   38,  849,
       69,   38,   38,  849,   38,   38,   38,   38,   70,   76,
       52,   38,   38,   38,   38,   71,   38,   38,   92,   72,
      849,   77,  849,   73,   94,   74,  849,   75,   76,   79,

       38,   38,   52,   80,   76,   38,   38,   38,   38,   78,
       87,  849,   96,   85,  849,   98,   38,   38,   38,   38,
       97,   38,   38,   76,   95,   38,   38,   38,   38,  100,
       99,   38,   38,   38,   38,   38,   38,   38,   38,  849,
      108,  849,   38,   38,   38,   38,  102,  105,   38,   38,
       38,   38,   38,   38,  849,  103,   38,   38,  104,  107,
      849,  106,   38,   38,  108,  111,  110,  109,   38,   38,
       38,   38,  114,  849,  113,   38,   38,  849,  115,   38,
       38,  849,   38,   38,  112,   38,   38,   38,   38,  849,
      118,  116,  119,  849,  120,  117,  121,  849,  128,  124,

       38,   38,   38,   38,  122,   38,   38,   38,   38,  849,
      123,  125,   38,   38,   38,   38,  126,  130,   38,   38,
       38,   38,  129,  127,   38,   38,  132,   38,   38,   38,
       38,   38,   38,  849,  131,  135,  849,  133,   38,   38,
      849,  134,   38,   38,   38,   38,   38,   38,   38,   38,
      849,  137,   38,   38,   38,   38,  849,  139,  849,  141,
      135,   38,   38,   38,   38,  136,  138,   38,   38,   38,
       38,  849,  140,  849,  142,  145,   38,   38,  143,   38,
       38,  849,   38,   38,  144,  849,  148,   38,   38,  149,
      151,  849,   38,   38,  147,  849,  150,   38,   38,  849,

       38,   38,   38,   38,  152,   38,   38,   38,   38,   38,
       38,  153,  154,  155,  849,  163,  164,  165,  849,  158,
      161,   38,   38,  156,  159,   38,   38,  849,  166,  167,
      157,  168,  849,   38,   38,   38,   38,   38,   38,  173,
      160,  169,  849,  162,  172,  161,  175,   38,   38,  171,
       38,   38,  849,  177,  849,  178,  176,   38,   38,  170,
      179,   38,   38,  849,  174,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  849,   38,   38,  849,  188,   38,   38,
      849,   38,   38,  849,  182,   38,   38,  181,  193,  849,

      183,  180,   38,   38,   38,   38,   38,   38,  195,  849,
      186,  185,  849,  184,  849,  190,  849,  196,  192,   38,
       38,   38,   38,   38,   38,  189,  187,   38,   38,  191,
      195,   38,   38,  849,  198,  849,  194,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  849,  197,  849,  199,  849,
       38,   38,  204,  200,  849,  201,  212,   38,   38,   38,
       38,  202,  849,  203,   38,   38,  208,  213,  207,  206,
       38,   38,  209,  210,  205,  849,  211,  849,  218,  849,
      216,   38,   38,   38,   38,   38,   38,   38,   38,   38,

       38,  214,  217,   38,   38,  215,   38,   38,   38,   38,
      222,   38,   38,   38,   38,   38,   38,  849,  223,  220,
       38,   38,   38,   38,  219,  849,   38,   38,   38,   38,
       38,   38,  222,   38,   38,  849,   38,   38,  225,   38,
       38,  231,  849,  228,  221,  849,  224,  849,   38,   38,
      229,  226,   38,   38,   38,   38,   38,   38,   38,   38,
      227,   38,   38,   38,   38,  849,   38,   38,  233,  234,
      849,  230,   38,   38,  232,  849,  237,  849,  236,  238,
      235,  849,  239,  240,   38,   38,   38,   38,  849,  242,
       38,   38,   38,   38,  849,  241,   38,   38,  243,   38,

       38,  849,  246,  849,  244,  247,   38,   38,   38,   38,
       38,   38,  849,  249,  849,  245,   38,   38,  248,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  251,
      849,  252,  250,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  255,  849,  254,   38,   38,   38,   38,
      849,  253,  260,   38,   38,   38,   38,   38,   38,  256,
      259,   38,   38,  261,   38,   38,  275,  258,   38,   38,
      264,  257,   38,   38,  849,  262,  263,  262,  262,  262,
      262,  262,  262,  262,  262,  266,  849,  265,   38,   38,
       38,   38,  267,  849,  274,   38,   38,   38,   38,  278,

      276,  268,  269,  277,  279,  849,  270,  849,  280,  288,
      286,  285,  849,  271,  849,  272,  849,  273,   38,   38,
      281,  287,   38,   38,   38,   38,  282,  283,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,  849,  284,
       38,   38,   38,   38,   38,   38,   38,   38,  849,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  289,   38,   38,  849,   38,   38,  293,  849,  295,
      294,  849,  296,  290,  291,   38,   38,  309,  292,   38,
       38,  298,   38,   38,  849,   38,   38,  299,   38,   38,
       38,   38,  297,   38,   38,  310,  311,  849,  312,   38,

       38,  313,  322,  314,  849,  315,  300,  317,  849,  301,
      302,  303,  316,  319,   38,   38,  320,  323,  321,  304,
      305,  306,  307,   38,   38,   38,   38,  849,  318,  324,
       38,   38,   38,   38,   38,   38,  308,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  849,  327,   38,
       38,   38,   38,  325,   38,   38,   38,   38,  328,  262,
      849,  334,  326,  849,   39,   39,   39,   39,  849,   38,
       38,   38,   38,  330,  339,  340,  341,  849,  329,  849,
      331,   38,   38,  337,   38,   38,   38,   38,  332,   38,
       38,   38,   38,  333,   38,   38,   38,   38,   38,   38,

      849,  336,  338,  335,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  342,   38,   38,  849,   38,   38,
      849,  351,   38,   38,   38,   38,  849,   38,   38,   38,
       38,  849,  345,  348,  343,  349,  344,  849,   38,   38,
      849,  347,   38,   38,  346,  353,   38,   38,   38,   38,
       38,   38,  350,  849,  262,  849,   38,   38,   38,   38,
      354,  356,  849,  362,  352,  358,  849,  355,  347,  849,
       38,   38,  359,   38,   38,  849,  357,  360,   38,   38,
      849,  361,   38,   38,   38,   38,   38,   38,  364,   38,
       38,  849,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   38,  363,  365,  367,  849,   38,   38,
      849,  366,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  371,  849,   38,   38,  369,  849,
      368,   38,   38,  377,   38,   38,  849,  375,  370,  373,
       38,   38,  378,  380,  376,  849,  374,  372,  389,  379,
       38,   38,  381,  849,  382,  387,   38,   38,  849,  385,
       38,   38,  384,   38,   38,   38,   38,   38,   38,   38,
       38,  383,  386,   38,   38,  388,   38,   38,  392,   38,
       38,   38,   38,  394,  849,  390,  402,  849,  391,  395,
       38,   38,  849,   38,   38,  393,   38,   38,  849,   38,

       38,  849,  397,   38,   38,  396,   38,   38,  398,   38,
       38,   38,   38,   38,   38,  399,   38,   38,  401,   38,
       38,  400,   38,   38,  849,  413,  849,  406,  407,  849,
      405,  404,   38,   38,  403,   38,   38,   38,   38,  414,
      849,  412,   38,   38,  408,  409,   38,   38,  411,   38,
       38,  415,   38,   38,  849,  410,   38,   38,  417,   38,
       38,   38,   38,   38,   38,  416,   38,   38,   38,   38,
       38,   38,  419,  419,  419,  849,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  424,  420,  418,   38,
       38,  421,  426,  427,   38,   38,  849,  422,  849,  262,

       38,   38,  849,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  849,  423,  425,  428,  294,  849,  429,
       38,   38,  849,  294,  432,  431,  434,   38,   38,   38,
       38,  849,  430,   38,   38,  849,   38,   38,   38,   38,
       38,   38,  433,  849,  436,  849,  262,  849,  435,   38,
       38,  849,   38,   38,  437,   38,   38,   38,   38,   38,
       38,  294,   38,   38,   38,   38,  438,  441,  439,   38,
       38,  849,  440,  849,   38,   38,  443,  442,   38,   38,
      849,  294,   38,   38,  849,   38,   38,   38,   38,  849,
      447,  849,  445,   38,   38,   38,   38,   38,   38,  849,

      404,   38,   38,  444,  446,  448,   38,   38,  451,   38,
       38,  849,  450,  452,  849,  449,   38,   38,   38,   38,
       38,   38,  849,  294,  454,  849,  455,  849,  453,   38,
       38,   38,   38,   38,   38,  849,  458,   38,   38,  456,
      459,   38,   38,  849,  457,  460,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,  461,   38,
       38,  464,  849,  462,  465,  849,  466,   38,   38,  849,
       38,   38,   38,   38,   38,   38,   38,   38,  463,  849,
       38,   38,   38,   38,  469,   38,   38,  470,  849,  468,
      484,  474,  473,  467,   38,   38,  849,  476,  477,  849,

      471,  485,  849,  478,  472,  262,  479,  480,  483,   38,
       38,  475,  481,  482,   38,   38,   38,   38,  488,  486,
      487,   38,   38,  849,  347,  347,  347,   38,   38,  490,
       38,   38,  849,  489,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,  849,  347,
      347,  347,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  849,  496,  849,  262,  497,  491,
      849,  494,   38,   38,  849,  492,  849,  498,   38,   38,
       38,   38,  849,  499,  495,   38,   38,  849,  493,   38,
       38,   38,   38,   38,   38,  502,  262,  503,   38,   38,

      849,  504,  849,   38,   38,  849,  500,  849,  501,  262,
       38,   38,  506,   38,   38,   38,   38,   38,   38,  294,
      849,   38,   38,  849,   38,   38,  505,   38,   38,  849,
      508,   38,   38,   38,   38,   38,   38,   38,   38,  262,
      849,  509,  510,  507,  849,   38,   38,   38,   38,  849,
      511,  513,  512,   38,   38,   38,   38,  849,  520,   38,
       38,  521,  522,  514,  515,  516,   38,   38,  517,   38,
       38,  523,  404,  524,   38,   38,   38,   38,   38,   38,
      849,  518,   38,   38,  849,   38,   38,   38,   38,  419,
       38,   38,  519,   38,   38,   38,   38,   38,   38,   38,

       38,  525,   38,   38,  527,   38,   38,  419,  849,  526,
      536,  419,  849,  529,   38,   38,  531,   38,   38,  528,
       38,   38,  849,  530,  533,   38,   38,  849,  532,  849,
      534,  539,   38,   38,   38,   38,  347,  540,  262,  535,
       38,   38,   38,   38,   38,   38,   38,   38,  538,   38,
       38,  849,  537,  541,  849,  542,  546,  849,  548,  849,
      544,   38,   38,  549,   38,   38,  849,  545,   38,   38,
       38,   38,   38,   38,  849,  543,   38,   38,  849,  550,
       38,   38,   38,   38,   38,   38,  547,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  559,  551,  554,

      553,   38,   38,  552,   38,   38,   38,   38,   38,   38,
      565,  557,   38,   38,  558,   38,   38,  849,  556,   38,
       38,  555,  849,   38,   38,  849,  563,  562,   38,   38,
       38,   38,  849,  561,  566,  849,  560,   38,   38,  849,
      567,  849,  569,  570,  849,  564,  572,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  849,  568,   38,
       38,   38,   38,  849,  571,   38,   38,  575,  849,  574,
      849,  294,   38,   38,   38,   38,   38,   38,   38,   38,
      573,   38,   38,  849,  577,   38,   38,   38,   38,   38,
       38,  849,  576,  849,  404,  578,  404,   38,   38,  849,

      579,   38,   38,  590,  582,   38,   38,  580,   38,   38,
       38,   38,   38,   38,  581,   38,   38,  584,  849,  583,
       38,   38,  849,  585,  849,  592,  589,  586,   38,   38,
      849,  587,   38,   38,   38,   38,  849,  588,   38,   38,
       38,   38,  849,  591,  593,  849,  596,  594,  849,  595,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,  598,  597,
       38,   38,  849,  601,  849,  603,  599,   38,   38,   38,
       38,   38,   38,  849,  600,  604,  602,   38,   38,  849,
       38,   38,   38,   38,  849,  605,   38,   38,  849,  610,

      262,  849,  606,   38,   38,  609,  849,  612,  849,  607,
      849,  608,  613,  849,  611,   38,   38,   38,   38,  849,
      619,   38,   38,   38,   38,  616,   38,   38,  614,  615,
      617,   38,   38,  849,  624,  625,   38,   38,   38,   38,
       38,   38,   38,   38,  849,  618,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  621,  627,  623,   38,
       38,   38,   38,  620,   38,   38,  622,   38,   38,  849,
       38,   38,  849,  419,   38,   38,   38,   38,   38,   38,
      849,  628,   38,   38,  626,  849,   38,   38,  631,   38,
       38,  849,  629,   38,   38,  849,  294,   38,   38,   38,

       38,  632,  630,   38,   38,   38,   38,  634,  633,  404,
       38,   38,   38,   38,  638,  849,  635,  636,  849,  639,
      849,  637,  641,  849,  640,   38,   38,   38,   38,  642,
       38,   38,   38,   38,  294,  849,  643,  849,  645,   38,
       38,   38,   38,   38,   38,  849,   38,   38,  849,  652,
      849,  419,  646,  647,  644,   38,   38,   38,   38,   38,
       38,  649,  654,  849,  648,  849,  653,   38,   38,   38,
       38,  849,  656,  658,  849,  650,   38,   38,   38,   38,
      655,  657,  651,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  849,  419,   38,   38,   38,   38,   38,

       38,  849,  659,   38,   38,  661,   38,   38,   38,   38,
       38,   38,  849,  660,  849,  262,   38,   38,   38,   38,
       38,   38,  262,   38,   38,   38,   38,  849,  262,  664,
       38,   38,  663,  347,  347,  849,   38,   38,  262,  347,
      347,  662,  667,  849,  294,  666,   38,   38,  849,  665,
      669,  294,  849,  671,   38,   38,  849,  668,   38,   38,
       38,   38,   38,   38,  670,   38,   38,   38,   38,   38,
       38,  674,  672,   38,   38,  849,  673,   38,   38,   38,
       38,  675,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  849,   38,   38,  262,

      849,  678,  676,  849,  294,  679,   38,   38,  680,  849,
      677,  849,  681,   38,   38,   38,   38,  849,  404,   38,
       38,   38,   38,  684,  404,  682,  849,  404,   38,   38,
       38,   38,  686,  685,  692,  683,  688,   38,   38,   38,
       38,   38,   38,  689,  693,  696,  849,  687,   38,   38,
      691,  849,  294,  294,  294,   38,   38,   38,   38,   38,
       38,   38,   38,  690,  849,  700,   38,   38,   38,   38,
      849,  694,   38,   38,   38,   38,  698,   38,   38,   38,
       38,  849,  695,  849,  699,  697,   38,   38,   38,   38,
       38,   38,  849,  702,   38,   38,  849,  704,  703,   38,

       38,   38,   38,   38,   38,  705,  849,  701,   38,   38,
      849,  707,   38,   38,  706,  849,  708,   38,   38,  849,
      262,   38,   38,   38,   38,   38,   38,  849,  709,   38,
       38,   38,   38,  849,  714,   38,   38,  715,  849,  710,
      711,  849,  712,  713,   38,   38,  716,  717,   38,   38,
      849,  347,  849,  718,   38,   38,  719,  849,   38,   38,
       38,   38,  849,   38,   38,  849,  720,  849,  294,   38,
       38,   38,   38,   38,   38,   38,   38,  721,  849,   38,
       38,  849,   38,   38,  724,  849,   38,   38,  849,  722,
       38,   38,   38,   38,   38,   38,  404,  725,  723,   38,

       38,   38,   38,   38,   38,  849,  404,   38,   38,   38,
       38,   38,   38,   38,   38,  726,  727,  732,   38,   38,
      849,  728,  849,   38,   38,  849,  729,  731,  419,  735,
       38,   38,  730,  733,   38,   38,   38,   38,   38,   38,
      849,  734,  737,  294,  849,   38,   38,   38,   38,  294,
      849,  736,  849,  742,  849,  738,  849,  294,  849,  740,
      744,  739,  262,   38,   38,   38,   38,   38,   38,  849,
      741,   38,   38,   38,   38,   38,   38,  849,  743,  849,
       38,   38,   38,   38,  849,   38,   38,  849,  262,   38,
       38,  849,  347,  849,  745,   38,   38,   38,   38,   38,

       38,  747,  849,  754,   38,   38,  749,   38,   38,   38,
       38,   38,   38,  748,  849,  746,  751,  752,   38,   38,
      849,  750,   38,   38,   38,   38,  849,  347,  753,  849,
       38,   38,   38,   38,   38,   38,   38,   38,  755,   38,
       38,  849,   38,   38,  849,  404,  849,  756,   38,   38,
      758,   38,   38,   38,   38,   38,   38,  757,   38,   38,
       38,   38,   38,   38,  759,  762,   38,   38,   38,   38,
      764,  765,   38,   38,   38,   38,  760,  761,   38,   38,
      763,  294,   38,   38,   38,   38,  849,  766,   38,   38,
      294,   38,   38,  769,   38,   38,  768,   38,   38,   38,

       38,  849,  767,  849,  770,   38,   38,   38,   38,  771,
      849,  262,  849,  745,  772,   38,   38,  294,   38,   38,
      773,   38,   38,  776,   38,   38,   38,   38,  774,  849,
      775,  849,   38,   38,   38,   38,  849,  777,  728,   38,
       38,  849,  780,  778,   38,   38,   38,   38,   38,   38,
      849,  728,  849,   38,   38,   38,   38,  849,  781,   38,
       38,  779,  849,  294,   38,   38,  849,  782,  785,   38,
       38,  849,  784,   38,   38,   38,   38,  783,  849,  788,
      849,  787,   38,   38,   38,   38,  849,  786,   38,   38,
       38,   38,  792,  849,  262,   38,   38,  793,  262,  789,

      790,  791,   38,   38,   38,   38,   38,   38,  849,   38,
       38,  849,   38,   38,  795,   38,   38,   38,   38,  794,
       38,   38,  849,  728,  849,  797,  801,   38,   38,  849,
      796,  849,   38,   38,   38,   38,   38,   38,   38,   38,
      728,   38,   38,  294,  404,  404,  404,  849,  294,  800,
       38,   38,  799,   38,   38,  849,  798,  849,   38,   38,
      849,  802,  262,  849,  807,   38,   38,  803,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      804,  805,  849,  806,   38,   38,  808,  849,  810,  849,
      814,   38,   38,   38,   38,  849,  809,  294,  813,   38,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  812,   38,   38,  811,   38,   38,   38,   38,  849,
       38,   38,  819,   38,   38,   38,   38,  849,  815,   38,
       38,  816,  849,  817,   38,   38,  820,  830,  823,  849,
      818,  849,  826,   38,   38,   38,   38,  821,   38,   38,
      849,   38,   38,  822,  824,  825,   38,   38,  831,   38,
       38,   38,   38,  849,  827,   38,   38,  828,   38,   38,
       38,   38,  829,   38,   38,  849,  745,   38,   38,  832,
      834,  849,   38,   38,  849,   38,   38,  262,  836,  840,
      840,  840,  840,  837,   38,   38,  835,  849,  833,  840,

       38,   38,  849,  840,   38,   38,  840,   38,   38,  839,
      849,  838,   38,   38,  842,  849,  294,  849,  294,  849,
      841,  294,   38,   38,  843,  849,  840,  840,  840,  840,
      849,  844,   38,   38,  849,  845,  840,   38,   38,  849,
      840,   38,   38,  840,  846,   38,   38,   38,   38,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  347,  849,  849,  849,  849,
      849,  294,  849,  847,  849,  849,  849,  849,  849,  849,
      294,  849,  849,  849,  849,  849,  294,  849,  849,  849,
      849,  848,   36,   36,  849,  849,  849,   36,   39,   39,

       39,   39,   39,   39,   39,   83,   83,   83,   83,   83,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   90,
      849,   90,   90,   90,   90,   90,   90,   90,   91,  849,
       91,   93,   93,  849,   93,   38,   38,   38,   38,   38,
       38,   38,    3,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,

      849,  849,  849,  849,  849,  849,  849,  849,  849
    } ;

static const flex_int16_t yy_chk[3210] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    7,    5,    8,
        7,    9,   10,   10,   11,   11,   12,   12,   13,   13,
       14,   14,   16,   16,   89,   17,   17,   20,   20,   15,
       15,   28,   28,   35,   36,   30,   30,   39,   39,   18,

       18,   32,   15,   32,   19,   19,   21,   21,   47,   47,
       10,   22,   22,   26,   26,   35,   88,   13,   10,   10,
       11,   13,   12,   11,   15,   12,    8,   14,    9,   11,
       30,   12,   15,   17,   18,   33,   20,    3,   15,   19,
       28,   21,   18,   23,   23,    0,   22,   19,   18,   21,
       22,   36,   24,   24,   47,   21,   40,   40,   21,   19,
       25,   25,   26,   44,   44,   26,   91,   29,   29,    0,
       23,   31,   31,    0,   41,   41,   42,   42,   23,   24,
       29,   43,   43,   45,   45,   23,   46,   46,   91,   23,
        0,   24,    0,   23,   40,   23,    0,   23,   31,   25,

       48,   48,   29,   25,   24,   49,   49,   50,   50,   24,
       31,    0,   42,   29,    0,   44,   51,   51,   52,   52,
       43,   53,   53,   31,   41,   54,   54,   55,   55,   46,
       45,   56,   56,   57,   57,   58,   58,   59,   59,    0,
       52,    0,   60,   60,   62,   62,   48,   50,   61,   61,
       63,   63,   64,   64,    0,   49,   65,   65,   49,   51,
        0,   50,   66,   66,   52,   55,   54,   53,   67,   67,
       68,   68,   58,    0,   57,   70,   70,    0,   59,   69,
       69,    0,   71,   71,   56,   72,   72,   73,   73,    0,
       60,   59,   60,    0,   61,   59,   62,    0,   69,   65,

       74,   74,   75,   75,   63,   76,   76,   77,   77,    0,
       64,   66,   78,   78,   79,   79,   67,   71,   80,   80,
       81,   81,   70,   68,   82,   82,   73,   84,   84,   85,
       85,   86,   86,    0,   72,   76,    0,   74,   87,   87,
        0,   75,   94,   94,   95,   95,   96,   96,   97,   97,
        0,   78,   98,   98,   99,   99,    0,   80,    0,   82,
       76,  100,  100,  101,  101,   77,   79,  102,  102,  103,
      103,    0,   81,    0,   84,   87,  104,  104,   85,  105,
      105,    0,  106,  106,   86,    0,   95,  107,  107,   96,
       98,    0,  108,  108,   94,    0,   97,  109,  109,    0,

      110,  110,  111,  111,   99,  112,  112,  113,  113,  114,
      114,  100,  101,  102,    0,  110,  110,  110,    0,  105,
      108,  115,  115,  103,  106,  116,  116,    0,  110,  110,
      104,  110,    0,  117,  117,  118,  118,  119,  119,  115,
      107,  111,    0,  109,  114,  108,  117,  120,  120,  113,
      121,  121,    0,  118,    0,  119,  117,  122,  122,  112,
      119,  123,  123,    0,  116,  124,  124,  125,  125,  126,
      126,  127,  127,  128,  128,  129,  129,  130,  130,  131,
      131,  132,  132,    0,  133,  133,    0,  128,  134,  134,
        0,  135,  135,    0,  122,  137,  137,  121,  133,    0,

      123,  120,  136,  136,  138,  138,  139,  139,  135,    0,
      126,  125,    0,  124,    0,  130,    0,  136,  132,  140,
      140,  141,  141,  142,  142,  129,  127,  143,  143,  131,
      135,  144,  144,    0,  137,    0,  134,  145,  145,  147,
      147,  148,  148,  149,  149,  150,  150,  151,  151,  152,
      152,  153,  153,  154,  154,    0,  136,    0,  138,    0,
      156,  156,  143,  139,    0,  140,  152,  155,  155,  158,
      158,  141,    0,  142,  157,  157,  148,  153,  147,  145,
      159,  159,  149,  150,  144,    0,  151,    0,  157,    0,
      155,  160,  160,  161,  161,  162,  162,  163,  163,  164,

      164,  153,  156,  165,  165,  154,  166,  166,  167,  167,
      161,  168,  168,  169,  169,  170,  170,    0,  162,  159,
      171,  171,  172,  172,  158,    0,  173,  173,  174,  174,
      175,  175,  161,  176,  176,    0,  177,  177,  164,  178,
      178,  170,    0,  167,  160,    0,  163,    0,  179,  179,
      168,  165,  180,  180,  181,  181,  182,  182,  183,  183,
      166,  184,  184,  185,  185,    0,  186,  186,  172,  173,
        0,  169,  187,  187,  171,    0,  176,    0,  175,  177,
      174,    0,  178,  179,  188,  188,  189,  189,    0,  181,
      190,  190,  191,  191,    0,  180,  192,  192,  182,  193,

      193,    0,  185,    0,  183,  186,  194,  194,  195,  195,
      196,  196,    0,  188,    0,  184,  197,  197,  187,  198,
      198,  199,  199,  200,  200,  201,  201,  203,  203,  190,
        0,  191,  189,  204,  204,  205,  205,  206,  206,  207,
      207,  210,  210,  194,    0,  193,  209,  209,  211,  211,
        0,  192,  200,  213,  213,  212,  212,  220,  220,  196,
      199,  214,  214,  201,  218,  218,  210,  198,  219,  219,
      203,  197,  202,  202,    0,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  206,    0,  204,  208,  208,
      216,  216,  207,    0,  209,  215,  215,  217,  217,  213,

      211,  208,  208,  212,  214,    0,  208,    0,  215,  220,
      218,  217,    0,  208,    0,  208,    0,  208,  221,  221,
      215,  219,  222,  222,  223,  223,  215,  215,  224,  224,
      225,  225,  226,  226,  227,  227,  228,  228,    0,  216,
      229,  229,  230,  230,  231,  231,  233,  233,    0,  234,
      234,  237,  237,  235,  235,  236,  236,  238,  238,  239,
      239,  221,  240,  240,    0,  246,  246,  226,    0,  227,
      226,    0,  228,  223,  224,  248,  248,  233,  225,  241,
      241,  230,  242,  242,    0,  243,  243,  231,  244,  244,
      245,  245,  229,  232,  232,  234,  235,    0,  236,  247,

      247,  237,  246,  238,    0,  239,  232,  241,    0,  232,
      232,  232,  240,  243,  249,  249,  244,  247,  245,  232,
      232,  232,  232,  250,  250,  251,  251,    0,  242,  248,
      252,  252,  253,  253,  254,  254,  232,  255,  255,  256,
      256,  257,  257,  258,  258,  259,  259,    0,  251,  260,
      260,  262,  262,  249,  261,  261,  264,  264,  252,  263,
        0,  258,  250,    0,  263,  263,  263,  263,    0,  265,
      265,  266,  266,  254,  265,  265,  265,    0,  253,    0,
      255,  267,  267,  261,  268,  268,  269,  269,  256,  270,
      270,  271,  271,  257,  272,  272,  273,  273,  274,  274,

        0,  260,  264,  259,  275,  275,  276,  276,  277,  277,
      278,  278,  279,  279,  266,  280,  280,    0,  281,  281,
        0,  276,  282,  282,  283,  283,    0,  284,  284,  285,
      285,    0,  269,  272,  267,  273,  268,    0,  286,  286,
        0,  271,  287,  287,  270,  278,  288,  288,  289,  289,
      290,  290,  274,    0,  275,    0,  291,  291,  292,  292,
      279,  282,    0,  288,  277,  284,    0,  280,  281,    0,
      293,  293,  285,  294,  294,    0,  283,  286,  295,  295,
        0,  287,  296,  296,  297,  297,  298,  298,  290,  299,
      299,    0,  300,  300,  301,  301,  302,  302,  303,  303,

      304,  304,  306,  306,  289,  291,  293,    0,  305,  305,
        0,  292,  307,  307,  308,  308,  309,  309,  310,  310,
      311,  311,  312,  312,  298,    0,  313,  313,  296,    0,
      295,  314,  314,  303,  315,  315,    0,  301,  297,  300,
      318,  318,  304,  305,  302,    0,  300,  299,  313,  304,
      319,  319,  306,    0,  307,  311,  316,  316,    0,  309,
      317,  317,  308,  320,  320,  321,  321,  322,  322,  323,
      323,  307,  310,  324,  324,  312,  325,  325,  316,  326,
      326,  327,  327,  318,    0,  314,  324,    0,  315,  319,
      328,  328,    0,  329,  329,  317,  330,  330,    0,  331,

      331,    0,  321,  332,  332,  320,  334,  334,  321,  333,
      333,  335,  335,  337,  337,  321,  336,  336,  323,  338,
      338,  322,  339,  339,    0,  335,    0,  328,  329,    0,
      327,  326,  340,  340,  325,  341,  341,  342,  342,  335,
        0,  334,  343,  343,  330,  331,  344,  344,  333,  346,
      346,  336,  345,  345,    0,  332,  347,  347,  338,  348,
      348,  349,  349,  350,  350,  337,  351,  351,  353,  353,
      352,  352,  343,  343,  343,    0,  354,  354,  355,  355,
      356,  356,  357,  357,  358,  358,  350,  344,  342,  359,
      359,  345,  352,  352,  360,  360,    0,  346,    0,  348,

      362,  362,    0,  361,  361,  363,  363,  364,  364,  365,
      365,  366,  366,    0,  349,  351,  353,  354,    0,  355,
      367,  367,    0,  358,  359,  357,  361,  368,  368,  369,
      369,    0,  356,  370,  370,    0,  371,  371,  372,  372,
      373,  373,  360,    0,  363,    0,  364,    0,  362,  374,
      374,    0,  375,  375,  366,  376,  376,  378,  378,  377,
      377,  365,  379,  379,  380,  380,  367,  371,  369,  381,
      381,    0,  370,    0,  382,  382,  373,  372,  383,  383,
        0,  368,  384,  384,    0,  385,  385,  386,  386,    0,
      376,    0,  375,  387,  387,  388,  388,  389,  389,    0,

      378,  390,  390,  374,  375,  377,  391,  391,  381,  392,
      392,    0,  380,  382,    0,  379,  393,  393,  394,  394,
      395,  395,    0,  384,  385,    0,  386,    0,  383,  396,
      396,  397,  397,  398,  398,    0,  389,  399,  399,  387,
      390,  400,  400,    0,  388,  391,  401,  401,  402,  402,
      403,  403,  404,  404,  405,  405,  406,  406,  392,  407,
      407,  395,    0,  393,  396,    0,  397,  408,  408,    0,
      410,  410,  411,  411,  413,  413,  414,  414,  394,    0,
      409,  409,  412,  412,  400,  415,  415,  401,    0,  399,
      411,  406,  405,  398,  416,  416,    0,  409,  409,    0,

      402,  411,    0,  409,  403,  408,  409,  409,  410,  417,
      417,  407,  409,  409,  418,  418,  419,  419,  414,  412,
      413,  420,  420,    0,  420,  420,  420,  421,  421,  416,
      422,  422,    0,  415,  423,  423,  424,  424,  425,  425,
      426,  426,  427,  427,  428,  428,  429,  429,    0,  429,
      429,  429,  430,  430,  431,  431,  432,  432,  433,  433,
      434,  434,  435,  435,    0,  426,    0,  422,  426,  418,
        0,  424,  437,  437,    0,  421,    0,  427,  436,  436,
      438,  438,    0,  428,  425,  440,  440,    0,  423,  439,
      439,  441,  441,  442,  442,  434,  433,  435,  443,  443,

        0,  436,    0,  444,  444,    0,  430,    0,  431,  432,
      445,  445,  439,  446,  446,  447,  447,  448,  448,  438,
        0,  449,  449,    0,  450,  450,  437,  452,  452,    0,
      441,  451,  451,  453,  453,  454,  454,  455,  455,  442,
        0,  443,  444,  440,    0,  456,  456,  457,  457,    0,
      445,  447,  446,  458,  458,  459,  459,    0,  456,  460,
      460,  456,  456,  448,  449,  450,  461,  461,  451,  462,
      462,  456,  453,  456,  463,  463,  464,  464,  465,  465,
        0,  452,  466,  466,    0,  467,  467,  468,  468,  455,
      469,  469,  454,  470,  470,  471,  471,  472,  472,  473,

      473,  457,  474,  474,  461,  476,  476,  459,    0,  458,
      470,  460,    0,  463,  475,  475,  465,  480,  480,  462,
      477,  477,    0,  464,  467,  478,  478,    0,  466,    0,
      468,  475,  479,  479,  481,  481,  471,  475,  473,  469,
      482,  482,  483,  483,  484,  484,  485,  485,  474,  486,
      486,    0,  472,  476,    0,  477,  480,    0,  482,    0,
      478,  487,  487,  483,  488,  488,    0,  479,  489,  489,
      490,  490,  491,  491,    0,  477,  492,  492,    0,  484,
      493,  493,  494,  494,  495,  495,  481,  496,  496,  497,
      497,  498,  498,  499,  499,  500,  500,  493,  485,  488,

      487,  501,  501,  486,  502,  502,  503,  503,  504,  504,
      499,  491,  505,  505,  492,  506,  506,    0,  490,  510,
      510,  489,    0,  507,  507,    0,  497,  496,  508,  508,
      509,  509,    0,  495,  500,    0,  494,  511,  511,    0,
      501,    0,  503,  504,    0,  498,  507,  512,  512,  513,
      513,  514,  514,  515,  515,  516,  516,    0,  502,  517,
      517,  518,  518,    0,  506,  519,  519,  510,    0,  509,
        0,  505,  520,  520,  521,  521,  522,  522,  523,  523,
      508,  524,  524,    0,  512,  525,  525,  526,  526,  527,
      527,    0,  511,    0,  516,  513,  518,  528,  528,    0,

      514,  529,  529,  527,  519,  530,  530,  515,  531,  531,
      532,  532,  533,  533,  517,  534,  534,  521,    0,  520,
      535,  535,    0,  522,    0,  529,  526,  523,  536,  536,
        0,  524,  537,  537,  538,  538,    0,  525,  539,  539,
      540,  540,    0,  528,  530,    0,  533,  531,    0,  532,
      541,  541,  542,  542,  543,  543,  544,  544,  545,  545,
      546,  546,  547,  547,  548,  548,  549,  549,  535,  534,
      550,  550,    0,  538,    0,  540,  536,  551,  551,  552,
      552,  553,  553,    0,  537,  541,  539,  554,  554,    0,
      555,  555,  556,  556,    0,  542,  557,  557,    0,  548,

      546,    0,  543,  558,  558,  547,    0,  550,    0,  544,
        0,  545,  551,    0,  549,  559,  559,  560,  560,    0,
      558,  561,  561,  563,  563,  554,  562,  562,  552,  553,
      555,  564,  564,    0,  564,  564,  565,  565,  566,  566,
      567,  567,  568,  568,    0,  556,  569,  569,  570,  570,
      571,  571,  572,  572,  573,  573,  560,  567,  563,  574,
      574,  575,  575,  559,  576,  576,  562,  577,  577,    0,
      578,  578,    0,  561,  579,  579,  580,  580,  581,  581,
        0,  568,  582,  582,  565,    0,  583,  583,  571,  584,
      584,    0,  569,  585,  585,    0,  566,  586,  586,  587,

      587,  572,  570,  588,  588,  589,  589,  574,  573,  578,
      590,  590,  592,  592,  579,    0,  575,  576,    0,  580,
        0,  577,  583,    0,  581,  591,  591,  593,  593,  584,
      594,  594,  595,  595,  582,    0,  585,    0,  587,  596,
      596,  597,  597,  598,  598,    0,  599,  599,    0,  595,
        0,  589,  588,  590,  586,  600,  600,  601,  601,  603,
      603,  592,  596,    0,  591,    0,  595,  602,  602,  604,
      604,    0,  598,  601,    0,  593,  605,  605,  606,  606,
      597,  599,  594,  607,  607,  608,  608,  609,  609,  610,
      610,  611,  611,    0,  600,  612,  612,  613,  613,  614,

      614,    0,  602,  616,  616,  604,  615,  615,  617,  617,
      618,  618,    0,  603,    0,  606,  619,  619,  620,  620,
      621,  621,  605,  622,  622,  623,  623,    0,  607,  611,
      624,  624,  610,  624,  624,    0,  625,  625,  608,  625,
      625,  609,  616,    0,  615,  613,  626,  626,    0,  612,
      618,  614,    0,  620,  627,  627,    0,  617,  628,  628,
      629,  629,  630,  630,  619,  631,  631,  632,  632,  633,
      633,  623,  621,  634,  634,    0,  622,  635,  635,  636,
      636,  626,  637,  637,  638,  638,  639,  639,  640,  640,
      641,  641,  642,  642,  643,  643,    0,  644,  644,  629,

        0,  630,  627,    0,  631,  632,  645,  645,  633,    0,
      628,    0,  635,  646,  646,  647,  647,    0,  636,  649,
      649,  648,  648,  640,  638,  637,    0,  634,  650,  650,
      651,  651,  642,  641,  648,  639,  644,  652,  652,  653,
      653,  654,  654,  645,  648,  651,    0,  643,  655,  655,
      647,    0,  653,  653,  653,  656,  656,  657,  657,  658,
      658,  659,  659,  646,    0,  655,  660,  660,  661,  661,
        0,  649,  662,  662,  663,  663,  654,  664,  664,  665,
      665,    0,  650,    0,  654,  652,  666,  666,  667,  667,
      668,  668,    0,  657,  669,  669,    0,  659,  658,  670,

      670,  671,  671,  672,  672,  660,    0,  656,  673,  673,
        0,  662,  674,  674,  661,    0,  664,  675,  675,    0,
      663,  676,  676,  677,  677,  678,  678,    0,  665,  679,
      679,  680,  680,    0,  670,  682,  682,  671,    0,  666,
      667,    0,  668,  669,  681,  681,  672,  673,  683,  683,
        0,  674,    0,  675,  684,  684,  676,    0,  685,  685,
      686,  686,    0,  687,  687,    0,  677,    0,  679,  688,
      688,  689,  689,  690,  690,  691,  691,  678,    0,  692,
      692,    0,  693,  693,  682,    0,  694,  694,    0,  680,
      695,  695,  696,  696,  697,  697,  683,  685,  681,  698,

      698,  699,  699,  700,  700,    0,  684,  701,  701,  702,
      702,  703,  703,  704,  704,  686,  687,  693,  705,  705,
        0,  688,    0,  706,  706,    0,  689,  692,  691,  697,
      707,  707,  690,  694,  708,  708,  709,  709,  710,  710,
        0,  696,  701,  695,    0,  711,  711,  712,  712,  699,
        0,  700,    0,  707,    0,  702,    0,  698,    0,  704,
      711,  703,  706,  713,  713,  714,  714,  715,  715,    0,
      705,  716,  716,  717,  717,  718,  718,    0,  710,    0,
      719,  719,  720,  720,    0,  721,  721,    0,  709,  722,
      722,    0,  708,    0,  712,  723,  723,  724,  724,  725,

      725,  714,    0,  722,  726,  726,  716,  727,  727,  728,
      728,  730,  730,  715,    0,  713,  719,  720,  729,  729,
        0,  718,  731,  731,  732,  732,    0,  717,  721,    0,
      733,  733,  734,  734,  735,  735,  736,  736,  723,  737,
      737,    0,  738,  738,    0,  724,    0,  725,  739,  739,
      727,  740,  740,  741,  741,  743,  743,  726,  742,  742,
      744,  744,  745,  745,  729,  733,  746,  746,  747,  747,
      735,  736,  748,  748,  749,  749,  731,  732,  750,  750,
      734,  738,  751,  751,  752,  752,    0,  737,  753,  753,
      740,  754,  754,  742,  755,  755,  741,  756,  756,  757,

      757,    0,  739,    0,  743,  758,  758,  759,  759,  744,
        0,  748,    0,  746,  747,  760,  760,  750,  761,  761,
      749,  762,  762,  753,  763,  763,  764,  764,  751,    0,
      752,    0,  765,  765,  766,  766,    0,  754,  757,  767,
      767,    0,  759,  755,  768,  768,  769,  769,  770,  770,
        0,  756,    0,  771,  771,  772,  772,    0,  760,  774,
      774,  758,    0,  761,  773,  773,    0,  762,  765,  775,
      775,    0,  764,  776,  776,  777,  777,  763,    0,  768,
        0,  767,  778,  778,  779,  779,    0,  766,  780,  780,
      781,  781,  773,    0,  772,  782,  782,  775,  774,  769,

      770,  771,  783,  783,  784,  784,  785,  785,    0,  786,
      786,    0,  787,  787,  777,  788,  788,  789,  789,  776,
      790,  790,    0,  779,    0,  781,  787,  791,  791,    0,
      778,    0,  792,  792,  793,  793,  794,  794,  795,  795,
      780,  796,  796,  784,  796,  796,  796,    0,  782,  786,
      797,  797,  785,  798,  798,    0,  783,    0,  799,  799,
        0,  788,  789,    0,  794,  800,  800,  790,  801,  801,
      802,  802,  803,  803,  804,  804,  805,  805,  806,  806,
      791,  792,    0,  793,  808,  808,  795,    0,  798,    0,
      803,  807,  807,  809,  809,    0,  797,  799,  802,  810,

      810,  811,  811,  812,  812,  813,  813,  815,  815,  814,
      814,  801,  816,  816,  800,  817,  817,  818,  818,    0,
      819,  819,  808,  820,  820,  821,  821,    0,  804,  822,
      822,  805,    0,  806,  823,  823,  809,  819,  812,    0,
      807,    0,  815,  824,  824,  825,  825,  810,  826,  826,
        0,  827,  827,  811,  813,  814,  828,  828,  820,  829,
      829,  830,  830,    0,  816,  831,  831,  817,  833,  833,
      835,  835,  818,  834,  834,    0,  822,  836,  836,  821,
      825,    0,  837,  837,    0,  832,  832,  823,  827,  832,
      832,  832,  832,  828,  838,  838,  826,    0,  824,  832,

      839,  839,    0,  832,  840,  840,  832,  841,  841,  830,
        0,  829,  842,  842,  834,    0,  836,    0,  831,    0,
      833,  837,  843,  843,  835,    0,  843,  843,  843,  843,
        0,  838,  844,  844,    0,  839,  843,  845,  845,    0,
      843,  846,  846,  843,  841,  847,  847,  848,  848,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  842,    0,    0,    0,    0,
        0,  844,    0,  845,    0,    0,    0,    0,    0,    0,
      846,    0,    0,    0,    0,    0,  848,    0,    0,    0,
        0,  847,  850,  850,    0,    0,    0,  850,  851,  851,

      851,  851,  851,  851,  851,  852,  852,  852,  852,  852,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  854,
        0,  854,  854,  854,  854,  854,  854,  854,  855,    0,
      855,  856,  856,    0,  856,  857,  857,  857,  857,  857,
      857,  857,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,

      849,  849,  849,  849,  849,  849,  849,  849,  849
    } ;

static const flex_int16_t yy_rule_linenum[19] =
    {   0,
       84,   85,   87,   88,   89,   90,   91,   92,   93,   98,
       99,  102,  107,  113,  119,  127,  132,  137
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"

#include <string>

#include "scanner.h"

/* import the parser's token type into a local typedef */
typedef example::Parser::token token;
typedef example::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1481 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 49 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1494 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1496 "scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 73 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


#line 76 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

#line 1700 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 850 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 849 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 19 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 19 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 20 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 84 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 85 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 87 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 88 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 89 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 90 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 92 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 93 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 98 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 99 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 102 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 107 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 119 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
/* gobble up white-spaces */
case 16:
YY_RULE_SETUP
#line 127 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 132 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->lines(yyleng); yylloc->step();
}
	YY_BREAK
/* pass all other characters up to bison */
case 18:
YY_RULE_SETUP
#line 137 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        return static_cast<token_type>(*yytext);
    }
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 19:
YY_RULE_SETUP
#line 143 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
ECHO;
	YY_BREAK
#line 1897 "scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Examplefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Examplefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Examplerealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Examplerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 850 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 850 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 849);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Examplealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Examplealloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Examplefree((void *) b->yy_ch_buf  );

	Examplefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Examplealloc(new_size  );

		else
			(yy_start_stack) = (int *) Examplerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Examplealloc (yy_size_t  size )
{
			return malloc(size);
}

void *Examplerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Examplefree (void * ptr )
{
			free( (char *) ptr );	/* see Examplerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 143 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


namespace example {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : ExampleFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int ExampleFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int ExampleFlexLexer::yywrap()
{
    return 1;
}

