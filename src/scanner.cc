#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ExampleFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc Examplealloc

    #define yyrealloc Examplerealloc

    #define yyfree Examplefree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *Examplealloc ( yy_size_t  );
void *Examplerealloc ( void *, yy_size_t  );
void Examplefree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[809] =
    {   0,
        0,    0,   20,   18,   16,   17,   18,   12,   12,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   16,    0,    2,   13,   12,    0,   15,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,    0,    0,    2,   13,   13,   15,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,    1,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   10,   14,   14,
       14,   14,   14,   14,   14,    3,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   11,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,    9,
        9,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    9,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,    6,    7,    8,   14,   14,   14,   14,
       14,    9,   14,   14,    9,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    9,   14,   14,
       14,   14,   14,   14,    9,   14,   14,   14,    5,   14,

        9,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    9,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    4,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,    9,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,    9,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,    9,   14,    9,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        9,   14,   14,   14,   14,   14,   14,   14,    9,   14,

       14,    9,   14,   14,   14,   14,   14,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   26,   26,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   26,   26,   39,
        1,    1,    1,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   26,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    8,
        6,    6,    6,    6,    6,    7,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    9,    6,    6
    } ;

static const flex_int16_t yy_base[817] =
    {   0,
        0,    0,  138, 2992,   64, 2992,   62,   62,   64,   66,
       68,   70,   84,   74,   82,   72,   79,   93,   96,   86,
      100,   98,  144,  151,   90,  102,    0,  106,  146,  157,
      155,   80,   90,    0,   70,  104,    0,    0,  108,  162,
      164,  167,  169,  172,  174,  176,  183,  187,  198,  204,
      209,  211,  214,  217,  224,  221,  226,  229,  234,  236,
      239,  241,  245,  248,  253,  260,  263,  269,  271,  276,
      278,  280,  293,  289,  299,  301,  303,  308,  312,    0,
      320,  322,  324,  331,   82,   75,    0,   74, 2992,    0,
      333,  335,  337,  339,  343,  345,  348,  350,  354,  356,

      360,  362,  364,  371,  373,  382,  388,  390,  378,  392,
      395,  410,  407,  420,  414,  435,  437,  439,  441,  444,
      447,  450,  454,  456,  460,  462,  464,  466,  468,  471,
      475,  473,  480,  486,  495,  497,  501,  504,  506, 2992,
      510,  515,  520,  522,  524,  528,  531,  533,  541,  537,
      551,  553,  561,  566,  569,  571,  573,  575,  577,  581,
      587,  589,  591,  597,  601,  595,  603,  605,  610,  612,
      615,  619,  625,  629,  631,  635,  637,  641,  644,  650,
      652,  663,  667,  670,  673,  675,  678,  684,  686,  688,
      690,  692,  743,  696,  703,  698,  710,  712,  758,  716,

      700,  718,  721,  728,  723,  761,  732,  777,  781,  788,
      794,  796,  735,  798,  802,  804,  800,  740,  806,  808,
      810,  812,  860,  817,  819,  814,  822,  830,  824,  827,
      832,  843,  852,  862,  866,  874,  836,  882,  884,  891,
      895,  898,  900,  904,  906,  908,  910,  913,  915,  919,
      928,  921,  941,  924,  927,  933,  950,  952,  954,  957,
      959,  962,  964,  968,  970,  973,  975,  977,  980,  985,
      987,  989,  991,  993, 1000, 1004, 1009, 1011, 1017, 1019,
     1030, 1035, 1040, 1042, 1044, 1046, 1050, 1052, 1056, 1054,
     1058, 1060, 1068, 1062, 1072, 1074, 1076, 1078, 1080, 1082,

     1088, 1085, 1094, 1117, 1122, 1112, 1124, 1126, 1128, 1132,
     1135, 1140, 1142, 1144, 1149, 1152, 1158, 1161, 1166, 1169,
     1172, 1174, 1181, 1178, 1183, 1189, 1194, 1198, 1200, 1203,
     1209, 1211, 1213, 1215, 1222, 1218, 1224, 1226, 1231, 1233,
     1235, 1237, 1239, 1248, 1250, 1254, 1257, 1259, 1261, 1263,
     1268, 1270, 1275, 1281, 1284, 1287, 1290, 1294, 1292, 1301,
     1305, 1308, 1312, 1316, 1324, 1321, 1326, 1331, 1333, 1336,
     1338, 1342, 1346, 1349, 1356, 1358, 1361, 1366, 1363, 1369,
     1372, 1378, 1381, 1383, 1385, 1390, 1392, 1398, 1400, 1402,
     1404, 1414, 1430, 1416, 1432, 1423, 1419, 1427, 1435, 1442,

     1458, 1467, 1465, 1473, 1475, 1478, 1480, 1483, 1485, 1487,
     1489, 1497, 1499, 1501, 1503, 1505, 1514, 1516, 1518, 1521,
     1523, 1529, 1531, 1533, 1536, 1542, 1544, 1554, 1547, 1556,
     1561, 1558, 1563, 1565, 1567, 1572, 1574, 1594, 1576, 1587,
     1589, 1596, 1608, 1602, 1591, 1612, 1614, 1616, 1623, 1626,
     1631, 1633, 1635, 1637, 1643, 1649, 1653, 1655, 1659, 1663,
     1667, 1670, 1677, 1680, 1682, 1684, 1686, 1691, 1696, 1702,
     1704, 1707, 1710, 1712, 1714, 1718, 1722, 1726, 1728, 1732,
     1736, 1744, 1746, 1748, 1750, 1756, 1752, 1758, 1761, 1764,
     1768, 1772, 1776, 1782, 1784, 1786, 1790, 1792, 1795, 1799,

     1801, 1809, 1811, 1813, 1815, 1819, 1821, 1826, 1828, 1836,
     1838, 1844, 1848, 1851, 1855, 1858, 1861, 1868, 1870, 1872,
     1879, 1881, 1883, 1885, 1887, 1889, 1891, 1894, 1899, 1909,
     1911, 1913, 1916, 1919, 1921, 1927, 1939, 1941, 1943, 1945,
     1952, 1954, 1959, 1961, 1963, 1969, 1971, 1973, 1979, 1982,
     1984, 1987, 1991, 1994, 1996, 2002, 2004, 2006, 2012, 2014,
     2016, 2018, 2023, 2025, 2027, 2034, 2030, 2040, 2042, 2046,
     2050, 2052, 2055, 2060, 2063, 2065, 2070, 2078, 2082, 2085,
     2090, 2092, 2098, 2100, 2103, 2106, 2108, 2110, 2112, 2114,
     2116, 2119, 2121, 2123, 2125, 2128, 2134, 2139, 2132, 2147,

     2158, 2164, 2168, 2171, 2175, 2178, 2180, 2183, 2185, 2187,
     2189, 2191, 2196, 2198, 2200, 2204, 2211, 2214, 2219, 2222,
     2225, 2227, 2234, 2243, 2236, 2246, 2253, 2262, 2264, 2266,
     2270, 2272, 2274, 2276, 2280, 2284, 2289, 2291, 2293, 2297,
     2302, 2307, 2309, 2312, 2316, 2320, 2326, 2328, 2333, 2330,
     2335, 2341, 2339, 2345, 2353, 2356, 2359, 2361, 2363, 2365,
     2367, 2373, 2370, 2375, 2377, 2380, 2383, 2390, 2393, 2397,
     2400, 2402, 2407, 2413, 2415, 2425, 2430, 2432, 2434, 2438,
     2436, 2441, 2449, 2455, 2457, 2459, 2461, 2466, 2468, 2470,
     2475, 2477, 2479, 2489, 2491, 2493, 2497, 2499, 2503, 2505,

     2510, 2514, 2516, 2519, 2525, 2527, 2529, 2533, 2535, 2541,
     2543, 2545, 2547, 2559, 2561, 2563, 2569, 2573, 2553, 2575,
     2580, 2585, 2590, 2593, 2595, 2599, 2602, 2610, 2612, 2614,
     2616, 2620, 2622, 2629, 2626, 2631, 2641, 2633, 2637, 2645,
     2649, 2652, 2657, 2662, 2666, 2668, 2670, 2674, 2678, 2685,
     2687, 2689, 2693, 2698, 2700, 2704, 2702, 2710, 2706, 2722,
     2716, 2724, 2726, 2738, 2728, 2733, 2736, 2740, 2742, 2752,
     2758, 2761, 2763, 2765, 2768, 2770, 2772, 2774, 2776, 2778,
     2782, 2784, 2791, 2797, 2799, 2801, 2806, 2808, 2814, 2816,
     2848, 2819, 2824, 2826, 2833, 2839, 2830, 2841, 2850, 2856,

     2863, 2880, 2873, 2882, 2888, 2890, 2895, 2992, 2938, 2945,
     2950, 2959, 2968, 2973, 2975, 2982
    } ;

static const flex_int16_t yy_def[817] =
    {   0,
      808,    1,  808,  808,  808,  808,  808,  809,  809,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  811,  810,  810,  810,
      810,  808,  812,  813,  814,  809,  815,  816,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  811,
      810,  810,  810,  810,  812,  812,  813,  814,  808,  816,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  808,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      193,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,    0,  808,  808,
      808,  808,  808,  808,  808,  808
    } ;

static const flex_int16_t yy_nxt[3058] =
    {   0,
        4,    5,    6,    5,    4,    4,    4,    7,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   16,   17,   18,   19,   20,
       16,   21,   22,   23,   24,   16,   25,   26,   16,   27,
       16,   16,   28,   16,   16,   29,   16,   16,   16,   16,
       16,   16,   16,   16,   30,   16,   16,   16,   31,   16,
       16,   16,   16,   16,   16,   32,   33,   32,   35,   34,
       35,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   32,  140,   32,   38,   38,   86,   38,   38,   38,
       38,   38,   38,   89,   86,   38,   38,   89,   38,   38,

       52,   38,   38,   38,   38,   38,   38,   38,   38,   40,
       35,   38,   38,   38,   38,   89,   41,   42,   43,   89,
       46,   44,   52,   47,   37,   51,  808,   45,   49,   48,
       53,   55,   50,   56,   78,   54,   59,  808,   66,   62,
       63,   57,   67,  808,   60,  808,   58,  808,   64,   38,
       38,   38,   38,   65,  808,   61,   38,   38,   79,   81,
       38,   38,   38,   38,   52,  808,  808,   38,   38,   38,
       38,  808,   38,   38,   38,   38,   68,   38,   38,   38,
       38,   38,   38,   75,   69,  808,   52,   75,   38,   38,
      808,   70,   38,   38,   71,   76,   82,   83,   72,   84,

       73,  808,   74,   38,   38,   91,  808,   75,   93,   38,
       38,   75,   77,   94,   38,   38,   38,   38,   92,   38,
       38,  808,   38,   38,   97,   96,   38,   38,   95,   38,
       38,   38,   38,   98,   38,   38,  808,   99,  105,   38,
       38,   38,   38,  808,   38,   38,   38,   38,  808,  102,
       38,   38,  100,   38,   38,  101,  808,  104,   38,   38,
      808,  105,  103,  107,  106,   38,   38,  108,   38,   38,
      808,  111,  110,  808,   38,   38,   38,   38,  109,  808,
      112,   38,   38,   38,   38,   38,   38,  808,  115,  117,
      116,  808,  113,  124,   38,   38,  114,  118,   38,   38,

      808,  121,  808,  119,   38,   38,   38,   38,   38,   38,
      120,  808,  122,   38,   38,  808,  126,   38,   38,  808,
      123,  808,  125,  808,  128,   38,   38,   38,   38,   38,
       38,  127,  808,  130,  131,  129,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  808,  133,   38,   38,
       38,   38,  135,   38,   38,   38,   38,  808,  131,   38,
       38,   38,   38,  132,  134,   38,   38,   38,   38,   38,
       38,  136,  808,  139,  808,  137,   38,   38,   38,   38,
      808,  138,  142,   38,   38,  143,  145,   38,   38,  141,
      808,  144,  808,   38,   38,   38,   38,   38,   38,  146,

       38,   38,  147,  148,  149,  808,  155,  152,  157,  158,
      159,  153,   38,   38,  150,   38,   38,  808,  151,   38,
       38,  160,  161,  808,  162,   38,   38,  808,  154,  808,
      155,  808,  156,  167,  163,  166,  164,  171,  169,  165,
       38,   38,   38,   38,   38,   38,   38,   38,  170,   38,
       38,  168,   38,   38,  808,   38,   38,  808,  172,   38,
       38,   38,   38,  173,  808,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  181,   38,   38,   38,   38,
       38,   38,  808,  176,  808,   38,   38,  186,  177,  808,
      175,   38,   38,  189,  808,  174,  179,  188,  808,  178,

       38,   38,   38,   38,  808,  183,   38,   38,  185,   38,
       38,   38,   38,  180,  182,   38,   38,  808,  184,  188,
       38,   38,  808,  187,  191,   38,   38,   38,   38,   38,
       38,  190,  808,   38,   38,  808,   38,   38,   38,   38,
      808,  195,   38,   38,  192,  808,   38,   38,  808,  193,
      203,  194,  808,  197,  198,  199,   38,   38,   38,   38,
      808,  196,  204,  808,  200,  201,   38,   38,  202,  207,
      209,   38,   38,  808,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  208,  205,   38,   38,  808,  206,
      808,  213,   38,   38,   38,   38,   38,   38,  808,  214,

       38,   38,   38,   38,  808,  211,   38,   38,   38,   38,
       38,   38,  210,  213,  808,   38,   38,   38,   38,  216,
       38,   38,  808,  212,   38,   38,  215,  219,  222,  217,
       38,   38,  808,  220,   38,   38,   38,   38,  808,  218,
       38,   38,   38,   38,  808,  224,   38,   38,  808,   38,
       38,  225,  808,  221,  808,   38,   38,   38,   38,  223,
      228,  226,  227,  229,  808,  231,  808,  230,   38,   38,
      808,  233,   38,   38,  808,   38,   38,  232,   38,   38,
       38,   38,  234,   38,   38,  808,  239,  235,  237,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  236,

      238,   38,   38,   38,   38,   38,   38,  808,   38,   38,
      808,  241,  808,  240,  242,   38,   38,   38,   38,  808,
      245,   38,   38,   38,   38,  244,   38,   38,   38,   38,
      263,  808,  243,   38,   38,  808,  249,   38,   38,  246,
       38,   38,  248,  808,  252,   38,   38,  247,   38,   38,
      808,  250,  251,  250,  250,  250,  250,  250,  250,  250,
      250,  253,  254,   38,   38,  808,   38,   38,  262,  255,
      808,  267,  808,  265,  264,  808,  256,  257,  266,  268,
      283,  258,   38,   38,  808,  272,   38,   38,  259,  808,
      260,  269,  261,   38,   38,  808,  273,  270,  271,   38,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  808,   38,   38,   38,   38,  808,   38,   38,   38,
       38,  274,   38,   38,  808,   38,   38,   38,   38,  808,
      281,   38,   38,  282,  277,  275,  808,  284,   38,   38,
      276,  278,  279,  297,  286,  808,  280,   38,   38,  310,
      287,  808,  299,  808,  285,   38,   38,   38,   38,  298,
      300,   38,   38,  808,  302,  808,  305,  303,  288,   38,
       38,  289,  290,  291,  301,  808,  304,   38,   38,   38,
       38,  292,  293,  294,  295,  307,   38,   38,  808,  308,

       38,   38,  306,   38,   38,   38,   38,  309,  296,   38,
       38,   38,   38,   38,   38,   38,   38,  808,   38,   38,
       38,   38,  808,  314,   38,   38,   38,   38,  312,   38,
       38,  315,   38,   38,  808,  313,  321,  250,   38,   38,
      311,  808,   39,   39,   39,   39,   38,   38,  317,  808,
      316,  324,  325,  326,  318,   38,   38,   38,   38,   38,
       38,  319,   38,   38,   38,   38,  320,   38,   38,   38,
       38,  323,  327,   38,   38,   38,   38,  322,   38,   38,
       38,   38,   38,   38,  328,   38,   38,  808,  336,  329,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,

      330,  333,  808,  334,  808,   38,   38,  808,  332,   38,
       38,  331,  808,  338,   38,   38,   38,   38,  250,  808,
      335,  808,   38,   38,   38,   38,  347,  339,  808,  341,
      337,  808,  343,  340,  332,   38,   38,  345,  808,  344,
       38,   38,  808,  342,  346,   38,   38,   38,   38,   38,
       38,   38,   38,  808,  349,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  348,
      350,  352,  808,   38,   38,  808,  351,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  356,
       38,   38,  354,   38,   38,  808,  353,  808,  362,   38,

       38,  808,  355,  358,  360,  808,  361,  363,  365,  808,
      359,  808,  357,  364,  808,  374,  366,   38,   38,  367,
      372,  808,   38,   38,  370,  808,  369,   38,   38,   38,
       38,   38,   38,   38,   38,  368,  371,   38,   38,  373,
       38,   38,  808,  375,  377,   38,   38,   38,   38,   38,
       38,  808,  376,  386,   38,   38,  808,   38,   38,  808,
      379,  808,  378,   38,   38,  808,   38,   38,  380,  808,
      382,   38,   38,  381,   38,   38,  383,   38,   38,   38,
       38,  808,  384,   38,   38,  385,   38,   38,   38,   38,
      808,  390,  391,  397,   38,   38,  808,  389,  388,   38,

       38,  808,  387,   38,   38,   38,   38,  398,   38,   38,
      392,  393,  396,  395,   38,   38,   38,   38,   38,   38,
       38,   38,  394,   38,   38,  399,  808,   38,   38,   38,
       38,   38,   38,  401,  401,  401,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  402,  403,  808,  400,
      406,  408,  409,   38,   38,   38,   38,  808,  250,   38,
       38,  404,   38,   38,   38,   38,   38,   38,   38,   38,
      808,  407,  405,   38,   38,   38,   38,  282,  410,  411,
       38,   38,  416,  282,  808,  413,   38,   38,  414,   38,
       38,  412,   38,   38,  808,   38,   38,   38,   38,   38,

       38,  808,  415,  418,  808,  250,   38,   38,  808,  417,
       38,   38,  808,   38,   38,  808,  419,   38,   38,  282,
      420,   38,   38,  423,  808,  421,   38,   38,  422,   38,
       38,   38,   38,  282,  424,  425,   38,   38,   38,   38,
      808,   38,   38,   38,   38,  429,  427,   38,   38,  808,
      426,   38,   38,  808,   38,   38,  808,  428,  430,  808,
      388,   38,   38,   38,   38,  433,   38,   38,   38,   38,
      434,   38,   38,  431,   38,   38,  432,   38,   38,  282,
      436,  808,  437,   38,   38,  435,   38,   38,   38,   38,
       38,   38,  438,  440,  808,   38,   38,   38,   38,  439,

      441,  808,  442,   38,   38,   38,   38,   38,   38,   38,
       38,  808,  447,  808,  443,  446,  808,  444,  448,   38,
       38,   38,   38,  808,   38,   38,  808,  445,   38,   38,
      808,  451,   38,   38,  808,   38,   38,   38,   38,  450,
       38,   38,  455,  454,  808,  449,  452,   38,   38,  808,
      453,  808,  457,  458,  808,  465,  808,  250,  459,  464,
      456,  460,  461,   38,   38,  467,  466,  462,  463,  468,
       38,   38,   38,   38,  469,  332,  332,  332,   38,   38,
       38,   38,  808,   38,   38,   38,   38,  808,   38,   38,
       38,   38,   38,   38,   38,   38,  808,  332,  332,  332,

      808,  470,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,  808,  475,  808,  250,  476,  471,  473,   38,
       38,   38,   38,   38,   38,  477,   38,   38,   38,   38,
      474,  478,  808,  472,   38,   38,   38,   38,   38,   38,
      808,   38,   38,  808,  483,  481,  250,   38,   38,   38,
       38,  485,   38,   38,  482,  479,  808,  480,  250,   38,
       38,   38,   38,   38,   38,  282,   38,   38,   38,   38,
       38,   38,   38,   38,  808,  487,  484,   38,   38,   38,
       38,   38,   38,  250,  488,  808,  489,  808,  492,  490,
      808,  486,   38,   38,   38,   38,   38,   38,  491,   38,

       38,   38,   38,  808,  495,  496,  493,   38,   38,  494,
      808,  388,  499,   38,   38,  500,  501,   38,   38,   38,
       38,   38,   38,  497,  808,  502,  808,  503,   38,   38,
      401,   38,   38,  498,  504,  508,   38,   38,   38,   38,
       38,   38,   38,   38,  808,  401,  808,  505,   38,   38,
      808,  506,  401,  514,   38,   38,  507,  510,   38,   38,
       38,   38,  808,  509,   38,   38,  511,  512,   38,   38,
      808,  517,   38,   38,  513,   38,   38,  518,  808,  332,
      808,  250,   38,   38,  808,   38,   38,   38,   38,   38,
       38,   38,   38,  516,  515,  520,   38,   38,  808,  522,

      526,   38,   38,  523,  808,  519,  527,   38,   38,   38,
       38,  524,   38,   38,  521,   38,   38,   38,   38,   38,
       38,  808,  528,   38,   38,  808,  525,   38,   38,  535,
      808,   38,   38,   38,   38,  531,  532,   38,   38,  808,
      529,   38,   38,  808,  530,  808,  533,  534,  541,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  538,
      539,   38,   38,   38,   38,  537,   38,   38,  536,   38,
       38,  808,  542,   38,   38,  808,  543,   38,   38,  808,
      540,   38,   38,  808,  548,  545,  546,   38,   38,   38,
       38,   38,   38,  808,  544,   38,   38,   38,   38,  808,

       38,   38,  550,  547,   38,   38,   38,   38,  549,  808,
      553,  282,  808,  551,   38,   38,   38,   38,   38,   38,
       38,   38,  554,  552,   38,   38,   38,   38,  388,  555,
      388,   38,   38,   38,   38,  808,  558,  808,  566,  808,
      556,   38,   38,   38,   38,  557,  559,  560,  808,   38,
       38,  808,  561,   38,   38,  568,   38,   38,  808,  565,
       38,   38,  562,   38,   38,  563,   38,   38,  808,  564,
      808,  567,  569,   38,   38,   38,   38,   38,   38,  808,
      570,  808,  571,  572,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,  808,   38,

       38,  808,  576,  574,   38,   38,  573,  808,  578,  808,
      579,  575,  808,  577,   38,   38,   38,   38,   38,   38,
      580,   38,   38,  808,   38,   38,   38,   38,  808,  585,
      250,  581,   38,   38,  808,  584,  587,  808,  582,  588,
      583,  592,  808,  586,   38,   38,   38,   38,   38,   38,
       38,   38,  808,  597,  598,  808,  591,   38,   38,   38,
       38,  808,  589,  590,   38,   38,   38,   38,   38,   38,
      808,  594,  808,  593,   38,   38,   38,   38,   38,   38,
      808,  600,  808,  596,   38,   38,  595,   38,   38,   38,
       38,  808,   38,   38,  808,  401,   38,   38,  808,   38,

       38,   38,   38,  808,  599,  601,  808,   38,   38,   38,
       38,   38,   38,  602,  604,  808,  282,   38,   38,   38,
       38,   38,   38,   38,   38,  808,  605,  603,   38,   38,
       38,   38,   38,   38,  607,   38,   38,  606,  388,   38,
       38,  611,  808,  608,  609,   38,   38,   38,   38,  610,
      612,   38,   38,  614,  613,   38,   38,   38,   38,  615,
       38,   38,  282,  808,  616,   38,   38,  618,   38,   38,
       38,   38,  625,  808,  621,   38,   38,  401,  619,  617,
      627,  808,  620,   38,   38,  808,  630,   38,   38,  626,
       38,   38,  808,  622,  623,   38,   38,   38,   38,  628,

      629,  808,  624,   38,   38,   38,   38,  401,   38,   38,
      631,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  633,   38,   38,   38,   38,   38,   38,
       38,   38,  250,   38,   38,  250,  632,   38,   38,   38,
       38,  250,  332,  332,   38,   38,  808,  332,  332,  636,
      808,  635,   38,   38,  808,  250,  808,  282,  634,  808,
      639,  641,  638,   38,   38,  808,  637,  808,  282,   38,
       38,  640,  645,   38,   38,  808,   38,   38,  644,  642,
       38,   38,  643,   38,   38,   38,   38,  808,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,  808,  646,

      808,   38,   38,   38,   38,   38,   38,  808,  250,   38,
       38,  808,  648,  808,  647,  282,   38,   38,  649,   38,
       38,  808,  650,  651,   38,   38,  808,   38,   38,  388,
       38,   38,   38,   38,  388,  652,  654,  808,  388,   38,
       38,   38,   38,  662,  653,  656,  655,  808,   38,   38,
      808,   38,   38,  663,  808,  658,  659,  808,   38,   38,
      808,  657,  661,  666,  282,  282,  282,   38,   38,   38,
       38,   38,   38,  660,  808,   38,   38,   38,   38,   38,
       38,   38,   38,  664,  670,   38,   38,  808,  667,   38,
       38,  808,  665,  668,   38,   38,   38,   38,   38,   38,

      808,  669,   38,   38,  808,  671,  808,   38,   38,  808,
      672,  673,   38,   38,   38,   38,  674,   38,   38,  808,
      676,   38,   38,  808,  675,   38,   38,  808,  677,  808,
      250,   38,   38,   38,   38,   38,   38,  681,   38,   38,
       38,   38,  678,  682,   38,   38,   38,   38,  679,  680,
       38,   38,  808,  684,  808,  683,  332,  685,   38,   38,
      686,   38,   38,  808,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  687,   38,   38,  282,   38,   38,
       38,   38,   38,   38,  688,   38,   38,  808,   38,   38,
      808,  388,  689,  690,  691,   38,   38,  692,   38,   38,

      808,  388,   38,   38,  808,   38,   38,   38,   38,  808,
      699,  808,   38,   38,  808,  693,  694,  695,   38,   38,
       38,   38,  696,  702,  401,  698,  700,  808,  697,  808,
       38,   38,  808,  701,  282,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  282,   38,   38,  808,  703,
      704,  808,  282,  708,   38,   38,  705,  706,  710,  250,
       38,   38,   38,   38,   38,   38,   38,   38,  808,  707,
      808,   38,   38,   38,   38,   38,   38,  711,  808,  709,
       38,   38,   38,   38,   38,   38,  808,  718,  250,  713,
      808,  712,  332,  808,   38,   38,   38,   38,   38,   38,

      715,  716,   38,   38,   38,   38,  808,  714,   38,   38,
       38,   38,  808,  332,  717,   38,   38,  808,  719,   38,
       38,   38,   38,  808,   38,   38,  808,  388,  808,  720,
       38,   38,   38,   38,   38,   38,  721,  722,   38,   38,
       38,   38,  808,  723,  808,  726,   38,   38,   38,   38,
       38,   38,   38,   38,  808,  728,  729,  724,   38,   38,
      725,  808,  727,  282,   38,   38,   38,   38,   38,   38,
      808,  282,  808,  732,   38,   38,  808,  731,   38,   38,
       38,   38,  808,  730,  808,   38,   38,  808,  733,  250,
       38,   38,  808,  735,  734,   38,   38,  736,   38,   38,

       38,   38,  808,  282,   38,   38,  741,   38,   38,  739,
      808,  737,  808,  738,  808,   38,   38,   38,   38,   38,
       38,   38,   38,  740,  695,   38,   38,   38,   38,  808,
      743,   38,   38,  695,   38,   38,   38,   38,   38,   38,
      808,  744,   38,   38,  282,  742,   38,   38,  808,  745,
       38,   38,  808,  748,   38,   38,  750,   38,   38,  746,
      747,  749,   38,   38,  754,  808,  755,   38,   38,  808,
      250,   38,   38,   38,   38,   38,   38,  751,  752,   38,
       38,  753,  808,   38,   38,  250,  808,  756,  808,  757,
       38,   38,   38,   38,   38,   38,  695,  762,   38,   38,

      808,  758,  759,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  695,  282,   38,   38,  808,  388,  388,
      388,   38,   38,  282,  761,  808,  760,   38,   38,   38,
       38,   38,   38,   38,   38,  763,  250,  768,   38,   38,
      764,   38,   38,   38,   38,   38,   38,   38,   38,  808,
      765,  766,  808,  767,  769,  808,  770,   38,   38,  773,
      282,  774,  771,   38,   38,  808,   38,   38,   38,   38,
       38,   38,  772,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  779,  775,   38,   38,   38,
       38,  808,  776,  778,  808,  777,   38,   38,  789,  808,

      780,  782,   38,   38,   38,   38,   38,   38,  785,  808,
      781,   38,   38,   38,   38,  784,  783,  808,  790,   38,
       38,   38,   38,  808,   38,   38,  786,  808,  787,   38,
       38,   38,   38,  788,  808,   38,   38,  793,   38,   38,
      791,  250,  808,  795,   38,   38,   38,   38,  796,  808,
      792,  794,  808,   38,   38,   38,   38,  799,  799,  799,
      799,   38,   38,  808,  797,  808,  798,  799,   38,   38,
      801,  799,  803,  282,  799,  800,  808,  282,   38,   38,
      808,  804,  808,  282,  802,   38,   38,   38,   38,  799,
      799,  799,  799,   38,   38,   38,   38,  808,  805,  799,

       38,   38,  808,  799,  808,  808,  799,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  282,  808,  808,
      332,  808,  808,  806,  808,  808,  808,  808,  808,  808,
      808,  808,  282,  808,  808,  808,  808,  808,  808,  282,
      807,   36,   36,  808,  808,  808,   36,   39,   39,   39,
       39,   39,   39,   39,   80,   80,   80,   80,   80,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   87,  808,
       87,   87,   87,   87,   87,   87,   87,   88,  808,   88,
       90,   90,  808,   90,   38,   38,   38,   38,   38,   38,
       38,    3,  808,  808,  808,  808,  808,  808,  808,  808,

      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808
    } ;

static const flex_int16_t yy_chk[3058] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    7,    5,    8,    7,
        9,   10,   10,   11,   11,   12,   12,   16,   16,   14,
       14,   32,   86,   32,   17,   17,   85,   15,   15,   13,
       13,   20,   20,   35,   33,   25,   25,   88,   18,   18,

       15,   19,   19,   22,   22,   21,   21,   26,   26,   10,
       36,   28,   28,   39,   39,   35,   10,   10,   11,   88,
       12,   11,   15,   12,    8,   14,    9,   11,   13,   12,
       15,   17,   13,   18,   25,   15,   19,    3,   22,   20,
       21,   18,   22,    0,   19,    0,   18,    0,   21,   23,
       23,   29,   29,   21,    0,   19,   24,   24,   26,   28,
       31,   31,   30,   30,   29,    0,   36,   40,   40,   41,
       41,    0,   42,   42,   43,   43,   23,   44,   44,   45,
       45,   46,   46,   24,   23,    0,   29,   31,   47,   47,
        0,   23,   48,   48,   23,   24,   29,   30,   23,   31,

       23,    0,   23,   49,   49,   40,    0,   24,   42,   50,
       50,   31,   24,   43,   51,   51,   52,   52,   41,   53,
       53,    0,   54,   54,   46,   45,   56,   56,   44,   55,
       55,   57,   57,   47,   58,   58,    0,   48,   52,   59,
       59,   60,   60,    0,   61,   61,   62,   62,    0,   50,
       63,   63,   49,   64,   64,   49,    0,   51,   65,   65,
        0,   52,   50,   54,   53,   66,   66,   55,   67,   67,
        0,   58,   57,    0,   68,   68,   69,   69,   56,    0,
       59,   70,   70,   71,   71,   72,   72,    0,   60,   61,
       60,    0,   59,   68,   74,   74,   59,   62,   73,   73,

        0,   65,    0,   63,   75,   75,   76,   76,   77,   77,
       64,    0,   66,   78,   78,    0,   70,   79,   79,    0,
       67,    0,   69,    0,   72,   81,   81,   82,   82,   83,
       83,   71,    0,   74,   75,   73,   84,   84,   91,   91,
       92,   92,   93,   93,   94,   94,    0,   77,   95,   95,
       96,   96,   79,   97,   97,   98,   98,    0,   75,   99,
       99,  100,  100,   76,   78,  101,  101,  102,  102,  103,
      103,   81,    0,   84,    0,   82,  104,  104,  105,  105,
        0,   83,   92,  109,  109,   93,   95,  106,  106,   91,
        0,   94,    0,  107,  107,  108,  108,  110,  110,   96,

      111,  111,   97,   98,   99,    0,  105,  102,  107,  107,
      107,  103,  113,  113,  100,  112,  112,    0,  101,  115,
      115,  107,  107,    0,  107,  114,  114,    0,  104,    0,
      105,    0,  106,  112,  108,  111,  109,  115,  114,  110,
      116,  116,  117,  117,  118,  118,  119,  119,  114,  120,
      120,  113,  121,  121,    0,  122,  122,    0,  116,  123,
      123,  124,  124,  116,    0,  125,  125,  126,  126,  127,
      127,  128,  128,  129,  129,  124,  130,  130,  132,  132,
      131,  131,    0,  119,    0,  133,  133,  129,  120,    0,
      118,  134,  134,  132,    0,  117,  122,  131,    0,  121,

      135,  135,  136,  136,    0,  126,  137,  137,  128,  138,
      138,  139,  139,  123,  125,  141,  141,    0,  127,  131,
      142,  142,    0,  130,  133,  143,  143,  144,  144,  145,
      145,  132,    0,  146,  146,    0,  147,  147,  148,  148,
        0,  137,  150,  150,  134,    0,  149,  149,    0,  135,
      146,  136,    0,  139,  141,  142,  151,  151,  152,  152,
        0,  138,  147,    0,  143,  144,  153,  153,  145,  149,
      151,  154,  154,    0,  155,  155,  156,  156,  157,  157,
      158,  158,  159,  159,  150,  147,  160,  160,    0,  148,
        0,  155,  161,  161,  162,  162,  163,  163,    0,  156,

      166,  166,  164,  164,    0,  153,  165,  165,  167,  167,
      168,  168,  152,  155,    0,  169,  169,  170,  170,  158,
      171,  171,    0,  154,  172,  172,  157,  161,  164,  159,
      173,  173,    0,  162,  174,  174,  175,  175,    0,  160,
      176,  176,  177,  177,    0,  166,  178,  178,    0,  179,
      179,  167,    0,  163,    0,  180,  180,  181,  181,  165,
      170,  168,  169,  171,    0,  173,    0,  172,  182,  182,
        0,  175,  183,  183,    0,  184,  184,  174,  185,  185,
      186,  186,  176,  187,  187,    0,  181,  177,  179,  188,
      188,  189,  189,  190,  190,  191,  191,  192,  192,  178,

      180,  194,  194,  196,  196,  201,  201,    0,  195,  195,
        0,  183,    0,  182,  184,  197,  197,  198,  198,    0,
      187,  200,  200,  202,  202,  186,  203,  203,  205,  205,
      201,    0,  185,  204,  204,    0,  192,  207,  207,  189,
      213,  213,  191,    0,  194,  218,  218,  190,  193,  193,
        0,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  195,  197,  199,  199,    0,  206,  206,  200,  198,
        0,  205,    0,  203,  202,    0,  199,  199,  204,  206,
      218,  199,  208,  208,    0,  207,  209,  209,  199,    0,
      199,  206,  199,  210,  210,    0,  208,  206,  206,  211,

      211,  212,  212,  214,  214,  217,  217,  215,  215,  216,
      216,  219,  219,  220,  220,  221,  221,  222,  222,  226,
      226,    0,  224,  224,  225,  225,    0,  227,  227,  229,
      229,  209,  230,  230,    0,  228,  228,  231,  231,    0,
      217,  237,  237,  217,  212,  210,    0,  219,  232,  232,
      211,  214,  215,  224,  221,    0,  216,  233,  233,  237,
      222,    0,  226,    0,  220,  223,  223,  234,  234,  225,
      227,  235,  235,    0,  229,    0,  232,  230,  223,  236,
      236,  223,  223,  223,  228,    0,  231,  238,  238,  239,
      239,  223,  223,  223,  223,  234,  240,  240,    0,  235,

      241,  241,  233,  242,  242,  243,  243,  236,  223,  244,
      244,  245,  245,  246,  246,  247,  247,    0,  248,  248,
      249,  249,    0,  241,  250,  250,  252,  252,  239,  254,
      254,  242,  255,  255,    0,  240,  248,  251,  256,  256,
      238,    0,  251,  251,  251,  251,  253,  253,  244,    0,
      243,  253,  253,  253,  245,  257,  257,  258,  258,  259,
      259,  246,  260,  260,  261,  261,  247,  262,  262,  263,
      263,  252,  254,  264,  264,  265,  265,  249,  266,  266,
      267,  267,  268,  268,  255,  269,  269,    0,  264,  256,
      270,  270,  271,  271,  272,  272,  273,  273,  274,  274,

      257,  260,    0,  261,    0,  275,  275,    0,  259,  276,
      276,  258,    0,  266,  277,  277,  278,  278,  263,    0,
      262,    0,  279,  279,  280,  280,  276,  267,    0,  270,
      265,    0,  272,  268,  269,  281,  281,  274,    0,  273,
      282,  282,    0,  271,  275,  283,  283,  284,  284,  285,
      285,  286,  286,    0,  278,  287,  287,  288,  288,  290,
      290,  289,  289,  291,  291,  292,  292,  294,  294,  277,
      279,  281,    0,  293,  293,    0,  280,  295,  295,  296,
      296,  297,  297,  298,  298,  299,  299,  300,  300,  286,
      302,  302,  284,  301,  301,    0,  283,    0,  291,  303,

      303,    0,  285,  288,  289,    0,  290,  292,  293,    0,
      288,    0,  287,  292,    0,  301,  294,  306,  306,  295,
      299,    0,  304,  304,  297,    0,  296,  305,  305,  307,
      307,  308,  308,  309,  309,  295,  298,  310,  310,  300,
      311,  311,    0,  302,  304,  312,  312,  313,  313,  314,
      314,    0,  303,  311,  315,  315,    0,  316,  316,    0,
      306,    0,  305,  317,  317,    0,  318,  318,  307,    0,
      309,  319,  319,  308,  320,  320,  309,  321,  321,  322,
      322,    0,  309,  324,  324,  310,  323,  323,  325,  325,
        0,  315,  316,  322,  326,  326,    0,  314,  313,  327,

      327,    0,  312,  328,  328,  329,  329,  322,  330,  330,
      317,  318,  321,  320,  331,  331,  332,  332,  333,  333,
      334,  334,  319,  336,  336,  323,    0,  335,  335,  337,
      337,  338,  338,  328,  328,  328,  339,  339,  340,  340,
      341,  341,  342,  342,  343,  343,  329,  330,    0,  327,
      335,  337,  337,  344,  344,  345,  345,    0,  333,  346,
      346,  331,  347,  347,  348,  348,  349,  349,  350,  350,
        0,  336,  334,  351,  351,  352,  352,  339,  338,  340,
      353,  353,  346,  343,    0,  342,  354,  354,  344,  355,
      355,  341,  356,  356,    0,  357,  357,  359,  359,  358,

      358,    0,  345,  348,    0,  349,  360,  360,    0,  347,
      361,  361,    0,  362,  362,    0,  351,  363,  363,  350,
      352,  364,  364,  356,    0,  354,  366,  366,  355,  365,
      365,  367,  367,  353,  357,  358,  368,  368,  369,  369,
        0,  370,  370,  371,  371,  361,  360,  372,  372,    0,
      359,  373,  373,    0,  374,  374,    0,  360,  362,    0,
      363,  375,  375,  376,  376,  366,  377,  377,  379,  379,
      367,  378,  378,  364,  380,  380,  365,  381,  381,  369,
      370,    0,  371,  382,  382,  368,  383,  383,  384,  384,
      385,  385,  372,  374,    0,  386,  386,  387,  387,  373,

      375,    0,  376,  388,  388,  389,  389,  390,  390,  391,
      391,    0,  381,    0,  377,  380,    0,  378,  382,  392,
      392,  394,  394,    0,  397,  397,    0,  379,  396,  396,
        0,  385,  398,  398,    0,  393,  393,  395,  395,  384,
      399,  399,  390,  389,    0,  383,  386,  400,  400,    0,
      387,    0,  393,  393,    0,  395,    0,  392,  393,  394,
      391,  393,  393,  401,  401,  396,  395,  393,  393,  397,
      403,  403,  402,  402,  398,  402,  402,  402,  404,  404,
      405,  405,    0,  406,  406,  407,  407,    0,  408,  408,
      409,  409,  410,  410,  411,  411,    0,  411,  411,  411,

        0,  400,  412,  412,  413,  413,  414,  414,  415,  415,
      416,  416,    0,  408,    0,  404,  408,  403,  406,  417,
      417,  418,  418,  419,  419,  409,  420,  420,  421,  421,
      407,  410,    0,  405,  422,  422,  423,  423,  424,  424,
        0,  425,  425,    0,  418,  416,  415,  426,  426,  427,
      427,  421,  429,  429,  417,  412,    0,  413,  414,  428,
      428,  430,  430,  432,  432,  420,  431,  431,  433,  433,
      434,  434,  435,  435,    0,  423,  419,  436,  436,  437,
      437,  439,  439,  424,  425,    0,  426,    0,  429,  427,
        0,  422,  440,  440,  441,  441,  445,  445,  428,  438,

      438,  442,  442,    0,  432,  433,  430,  444,  444,  431,
        0,  435,  438,  443,  443,  438,  438,  446,  446,  447,
      447,  448,  448,  434,    0,  438,    0,  438,  449,  449,
      437,  450,  450,  436,  439,  445,  451,  451,  452,  452,
      453,  453,  454,  454,    0,  441,    0,  440,  455,  455,
        0,  443,  442,  451,  456,  456,  444,  447,  457,  457,
      458,  458,    0,  446,  459,  459,  448,  449,  460,  460,
        0,  456,  461,  461,  450,  462,  462,  456,    0,  452,
        0,  454,  463,  463,    0,  464,  464,  465,  465,  466,
      466,  467,  467,  455,  453,  458,  468,  468,    0,  459,

      463,  469,  469,  460,    0,  457,  464,  470,  470,  471,
      471,  461,  472,  472,  458,  473,  473,  474,  474,  475,
      475,    0,  465,  476,  476,    0,  462,  477,  477,  472,
        0,  478,  478,  479,  479,  468,  469,  480,  480,    0,
      466,  481,  481,    0,  467,    0,  470,  471,  478,  482,
      482,  483,  483,  484,  484,  485,  485,  487,  487,  475,
      476,  486,  486,  488,  488,  474,  489,  489,  473,  490,
      490,    0,  479,  491,  491,    0,  480,  492,  492,    0,
      477,  493,  493,    0,  486,  482,  483,  494,  494,  495,
      495,  496,  496,    0,  481,  497,  497,  498,  498,    0,

      499,  499,  488,  485,  500,  500,  501,  501,  487,    0,
      491,  484,    0,  489,  502,  502,  503,  503,  504,  504,
      505,  505,  492,  490,  506,  506,  507,  507,  495,  493,
      497,  508,  508,  509,  509,    0,  498,    0,  506,    0,
      494,  510,  510,  511,  511,  496,  499,  500,    0,  512,
      512,    0,  501,  513,  513,  508,  514,  514,    0,  505,
      515,  515,  502,  516,  516,  503,  517,  517,    0,  504,
        0,  507,  509,  518,  518,  519,  519,  520,  520,    0,
      510,    0,  511,  512,  521,  521,  522,  522,  523,  523,
      524,  524,  525,  525,  526,  526,  527,  527,    0,  528,

      528,    0,  516,  514,  529,  529,  513,    0,  518,    0,
      519,  515,    0,  517,  530,  530,  531,  531,  532,  532,
      520,  533,  533,    0,  534,  534,  535,  535,    0,  526,
      524,  521,  536,  536,    0,  525,  528,    0,  522,  529,
      523,  534,    0,  527,  537,  537,  538,  538,  539,  539,
      540,  540,    0,  540,  540,    0,  532,  541,  541,  542,
      542,    0,  530,  531,  543,  543,  544,  544,  545,  545,
        0,  536,    0,  535,  546,  546,  547,  547,  548,  548,
        0,  543,    0,  539,  549,  549,  538,  550,  550,  551,
      551,    0,  552,  552,    0,  537,  553,  553,    0,  554,

      554,  555,  555,    0,  541,  544,    0,  556,  556,  557,
      557,  558,  558,  545,  547,    0,  542,  559,  559,  560,
      560,  561,  561,  562,  562,    0,  548,  546,  563,  563,
      564,  564,  565,  565,  550,  567,  567,  549,  554,  566,
      566,  555,    0,  551,  552,  568,  568,  569,  569,  553,
      556,  570,  570,  559,  557,  571,  571,  572,  572,  560,
      573,  573,  558,    0,  561,  574,  574,  563,  575,  575,
      576,  576,  571,    0,  567,  577,  577,  565,  564,  562,
      572,    0,  566,  578,  578,    0,  576,  579,  579,  571,
      580,  580,    0,  568,  569,  581,  581,  582,  582,  573,

      574,    0,  570,  583,  583,  584,  584,  575,  585,  585,
      577,  586,  586,  587,  587,  588,  588,  589,  589,  590,
      590,  591,  591,  579,  592,  592,  593,  593,  594,  594,
      595,  595,  581,  596,  596,  580,  578,  599,  599,  597,
      597,  582,  597,  597,  598,  598,    0,  598,  598,  586,
        0,  585,  600,  600,    0,  583,    0,  590,  584,    0,
      591,  593,  588,  601,  601,    0,  587,    0,  589,  602,
      602,  592,  599,  603,  603,    0,  604,  604,  596,  594,
      605,  605,  595,  606,  606,  607,  607,    0,  608,  608,
      609,  609,  610,  610,  611,  611,  612,  612,    0,  600,

        0,  613,  613,  614,  614,  615,  615,    0,  602,  616,
      616,    0,  603,    0,  601,  604,  617,  617,  605,  618,
      618,    0,  606,  608,  619,  619,    0,  620,  620,  609,
      621,  621,  622,  622,  611,  610,  613,    0,  607,  623,
      623,  625,  625,  621,  612,  615,  614,    0,  624,  624,
        0,  626,  626,  621,    0,  617,  618,    0,  627,  627,
        0,  616,  620,  624,  626,  626,  626,  628,  628,  629,
      629,  630,  630,  619,    0,  631,  631,  632,  632,  633,
      633,  634,  634,  622,  628,  635,  635,    0,  625,  636,
      636,    0,  623,  627,  637,  637,  638,  638,  639,  639,

        0,  627,  640,  640,    0,  629,    0,  641,  641,    0,
      630,  631,  642,  642,  643,  643,  632,  644,  644,    0,
      634,  645,  645,    0,  633,  646,  646,    0,  636,    0,
      635,  647,  647,  648,  648,  650,  650,  640,  649,  649,
      651,  651,  637,  641,  653,  653,  652,  652,  638,  639,
      654,  654,    0,  643,    0,  642,  644,  645,  655,  655,
      646,  656,  656,    0,  657,  657,  658,  658,  659,  659,
      660,  660,  661,  661,  647,  663,  663,  649,  662,  662,
      664,  664,  665,  665,  648,  666,  666,    0,  667,  667,
        0,  653,  650,  651,  652,  668,  668,  655,  669,  669,

        0,  654,  670,  670,    0,  671,  671,  672,  672,    0,
      663,    0,  673,  673,    0,  656,  657,  658,  674,  674,
      675,  675,  659,  667,  661,  662,  664,    0,  660,    0,
      676,  676,    0,  666,  665,  677,  677,  678,  678,  679,
      679,  681,  681,  680,  680,  669,  682,  682,    0,  670,
      671,    0,  668,  676,  683,  683,  672,  673,  680,  675,
      684,  684,  685,  685,  686,  686,  687,  687,    0,  674,
        0,  688,  688,  689,  689,  690,  690,  681,    0,  679,
      691,  691,  692,  692,  693,  693,    0,  689,  678,  683,
        0,  682,  677,    0,  694,  694,  695,  695,  696,  696,

      686,  687,  697,  697,  698,  698,    0,  685,  699,  699,
      700,  700,    0,  684,  688,  701,  701,    0,  690,  702,
      702,  703,  703,    0,  704,  704,    0,  691,    0,  692,
      705,  705,  706,  706,  707,  707,  693,  694,  708,  708,
      709,  709,    0,  696,    0,  700,  710,  710,  711,  711,
      712,  712,  713,  713,    0,  702,  703,  698,  719,  719,
      699,    0,  701,  704,  714,  714,  715,  715,  716,  716,
        0,  706,    0,  708,  717,  717,    0,  707,  718,  718,
      720,  720,    0,  705,    0,  721,  721,    0,  709,  712,
      722,  722,    0,  711,  710,  723,  723,  713,  724,  724,

      725,  725,    0,  714,  726,  726,  719,  727,  727,  717,
        0,  715,    0,  716,    0,  728,  728,  729,  729,  730,
      730,  731,  731,  718,  721,  732,  732,  733,  733,    0,
      723,  735,  735,  720,  734,  734,  736,  736,  738,  738,
        0,  724,  739,  739,  725,  722,  737,  737,    0,  726,
      740,  740,    0,  729,  741,  741,  731,  742,  742,  727,
      728,  730,  743,  743,  736,    0,  738,  744,  744,    0,
      735,  745,  745,  746,  746,  747,  747,  732,  733,  748,
      748,  734,    0,  749,  749,  737,    0,  739,    0,  740,
      750,  750,  751,  751,  752,  752,  742,  749,  753,  753,

        0,  741,  744,  754,  754,  755,  755,  757,  757,  756,
      756,  759,  759,  743,  747,  758,  758,    0,  758,  758,
      758,  761,  761,  745,  748,    0,  746,  760,  760,  762,
      762,  763,  763,  765,  765,  750,  751,  756,  766,  766,
      752,  767,  767,  764,  764,  768,  768,  769,  769,    0,
      753,  754,    0,  755,  757,    0,  759,  770,  770,  763,
      761,  764,  760,  771,  771,    0,  772,  772,  773,  773,
      774,  774,  762,  775,  775,  776,  776,  777,  777,  778,
      778,  779,  779,  780,  780,  769,  765,  781,  781,  782,
      782,    0,  766,  768,    0,  767,  783,  783,  779,    0,

      770,  772,  784,  784,  785,  785,  786,  786,  775,    0,
      771,  787,  787,  788,  788,  774,  773,    0,  780,  789,
      789,  790,  790,    0,  792,  792,  776,    0,  777,  793,
      793,  794,  794,  778,    0,  797,  797,  784,  795,  795,
      781,  782,    0,  786,  796,  796,  798,  798,  787,    0,
      783,  785,    0,  791,  791,  799,  799,  791,  791,  791,
      791,  800,  800,    0,  788,    0,  789,  791,  801,  801,
      793,  791,  797,  790,  791,  792,    0,  795,  803,  803,
        0,  798,    0,  796,  794,  802,  802,  804,  804,  802,
      802,  802,  802,  805,  805,  806,  806,    0,  800,  802,

      807,  807,    0,  802,    0,    0,  802,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  803,    0,    0,
      801,    0,    0,  804,    0,    0,    0,    0,    0,    0,
        0,    0,  805,    0,    0,    0,    0,    0,    0,  807,
      806,  809,  809,    0,    0,    0,  809,  810,  810,  810,
      810,  810,  810,  810,  811,  811,  811,  811,  811,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  813,    0,
      813,  813,  813,  813,  813,  813,  813,  814,    0,  814,
      815,  815,    0,  815,  816,  816,  816,  816,  816,  816,
      816,  808,  808,  808,  808,  808,  808,  808,  808,  808,

      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808
    } ;

static const flex_int16_t yy_rule_linenum[19] =
    {   0,
       82,   83,   85,   86,   87,   88,   89,   90,   91,   96,
       97,  100,  105,  111,  117,  125,  130,  135
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"

#include <string>

#include "scanner.h"

/* import the parser's token type into a local typedef */
typedef example::Parser::token token;
typedef example::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1435 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 49 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1448 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1450 "scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 71 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


#line 74 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

#line 1654 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 809 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 808 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 19 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 19 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 20 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 82 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 85 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 86 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 89 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 90 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 91 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 97 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 100 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 105 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 111 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 117 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
/* gobble up white-spaces */
case 16:
YY_RULE_SETUP
#line 125 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 130 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->lines(yyleng); yylloc->step();
}
	YY_BREAK
/* pass all other characters up to bison */
case 18:
YY_RULE_SETUP
#line 135 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        return static_cast<token_type>(*yytext);
    }
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 19:
YY_RULE_SETUP
#line 141 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
ECHO;
	YY_BREAK
#line 1851 "scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Examplefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Examplefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Examplerealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Examplerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 809 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 809 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 808);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Examplealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Examplealloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Examplefree((void *) b->yy_ch_buf  );

	Examplefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Examplealloc(new_size  );

		else
			(yy_start_stack) = (int *) Examplerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Examplealloc (yy_size_t  size )
{
			return malloc(size);
}

void *Examplerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Examplefree (void * ptr )
{
			free( (char *) ptr );	/* see Examplerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 141 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


namespace example {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : ExampleFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int ExampleFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int ExampleFlexLexer::yywrap()
{
    return 1;
}

