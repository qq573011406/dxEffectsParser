#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ExampleFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc Examplealloc

    #define yyrealloc Examplerealloc

    #define yyfree Examplefree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *Examplealloc ( yy_size_t  );
void *Examplerealloc ( void *, yy_size_t  );
void Examplefree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[732] =
    {   0,
        0,    0,   20,   18,   16,   17,   18,   12,   12,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   16,    0,    2,   13,   12,    0,   15,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    0,    0,    2,   13,   13,   15,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    1,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   10,   14,   14,   14,   14,   14,   14,    3,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   11,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,    9,
        9,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,    9,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,    6,    7,    8,   14,
       14,   14,   14,   14,   14,    9,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    9,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    5,   14,    9,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,    9,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    4,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,    9,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    9,   14,    9,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   26,   26,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   26,   26,   39,
        1,    1,    1,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   26,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    8,
        6,    6,    6,    6,    6,    7,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    9,    6,    6
    } ;

static const flex_int16_t yy_base[740] =
    {   0,
        0,    0,  123, 2689,   64, 2689,   62,   62,   64,   66,
       68,   70,   83,   74,   88,   72,   78,   92,   94,   80,
       98,  107,  138,  105,  149,   96,    0,   86,  151,  157,
      154,  104,  115,    0,  127,  102,    0,    0,   76,  162,
      168,  170,  174,  109,  176,  178,  184,  194,   90,  197,
      202,  207,  209,  211,  214,  220,  225,  227,  230,  233,
      235,  237,  241,  244,  253,  255,  257,  259,  263,  269,
      272,  275,  282,  288,  291,  295,  304,    0,  301,  306,
      315,  318,   86,   80,    0,  164, 2689,    0,  320,  322,
      325,  327,  331,  333,  337,  341,  343,  348,  350,  352,

      356,  359,  361,  376,  378,  365,  372,  380,  398,  383,
      412,  402,  409,  388,  423,  428,  433,  430,  437,  439,
      442,  444,  446,  448,  450,  454,  457,  459,  461,  466,
      475,  479,  470,  483,  487, 2689,  492,  497,  502,  489,
      506,  508,  510,  513,  516,  525,  520,  537,  542,  546,
      548,  522,  550,  552,  554,  565,  559,  567,  577,  572,
      581,  579,  583,  586,  592,  595,  601,  604,  608,  610,
      590,  612,  614,  616,  618,  620,  627,  629,  636,  640,
      642,  648,  652,  658,  660,  707,  677,  669,  662,  674,
      671,  724,  680,  701,  682,  686,  691,  697,  688,  695,

      703,  693,  739,  743,  746,  749,  754,  756,  758,  760,
      762,  764,  766,  768,  816,  770,  773,  776,  778,  781,
      783,  791,  788,  807,  809,  812,  822,  824,  838,  826,
      846,  848,  860,  857,  862,  866,  868,  872,  874,  876,
      882,  878,  898,  881,  883,  895,  906,  910,  912,  914,
      916,  921,  926,  928,  932,  937,  941,  943,  945,  952,
      947,  954,  956,  958,  962,  968,  972,  976,  980,  982,
      992,  989,  995,  997, 1000, 1002, 1007, 1010, 1012, 1015,
     1017, 1019, 1021, 1023, 1028, 1031, 1033, 1038, 1043, 1050,
     1059, 1066, 1068, 1070, 1075, 1077, 1081, 1083, 1087, 1092,

     1089, 1094, 1096, 1098, 1100, 1103, 1108, 1111, 1115, 1117,
     1120, 1125, 1129, 1137, 1140, 1143, 1145, 1147, 1154, 1156,
     1158, 1160, 1162, 1168, 1173, 1170, 1179, 1181, 1183, 1185,
     1187, 1189, 1202, 1204, 1208, 1210, 1212, 1221, 1224, 1226,
     1235, 1229, 1237, 1244, 1246, 1251, 1253, 1255, 1258, 1262,
     1265, 1267, 1269, 1277, 1281, 1283, 1286, 1292, 1294, 1298,
     1303, 1305, 1311, 1313, 1317, 1321, 1323, 1325, 1327, 1329,
     1348, 1339, 1336, 1341, 1343, 1345, 1352, 1355, 1358, 1376,
     1368, 1382, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401,
     1403, 1407, 1409, 1414, 1411, 1418, 1422, 1429, 1424, 1438,

     1440, 1449, 1442, 1451, 1454, 1461, 1458, 1464, 1469, 1473,
     1476, 1480, 1482, 1490, 1496, 1500, 1505, 1507, 1509, 1512,
     1514, 1517, 1519, 1522, 1526, 1528, 1530, 1534, 1542, 1544,
     1548, 1552, 1560, 1563, 1568, 1565, 1570, 1572, 1577, 1581,
     1584, 1590, 1592, 1594, 1596, 1601, 1604, 1608, 1615, 1617,
     1624, 1626, 1630, 1628, 1632, 1634, 1636, 1638, 1646, 1648,
     1654, 1656, 1658, 1662, 1664, 1667, 1672, 1676, 1669, 1683,
     1685, 1687, 1692, 1698, 1700, 1708, 1710, 1718, 1704, 1720,
     1727, 1729, 1733, 1739, 1741, 1744, 1750, 1752, 1754, 1758,
     1760, 1762, 1766, 1770, 1764, 1768, 1781, 1777, 1787, 1783,

     1789, 1791, 1794, 1796, 1808, 1813, 1802, 1816, 1820, 1822,
     1826, 1831, 1833, 1836, 1838, 1843, 1845, 1849, 1854, 1856,
     1859, 1861, 1863, 1865, 1871, 1867, 1873, 1876, 1883, 1880,
     1889, 1893, 1896, 1902, 1904, 1911, 1908, 1916, 1923, 1926,
     1933, 1937, 1939, 1941, 1948, 1950, 1952, 1954, 1959, 1956,
     1962, 1964, 1967, 1970, 1973, 1977, 1980, 1983, 1986, 1988,
     1990, 1996, 1992, 1998, 2004, 2012, 2014, 2016, 2018, 2029,
     2036, 2038, 2040, 2046, 2048, 2050, 2057, 2059, 2061, 2065,
     2068, 2073, 2077, 2081, 2091, 2093, 2095, 2099, 2101, 2103,
     2105, 2107, 2116, 2118, 2121, 2123, 2125, 2128, 2133, 2135,

     2139, 2143, 2148, 2151, 2158, 2164, 2168, 2170, 2173, 2179,
     2181, 2183, 2187, 2189, 2191, 2194, 2196, 2202, 2208, 2210,
     2212, 2216, 2218, 2221, 2227, 2231, 2233, 2242, 2244, 2246,
     2249, 2251, 2253, 2262, 2268, 2271, 2273, 2275, 2281, 2286,
     2294, 2298, 2300, 2302, 2304, 2306, 2308, 2312, 2314, 2317,
     2319, 2323, 2325, 2329, 2331, 2334, 2339, 2341, 2346, 2350,
     2352, 2354, 2359, 2365, 2369, 2374, 2377, 2381, 2388, 2385,
     2392, 2397, 2400, 2403, 2405, 2409, 2413, 2415, 2419, 2421,
     2425, 2427, 2434, 2439, 2443, 2445, 2449, 2451, 2455, 2458,
     2460, 2462, 2467, 2470, 2475, 2479, 2485, 2492, 2494, 2499,

     2501, 2505, 2508, 2511, 2517, 2513, 2519, 2523, 2525, 2528,
     2533, 2535, 2538, 2540, 2542, 2544, 2546, 2551, 2553, 2557,
     2561, 2563, 2572, 2568, 2577, 2565, 2583, 2585, 2587, 2591,
     2689, 2635, 2642, 2647, 2656, 2665, 2670, 2672, 2679
    } ;

static const flex_int16_t yy_def[740] =
    {   0,
      731,    1,  731,  731,  731,  731,  731,  732,  732,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  734,  733,  733,  733,
      733,  731,  735,  736,  737,  732,  738,  739,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  734,  733,  733,
      733,  733,  735,  735,  736,  737,  731,  739,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  731,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      186,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
        0,  731,  731,  731,  731,  731,  731,  731,  731
    } ;

static const flex_int16_t yy_nxt[2755] =
    {   0,
        4,    5,    6,    5,    4,    4,    4,    7,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   16,   17,   18,   19,   20,
       16,   21,   22,   23,   24,   16,   25,   26,   16,   27,
       16,   16,   28,   16,   16,   29,   16,   16,   16,   16,
       16,   16,   16,   16,   30,   16,   16,   16,   31,   16,
       16,   16,   16,   16,   16,   32,   33,   32,   35,   34,
       35,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  136,   38,   38,
       84,   38,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   38,   38,   32,   51,   32,   35,   40,
       38,   38,   38,   38,   38,   38,   41,   42,   43,   84,
       45,   44,  731,   46,   37,   50,  731,   48,   51,   47,
       54,   49,   55,   61,   58,   99,   52,   73,   62,   79,
       56,   53,   59,   38,   38,   57,   63,   65,  100,   74,
       87,   64,   77,   60,   38,   38,   38,   38,  731,   38,
       38,   73,   38,   38,  731,   93,   75,   38,   38,   51,
       66,  731,   87,   38,   38,   38,   38,  731,   67,   38,
       38,   38,   38,   38,   38,   68,   73,   87,   69,   38,
       38,   51,   70,   76,   71,  731,   72,   81,   82,   38,

       38,   80,   38,   38,  731,   89,  731,   38,   38,   87,
       73,   91,   38,   38,   38,   38,   38,   38,   92,   38,
       38,  731,   90,  731,   94,   38,   38,  731,   95,  102,
       38,   38,   38,   38,   96,   38,   38,  731,   38,   38,
       38,   38,   38,   38,  731,  101,   38,   38,   97,   38,
       38,   98,  102,  731,  105,  104,  731,  103,   38,   38,
       38,   38,   38,   38,   38,   38,  107,  108,   38,   38,
      731,  106,  731,  109,   38,   38,  731,   38,   38,  120,
       38,   38,  112,  114,  113,  110,  731,   38,   38,  111,
      731,  115,  118,   38,   38,  116,   38,   38,  731,  122,

       38,   38,  731,  117,  731,  119,   38,   38,  121,   38,
       38,   38,   38,  124,  125,  731,  123,  127,  731,  126,
       38,   38,  731,   38,   38,   38,   38,   38,   38,  731,
       38,   38,   38,   38,  731,  129,   38,   38,   38,   38,
      731,  127,   38,   38,  131,  731,   38,   38,   38,   38,
      128,  130,  132,   38,   38,   38,   38,   38,   38,  133,
      135,   38,   38,  731,   38,   38,   38,   38,  731,  138,
       38,   38,  134,  139,  141,  731,  137,   38,   38,  140,
      731,   38,   38,   38,   38,   38,   38,  142,   38,   38,
      143,  144,  150,   38,   38,  147,  152,  153,  154,  148,

      731,  145,  731,   38,   38,  731,  146,   38,   38,  155,
      156,  151,  157,  149,   38,   38,  150,   38,   38,  160,
      161,  162,  158,  159,  731,  166,  731,  163,   38,   38,
      164,  731,  167,   38,   38,   38,   38,  168,   38,   38,
      165,  731,   38,   38,   38,   38,  169,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  731,  175,   38,
       38,  731,   38,   38,   38,   38,   38,   38,  731,  180,
      171,   38,   38,  731,  170,   38,   38,  172,  731,  182,
       38,   38,  173,  174,   38,   38,  731,  177,   38,   38,
      179,  731,   38,   38,   38,   38,  176,   38,   38,  731,

      178,  182,   38,   38,  731,  184,  181,   38,   38,  731,
      188,   38,   38,   38,   38,   38,   38,  183,   38,   38,
      731,   38,   38,  731,  185,   38,   38,   38,   38,  186,
       38,   38,  194,  187,  190,  731,  191,  192,  731,  196,
      189,  199,   38,   38,  201,  731,  193,   38,   38,  731,
      195,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  731,  197,  200,   38,   38,  198,  731,  205,  731,
       38,   38,   38,   38,  731,  207,  206,   38,   38,  202,
      731,  203,   38,   38,   38,   38,   38,   38,   38,   38,
      205,   38,   38,  731,  208,   38,   38,   38,   38,  204,

       38,   38,  731,  212,  209,  211,   38,   38,  214,   38,
       38,  731,  210,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  217,  731,  213,
      215,  216,   38,   38,   38,   38,  731,  226,  219,  218,
      220,   38,   38,  221,  223,   38,   38,   38,   38,  222,
      225,  731,  230,   38,   38,  731,  224,   38,   38,  731,
      229,  731,  227,   38,   38,   38,   38,   38,   38,  731,
      231,  232,  228,  233,   38,   38,   38,   38,  731,   38,
       38,  731,   38,   38,  236,   38,   38,   38,   38,  731,
      235,   38,   38,   38,   38,  234,   38,   38,   38,   38,

       38,   38,   38,   38,  239,  731,   38,   38,   38,   38,
      238,  237,   38,   38,  258,  240,  241,  240,  240,  240,
      240,  240,  240,  240,  240,  242,  244,  243,  245,   38,
       38,  251,  250,  255,  256,  731,  253,  731,  252,  254,
      731,  257,  731,  246,   38,   38,  731,  247,   38,   38,
      260,   38,   38,  259,   38,   38,  248,  731,  249,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  731,   38,   38,
      731,   38,   38,   38,   38,  731,   38,   38,   38,   38,
      731,  262,  731,   38,   38,  261,   38,   38,  266,  731,

      268,  267,  263,  269,  264,  731,  282,  731,  265,  731,
      271,  731,   38,   38,   38,   38,  272,   38,   38,  731,
      270,   38,   38,  283,  284,  731,  285,   38,   38,   38,
       38,   38,   38,  287,  273,  286,  731,  274,  275,  276,
      290,  288,  289,   38,   38,  292,  731,  277,  278,  279,
      280,   38,   38,   38,   38,  293,  731,  294,  731,  291,
      731,  295,   38,   38,  281,   38,   38,   38,   38,  731,
      296,   38,   38,   38,   38,  731,  298,   38,   38,   38,
       38,   38,   38,   38,   38,  731,   38,   38,   38,   38,
      297,  240,  731,  299,  731,  304,   39,   39,   39,   39,

       38,   38,  731,   38,   38,  731,  301,  300,  307,  308,
      309,   38,   38,  731,  302,   38,   38,   38,   38,   38,
       38,   38,   38,  731,  303,  731,   38,   38,  306,  310,
      731,   38,   38,   38,   38,  731,  305,   38,   38,  731,
      311,  317,   38,   38,  731,  312,   38,   38,   38,   38,
       38,   38,   38,   38,  314,  731,  315,   38,   38,   38,
       38,   38,   38,   38,   38,  313,  318,   38,   38,  326,
      240,  731,  316,   38,   38,  731,  320,   38,   38,  731,
      319,   38,   38,  731,  322,   38,   38,   38,   38,  324,
      731,  323,  731,  321,   38,   38,  325,   38,   38,  328,

       38,   38,   38,   38,  731,   38,   38,   38,   38,  331,
      731,  329,   38,   38,  327,   38,   38,   38,   38,  330,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      333,  731,  332,   38,   38,  335,   38,   38,   38,   38,
      334,  731,  341,   38,   38,  339,  337,  731,   38,   38,
      344,  336,  340,  338,  342,   38,   38,  731,  353,  731,
      343,  731,  346,  351,   38,   38,  345,  349,  731,  348,
      356,   38,   38,   38,   38,   38,   38,  731,  347,  350,
       38,   38,   38,   38,  731,  352,   38,   38,   38,   38,
      357,  354,   38,   38,   38,   38,  355,   38,   38,   38,

       38,   38,   38,   38,   38,   38,   38,  358,   38,   38,
      359,  731,  361,   38,   38,  360,   38,   38,  362,  374,
       38,   38,   38,   38,  363,   38,   38,  731,  364,  368,
       38,   38,  369,  375,   38,   38,  367,  366,  373,  365,
      372,  370,   38,   38,  371,   38,   38,  376,   38,   38,
       38,   38,   38,   38,  731,  378,  378,  378,  731,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  379,
      731,  382,  377,   38,   38,   38,   38,  731,   38,   38,
      731,  380,  240,  731,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  731,  381,  383,  384,

      267,  389,  387,  731,  267,  731,  386,   38,   38,   38,
       38,  731,  385,   38,   38,   38,   38,   38,   38,  731,
      388,  731,  390,  391,  731,  240,   38,   38,  731,   38,
       38,   38,   38,  392,   38,   38,  731,  393,  731,  267,
       38,   38,   38,   38,  396,  731,  394,  267,  395,   38,
       38,   38,   38,  398,  397,  731,   38,   38,   38,   38,
       38,   38,  731,   38,   38,  731,  402,   38,   38,  400,
       38,   38,   38,   38,   38,   38,  731,  366,  731,  399,
      401,  731,   38,   38,  731,  403,   38,   38,   38,   38,
      406,   38,   38,  731,  404,  407,  405,   38,   38,   38,

       38,  267,  409,   38,   38,  731,  410,  408,   38,   38,
       38,   38,  731,  413,  731,  411,   38,   38,   38,   38,
      412,  414,   38,   38,  731,  415,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  416,  417,  420,  731,
      419,   38,   38,  421,   38,   38,   38,   38,   38,   38,
       38,   38,  731,   38,   38,  731,  418,   38,   38,  424,
       38,   38,  436,   38,   38,  427,  426,  423,  731,  422,
      429,  430,  240,   38,   38,  425,  431,  731,  437,  432,
      433,   38,   38,  428,  731,  434,  435,   38,   38,  731,
      439,  438,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      441,  440,   38,   38,   38,   38,   38,   38,  240,   38,
       38,  731,  443,   38,   38,  731,  442,   38,   38,   38,
       38,  450,  731,  445,   38,   38,  731,  444,  731,  448,
      240,  449,  452,   38,   38,   38,   38,   38,   38,  446,
      731,  447,  240,  267,   38,   38,   38,   38,  731,   38,
       38,  731,  454,   38,   38,  451,   38,   38,  456,   38,
       38,  731,  240,  453,   38,   38,  731,  455,   38,   38,
      731,   38,   38,  457,  458,   38,   38,   38,   38,  731,
      459,  731,  460,  731,  466,   38,   38,  467,  468,  461,

      462,   38,   38,  463,  731,   38,   38,  469,  366,  470,
       38,   38,   38,   38,   38,   38,  464,   38,   38,   38,
       38,  731,   38,   38,   38,   38,  731,   38,   38,  378,
      465,   38,   38,   38,   38,   38,   38,  731,  471,   38,
       38,  731,  472,  473,  481,  731,  378,   38,   38,   38,
       38,  475,  378,   38,   38,  477,  484,   38,   38,  474,
      476,  479,  485,  731,  478,   38,   38,  480,   38,   38,
       38,   38,  240,   38,   38,   38,   38,   38,   38,  731,
      483,  731,   38,   38,  487,  482,   38,   38,  489,   38,
       38,  493,  490,  731,  486,   38,   38,   38,   38,   38,

       38,   38,   38,  488,  491,  494,   38,   38,  731,   38,
       38,  731,  500,   38,   38,  731,  496,  497,  503,  492,
       38,   38,   38,   38,  731,  498,  731,  499,  495,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  504,  731,  502,  505,  731,
      501,   38,   38,   38,   38,  731,  507,  508,  510,   38,
       38,   38,   38,   38,   38,  731,  506,   38,   38,   38,
       38,  731,   38,   38,   38,   38,  512,   38,   38,  509,
      515,   38,   38,  731,  511,  731,  513,  267,   38,   38,
       38,   38,   38,   38,  731,  514,  516,   38,   38,  731,

      366,  517,  366,   38,   38,   38,   38,  731,  520,   38,
       38,  528,  518,   38,   38,   38,   38,  519,  521,  731,
      522,  731,  524,   38,   38,   38,   38,  523,  731,  530,
      731,  527,   38,   38,   38,   38,  731,  525,   38,   38,
      731,  526,  731,  534,   38,   38,   38,   38,  529,   38,
       38,  731,  531,  731,  532,   38,   38,   38,   38,   38,
       38,  731,  533,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  538,  535,  536,
      731,  540,   38,   38,  541,  537,   38,   38,   38,   38,
      731,  539,   38,   38,   38,   38,   38,   38,  542,   38,

       38,   38,   38,  731,  543,  240,  547,   38,   38,  552,
      546,  544,  548,   38,   38,  545,  731,  549,   38,   38,
      550,   38,   38,  731,  551,   38,   38,   38,   38,  731,
      556,   38,   38,  554,  731,  553,   38,   38,   38,   38,
      731,   38,   38,   38,   38,  731,  555,  378,   38,   38,
       38,   38,  558,  731,   38,   38,  731,  557,  267,   38,
       38,   38,   38,  560,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  559,  561,   38,   38,   38,   38,
      731,   38,   38,  563,  562,   38,   38,  366,   38,   38,
      567,  731,  564,  565,   38,   38,  566,  568,   38,   38,

      570,   38,   38,  731,  569,  731,  571,   38,   38,   38,
       38,  572,  267,   38,   38,  574,   38,   38,  581,  731,
      575,   38,   38,  378,  576,  731,  573,  577,   38,   38,
      583,   38,   38,  578,  731,  582,  731,  586,   38,   38,
      731,  579,   38,   38,   38,   38,   38,   38,  584,  580,
      731,  585,  378,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  587,   38,   38,  731,   38,   38,   38,
       38,  731,   38,   38,  589,   38,   38,  731,   38,   38,
      731,  240,   38,   38,  588,   38,   38,  240,   38,   38,
      240,   38,   38,   38,   38,   38,   38,   38,   38,  267,

      591,   38,   38,   38,   38,  240,  593,  595,  590,   38,
       38,  731,  592,  597,  731,  267,  594,   38,   38,   38,
       38,   38,   38,   38,   38,  731,  596,  240,  731,  598,
      600,  731,  267,  601,   38,   38,  599,  731,  603,  731,
      602,   38,   38,   38,   38,   38,   38,  731,  366,  731,
      366,   38,   38,   38,   38,   38,   38,  731,  606,  366,
      604,  731,   38,   38,   38,   38,   38,   38,  731,  605,
       38,   38,  731,   38,   38,  614,  731,  607,   38,   38,
      731,  608,   38,   38,  610,  615,   38,   38,  611,  731,
      613,  267,  267,  267,  731,  609,   38,   38,   38,   38,

       38,   38,  612,  621,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  731,  616,  731,  619,  731,  617,
      618,   38,   38,   38,   38,  620,   38,   38,   38,   38,
       38,   38,  622,   38,   38,  731,  624,  623,   38,   38,
       38,   38,  731,  625,   38,   38,  731,  627,   38,   38,
      731,  626,  731,   38,   38,  240,   38,   38,  629,  731,
      628,  731,  630,   38,   38,  731,  632,  731,  633,   38,
       38,  631,  580,   38,   38,   38,   38,  731,   38,   38,
      731,  634,  731,  267,   38,   38,   38,   38,   38,   38,
      731,  635,   38,   38,   38,   38,   38,   38,  731,   38,

       38,   38,   38,  731,  638,  636,  637,   38,   38,  731,
      366,  731,  639,   38,   38,   38,   38,   38,   38,  731,
      366,   38,   38,   38,   38,  731,   38,   38,  731,  640,
      641,  646,   38,   38,  731,  642,   38,   38,   38,   38,
      643,  645,  648,  731,  378,  647,  644,   38,   38,   38,
       38,   38,   38,  267,   38,   38,   38,   38,   38,   38,
      731,  654,  267,  731,  649,  731,  650,   38,   38,  731,
      267,  652,  651,   38,   38,  240,   38,   38,   38,   38,
       38,   38,  731,  653,  731,  655,   38,   38,  731,  657,
      662,   38,   38,  731,  659,  731,  656,  731,  240,   38,

       38,  658,  660,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  731,  661,   38,   38,   38,
       38,  663,   38,   38,   38,   38,  731,  366,   38,   38,
       38,   38,  731,  664,   38,   38,   38,   38,  731,   38,
       38,  731,  666,  665,   38,   38,   38,   38,  670,  731,
      667,   38,   38,  671,  672,   38,   38,   38,   38,   38,
       38,  267,  668,  669,   38,   38,  731,  267,  731,  675,
       38,   38,  731,  674,   38,   38,  731,  673,  240,   38,
       38,  676,   38,   38,  731,  267,   38,   38,  731,  677,
       38,   38,  680,   38,   38,  731,  678,   38,   38,  731,

      679,  731,   38,   38,  681,   38,   38,  731,   38,   38,
       38,   38,  682,  642,   38,   38,  731,  684,   38,   38,
       38,   38,  731,  642,   38,   38,   38,   38,  731,  685,
       38,   38,   38,   38,  683,  686,  731,  267,  688,   38,
       38,  731,  687,  690,   38,   38,  692,  689,   38,   38,
       38,   38,  693,  240,   38,   38,   38,   38,  731,  240,
       38,   38,  691,   38,   38,   38,   38,   38,   38,  695,
      731,  694,   38,   38,  699,   38,   38,  731,  642,  696,
       38,   38,  731,  697,   38,   38,  731,  366,  366,  366,
       38,   38,  731,  267,  731,  642,  731,   38,   38,   38,

       38,  698,  267,  703,   38,   38,   38,   38,  700,  240,
       38,   38,  731,   38,   38,  701,   38,   38,   38,   38,
      702,  731,   38,   38,   38,   38,  731,  704,   38,   38,
       38,   38,  707,   38,   38,  705,  267,  731,   38,   38,
       38,   38,  706,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  713,  711,  718,   38,   38,   38,   38,
      708,  710,   38,   38,  709,  712,   38,   38,   38,   38,
       38,   38,  714,   38,   38,  719,  731,   38,   38,  715,
      731,  716,   38,   38,  721,  731,  722,  717,   38,   38,
       38,   38,   38,   38,  731,  240,   38,   38,  731,  720,

      731,  731,  723,  724,  731,  267,  731,  267,  727,  267,
      267,  731,  731,  725,  726,  731,  731,  731,  731,  728,
      731,  731,  731,  731,  729,  731,  731,  731,  731,  267,
      731,  731,  731,  731,  731,  267,  731,  730,   36,   36,
      731,  731,  731,   36,   39,   39,   39,   39,   39,   39,
       39,   78,   78,   78,   78,   78,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   85,  731,   85,   85,   85,
       85,   85,   85,   85,   86,  731,   86,   88,   88,  731,
       88,   38,   38,   38,   38,   38,   38,   38,    3,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731
    } ;

static const flex_int16_t yy_chk[2755] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    7,    5,    8,    7,
        9,   10,   10,   11,   11,   12,   12,   16,   16,   14,
       14,   39,   39,   17,   17,   20,   20,   84,   13,   13,
       83,   28,   28,   15,   15,   49,   49,   18,   18,   19,

       19,   26,   26,   21,   21,   32,   15,   32,   36,   10,
       24,   24,   22,   22,   44,   44,   10,   10,   11,   33,
       12,   11,    3,   12,    8,   14,    9,   13,   15,   12,
       17,   13,   18,   20,   19,   49,   15,   24,   21,   28,
       18,   15,   19,   23,   23,   18,   21,   22,   49,   24,
       35,   21,   26,   19,   25,   25,   29,   29,    0,   31,
       31,   24,   30,   30,   36,   44,   24,   40,   40,   29,
       23,    0,   35,   41,   41,   42,   42,    0,   23,   43,
       43,   45,   45,   46,   46,   23,   31,   86,   23,   47,
       47,   29,   23,   25,   23,    0,   23,   30,   31,   48,

       48,   29,   50,   50,    0,   40,    0,   51,   51,   86,
       31,   42,   52,   52,   53,   53,   54,   54,   43,   55,
       55,    0,   41,    0,   45,   56,   56,    0,   46,   51,
       57,   57,   58,   58,   47,   59,   59,    0,   60,   60,
       61,   61,   62,   62,    0,   50,   63,   63,   48,   64,
       64,   48,   51,    0,   54,   53,    0,   52,   65,   65,
       66,   66,   67,   67,   68,   68,   56,   57,   69,   69,
        0,   55,    0,   58,   70,   70,    0,   71,   71,   66,
       72,   72,   59,   60,   59,   58,    0,   73,   73,   58,
        0,   61,   64,   74,   74,   62,   75,   75,    0,   68,

       76,   76,    0,   63,    0,   65,   79,   79,   67,   77,
       77,   80,   80,   70,   71,    0,   69,   73,    0,   72,
       81,   81,    0,   82,   82,   89,   89,   90,   90,    0,
       91,   91,   92,   92,    0,   75,   93,   93,   94,   94,
        0,   73,   95,   95,   77,    0,   96,   96,   97,   97,
       74,   76,   79,   98,   98,   99,   99,  100,  100,   80,
       82,  101,  101,    0,  102,  102,  103,  103,    0,   90,
      106,  106,   81,   91,   93,    0,   89,  107,  107,   92,
        0,  104,  104,  105,  105,  108,  108,   94,  110,  110,
       95,   96,  102,  114,  114,   99,  104,  104,  104,  100,

        0,   97,    0,  109,  109,    0,   98,  112,  112,  104,
      104,  103,  104,  101,  113,  113,  102,  111,  111,  107,
      108,  109,  105,  106,    0,  112,    0,  110,  115,  115,
      111,    0,  113,  116,  116,  118,  118,  113,  117,  117,
      111,    0,  119,  119,  120,  120,  114,  121,  121,  122,
      122,  123,  123,  124,  124,  125,  125,    0,  120,  126,
      126,    0,  127,  127,  128,  128,  129,  129,    0,  125,
      116,  130,  130,    0,  115,  133,  133,  117,    0,  127,
      131,  131,  118,  119,  132,  132,    0,  122,  134,  134,
      124,    0,  135,  135,  140,  140,  121,  137,  137,    0,

      123,  127,  138,  138,    0,  129,  126,  139,  139,    0,
      133,  141,  141,  142,  142,  143,  143,  128,  144,  144,
        0,  145,  145,    0,  130,  147,  147,  152,  152,  131,
      146,  146,  140,  132,  135,    0,  137,  138,    0,  142,
      134,  144,  148,  148,  146,    0,  139,  149,  149,    0,
      141,  150,  150,  151,  151,  153,  153,  154,  154,  155,
      155,    0,  142,  145,  157,  157,  143,    0,  150,    0,
      156,  156,  158,  158,    0,  152,  151,  160,  160,  147,
        0,  148,  159,  159,  162,  162,  161,  161,  163,  163,
      150,  164,  164,    0,  153,  171,  171,  165,  165,  149,

      166,  166,    0,  157,  154,  156,  167,  167,  159,  168,
      168,    0,  155,  169,  169,  170,  170,  172,  172,  173,
      173,  174,  174,  175,  175,  176,  176,  162,    0,  158,
      160,  161,  177,  177,  178,  178,    0,  171,  164,  163,
      165,  179,  179,  166,  168,  180,  180,  181,  181,  167,
      170,    0,  175,  182,  182,    0,  169,  183,  183,    0,
      174,    0,  172,  184,  184,  185,  185,  189,  189,    0,
      176,  177,  173,  178,  188,  188,  191,  191,    0,  190,
      190,    0,  187,  187,  181,  193,  193,  195,  195,    0,
      180,  196,  196,  199,  199,  179,  197,  197,  202,  202,

      200,  200,  198,  198,  185,    0,  194,  194,  201,  201,
      184,  183,  186,  186,  200,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  187,  190,  188,  191,  192,
      192,  194,  193,  198,  198,    0,  196,    0,  195,  197,
        0,  199,    0,  192,  203,  203,    0,  192,  204,  204,
      202,  205,  205,  201,  206,  206,  192,    0,  192,  207,
      207,  208,  208,  209,  209,  210,  210,  211,  211,  212,
      212,  213,  213,  214,  214,  216,  216,    0,  217,  217,
        0,  218,  218,  219,  219,    0,  220,  220,  221,  221,
        0,  204,    0,  223,  223,  203,  222,  222,  209,    0,

      210,  209,  206,  211,  207,    0,  216,    0,  208,    0,
      213,    0,  224,  224,  225,  225,  214,  226,  226,    0,
      212,  215,  215,  217,  218,    0,  219,  227,  227,  228,
      228,  230,  230,  221,  215,  220,    0,  215,  215,  215,
      224,  222,  223,  229,  229,  226,    0,  215,  215,  215,
      215,  231,  231,  232,  232,  227,    0,  228,    0,  225,
        0,  229,  234,  234,  215,  233,  233,  235,  235,    0,
      230,  236,  236,  237,  237,    0,  232,  238,  238,  239,
      239,  240,  240,  242,  242,    0,  244,  244,  245,  245,
      231,  241,    0,  233,    0,  238,  241,  241,  241,  241,

      246,  246,    0,  243,  243,    0,  235,  234,  243,  243,
      243,  247,  247,    0,  236,  248,  248,  249,  249,  250,
      250,  251,  251,    0,  237,    0,  252,  252,  242,  244,
        0,  253,  253,  254,  254,    0,  239,  255,  255,    0,
      245,  252,  256,  256,    0,  246,  257,  257,  258,  258,
      259,  259,  261,  261,  248,    0,  249,  260,  260,  262,
      262,  263,  263,  264,  264,  247,  253,  265,  265,  261,
      251,    0,  250,  266,  266,    0,  255,  267,  267,    0,
      254,  268,  268,    0,  257,  269,  269,  270,  270,  259,
        0,  258,    0,  256,  272,  272,  260,  271,  271,  263,

      273,  273,  274,  274,    0,  275,  275,  276,  276,  266,
        0,  264,  277,  277,  262,  278,  278,  279,  279,  265,
      280,  280,  281,  281,  282,  282,  283,  283,  284,  284,
      269,    0,  268,  285,  285,  271,  286,  286,  287,  287,
      270,    0,  276,  288,  288,  274,  273,    0,  289,  289,
      278,  272,  275,  273,  277,  290,  290,    0,  286,    0,
      277,    0,  280,  284,  291,  291,  279,  282,    0,  281,
      289,  292,  292,  293,  293,  294,  294,    0,  280,  283,
      295,  295,  296,  296,    0,  285,  297,  297,  298,  298,
      290,  287,  299,  299,  301,  301,  288,  300,  300,  302,

      302,  303,  303,  304,  304,  305,  305,  291,  306,  306,
      292,    0,  294,  307,  307,  293,  308,  308,  294,  305,
      309,  309,  310,  310,  294,  311,  311,    0,  295,  299,
      312,  312,  300,  305,  313,  313,  298,  297,  304,  296,
      303,  301,  314,  314,  302,  315,  315,  306,  316,  316,
      317,  317,  318,  318,    0,  311,  311,  311,    0,  319,
      319,  320,  320,  321,  321,  322,  322,  323,  323,  312,
        0,  316,  310,  324,  324,  326,  326,    0,  325,  325,
        0,  313,  314,    0,  327,  327,  328,  328,  329,  329,
      330,  330,  331,  331,  332,  332,    0,  315,  317,  318,

      319,  325,  323,    0,  322,    0,  321,  333,  333,  334,
      334,    0,  320,  335,  335,  336,  336,  337,  337,    0,
      324,    0,  326,  327,    0,  328,  338,  338,    0,  339,
      339,  340,  340,  330,  342,  342,    0,  331,    0,  329,
      341,  341,  343,  343,  335,    0,  333,  332,  334,  344,
      344,  345,  345,  337,  336,    0,  346,  346,  347,  347,
      348,  348,    0,  349,  349,    0,  340,  350,  350,  339,
      351,  351,  352,  352,  353,  353,    0,  342,    0,  338,
      339,    0,  354,  354,    0,  341,  355,  355,  356,  356,
      345,  357,  357,    0,  343,  346,  344,  358,  358,  359,

      359,  348,  349,  360,  360,    0,  350,  347,  361,  361,
      362,  362,    0,  353,    0,  351,  363,  363,  364,  364,
      352,  354,  365,  365,    0,  355,  366,  366,  367,  367,
      368,  368,  369,  369,  370,  370,  356,  357,  360,    0,
      359,  373,  373,  361,  372,  372,  374,  374,  375,  375,
      376,  376,    0,  371,  371,    0,  358,  377,  377,  364,
      378,  378,  372,  379,  379,  368,  367,  363,    0,  362,
      371,  371,  370,  381,  381,  365,  371,    0,  373,  371,
      371,  380,  380,  369,    0,  371,  371,  382,  382,    0,
      375,  374,  383,  383,  384,  384,  385,  385,  386,  386,

      387,  387,  388,  388,  389,  389,  390,  390,  391,  391,
      379,  377,  392,  392,  393,  393,  395,  395,  380,  394,
      394,    0,  382,  396,  396,    0,  381,  397,  397,  399,
      399,  391,    0,  384,  398,  398,    0,  383,    0,  389,
      388,  390,  394,  400,  400,  401,  401,  403,  403,  385,
        0,  386,  387,  393,  402,  402,  404,  404,    0,  405,
      405,    0,  396,  407,  407,  392,  406,  406,  399,  408,
      408,    0,  397,  395,  409,  409,    0,  398,  410,  410,
        0,  411,  411,  400,  401,  412,  412,  413,  413,    0,
      402,    0,  403,    0,  411,  414,  414,  411,  411,  404,

      405,  415,  415,  406,    0,  416,  416,  411,  408,  411,
      417,  417,  418,  418,  419,  419,  407,  420,  420,  421,
      421,    0,  422,  422,  423,  423,    0,  424,  424,  410,
      409,  425,  425,  426,  426,  427,  427,    0,  412,  428,
      428,    0,  413,  416,  424,    0,  414,  429,  429,  430,
      430,  418,  415,  431,  431,  420,  428,  432,  432,  417,
      419,  422,  428,    0,  421,  433,  433,  423,  434,  434,
      436,  436,  426,  435,  435,  437,  437,  438,  438,    0,
      427,    0,  439,  439,  430,  425,  440,  440,  431,  441,
      441,  435,  432,    0,  429,  442,  442,  443,  443,  444,

      444,  445,  445,  430,  433,  436,  446,  446,    0,  447,
      447,    0,  442,  448,  448,    0,  438,  439,  445,  434,
      449,  449,  450,  450,    0,  440,    0,  441,  437,  451,
      451,  452,  452,  454,  454,  453,  453,  455,  455,  456,
      456,  457,  457,  458,  458,  446,    0,  444,  447,    0,
      443,  459,  459,  460,  460,    0,  449,  450,  453,  461,
      461,  462,  462,  463,  463,    0,  448,  464,  464,  465,
      465,    0,  466,  466,  469,  469,  455,  467,  467,  452,
      458,  468,  468,    0,  454,    0,  456,  451,  470,  470,
      471,  471,  472,  472,    0,  457,  459,  473,  473,    0,

      462,  460,  464,  474,  474,  475,  475,    0,  465,  479,
      479,  473,  461,  476,  476,  477,  477,  463,  466,    0,
      467,    0,  469,  478,  478,  480,  480,  468,    0,  475,
        0,  472,  481,  481,  482,  482,    0,  470,  483,  483,
        0,  471,    0,  479,  484,  484,  485,  485,  474,  486,
      486,    0,  476,    0,  477,  487,  487,  488,  488,  489,
      489,    0,  478,  490,  490,  491,  491,  492,  492,  495,
      495,  493,  493,  496,  496,  494,  494,  483,  480,  481,
        0,  485,  498,  498,  486,  482,  497,  497,  500,  500,
        0,  484,  499,  499,  501,  501,  502,  502,  487,  503,

      503,  504,  504,    0,  488,  491,  493,  507,  507,  499,
      492,  489,  494,  505,  505,  490,    0,  495,  506,  506,
      496,  508,  508,    0,  497,  509,  509,  510,  510,    0,
      505,  511,  511,  501,    0,  500,  512,  512,  513,  513,
        0,  514,  514,  515,  515,    0,  503,  502,  516,  516,
      517,  517,  507,    0,  518,  518,    0,  506,  504,  519,
      519,  520,  520,  509,  521,  521,  522,  522,  523,  523,
      524,  524,  526,  526,  508,  510,  525,  525,  527,  527,
        0,  528,  528,  512,  511,  530,  530,  516,  529,  529,
      517,    0,  513,  514,  531,  531,  515,  518,  532,  532,

      521,  533,  533,    0,  519,    0,  522,  534,  534,  535,
      535,  523,  520,  537,  537,  525,  536,  536,  533,    0,
      526,  538,  538,  527,  528,    0,  524,  529,  539,  539,
      534,  540,  540,  530,    0,  533,    0,  538,  541,  541,
        0,  531,  542,  542,  543,  543,  544,  544,  535,  532,
        0,  536,  537,  545,  545,  546,  546,  547,  547,  548,
      548,  550,  550,  539,  549,  549,    0,  551,  551,  552,
      552,    0,  553,  553,  541,  554,  554,    0,  555,  555,
        0,  543,  556,  556,  540,  557,  557,  542,  558,  558,
      544,  559,  559,  560,  560,  561,  561,  563,  563,  550,

      547,  562,  562,  564,  564,  545,  551,  553,  546,  565,
      565,    0,  548,  555,    0,  549,  552,  566,  566,  567,
      567,  568,  568,  569,  569,    0,  554,  558,    0,  556,
      559,    0,  560,  561,  570,  570,  557,    0,  564,    0,
      562,  571,  571,  572,  572,  573,  573,    0,  565,    0,
      563,  574,  574,  575,  575,  576,  576,    0,  569,  567,
      566,    0,  577,  577,  578,  578,  579,  579,    0,  568,
      580,  580,    0,  581,  581,  577,    0,  570,  582,  582,
        0,  571,  583,  583,  573,  577,  584,  584,  574,    0,
      576,  582,  582,  582,    0,  572,  585,  585,  586,  586,

      587,  587,  575,  584,  588,  588,  589,  589,  590,  590,
      591,  591,  592,  592,    0,  578,    0,  583,    0,  579,
      581,  593,  593,  594,  594,  583,  595,  595,  596,  596,
      597,  597,  585,  598,  598,    0,  587,  586,  599,  599,
      600,  600,    0,  588,  601,  601,    0,  590,  602,  602,
        0,  589,    0,  603,  603,  591,  604,  604,  594,    0,
      592,    0,  595,  605,  605,    0,  597,    0,  598,  606,
      606,  596,  593,  607,  607,  608,  608,    0,  609,  609,
        0,  599,    0,  601,  610,  610,  611,  611,  612,  612,
        0,  600,  613,  613,  614,  614,  615,  615,    0,  616,

      616,  617,  617,    0,  604,  602,  603,  618,  618,    0,
      605,    0,  607,  619,  619,  620,  620,  621,  621,    0,
      606,  622,  622,  623,  623,    0,  624,  624,    0,  608,
      609,  615,  625,  625,    0,  610,  626,  626,  627,  627,
      611,  614,  618,    0,  613,  616,  612,  628,  628,  629,
      629,  630,  630,  617,  631,  631,  632,  632,  633,  633,
        0,  627,  620,    0,  621,    0,  622,  634,  634,    0,
      619,  624,  623,  635,  635,  626,  636,  636,  637,  637,
      638,  638,    0,  625,    0,  629,  639,  639,    0,  631,
      636,  640,  640,    0,  633,    0,  630,    0,  628,  641,

      641,  632,  634,  642,  642,  643,  643,  644,  644,  645,
      645,  646,  646,  647,  647,    0,  635,  648,  648,  649,
      649,  637,  650,  650,  651,  651,    0,  638,  652,  652,
      653,  653,    0,  639,  654,  654,  655,  655,    0,  656,
      656,    0,  641,  640,  657,  657,  658,  658,  647,    0,
      643,  659,  659,  648,  649,  660,  660,  661,  661,  662,
      662,  650,  645,  646,  663,  663,    0,  652,    0,  654,
      664,  664,    0,  653,  665,  665,    0,  651,  656,  666,
      666,  655,  667,  667,    0,  658,  668,  668,    0,  657,
      670,  670,  661,  669,  669,    0,  659,  671,  671,    0,

      660,    0,  672,  672,  662,  673,  673,    0,  674,  674,
      675,  675,  663,  665,  676,  676,    0,  667,  677,  677,
      678,  678,    0,  664,  679,  679,  680,  680,    0,  668,
      681,  681,  682,  682,  666,  670,    0,  669,  672,  683,
      683,    0,  671,  674,  684,  684,  677,  673,  685,  685,
      686,  686,  679,  676,  687,  687,  688,  688,    0,  678,
      689,  689,  675,  690,  690,  691,  691,  692,  692,  681,
        0,  680,  693,  693,  689,  694,  694,    0,  683,  682,
      695,  695,    0,  685,  696,  696,    0,  696,  696,  696,
      697,  697,    0,  687,    0,  684,    0,  698,  698,  699,

      699,  688,  686,  694,  700,  700,  701,  701,  690,  691,
      702,  702,    0,  703,  703,  692,  704,  704,  706,  706,
      693,    0,  705,  705,  707,  707,    0,  695,  708,  708,
      709,  709,  700,  710,  710,  697,  698,    0,  711,  711,
      712,  712,  699,  713,  713,  714,  714,  715,  715,  716,
      716,  717,  717,  706,  704,  711,  718,  718,  719,  719,
      701,  703,  720,  720,  702,  705,  721,  721,  722,  722,
      726,  726,  707,  724,  724,  712,    0,  723,  723,  708,
        0,  709,  725,  725,  715,    0,  716,  710,  727,  727,
      728,  728,  729,  729,    0,  713,  730,  730,    0,  714,

        0,    0,  717,  718,    0,  721,    0,  722,  724,  726,
      719,    0,    0,  720,  723,    0,    0,    0,    0,  725,
        0,    0,    0,    0,  727,    0,    0,    0,    0,  728,
        0,    0,    0,    0,    0,  730,    0,  729,  732,  732,
        0,    0,    0,  732,  733,  733,  733,  733,  733,  733,
      733,  734,  734,  734,  734,  734,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  736,    0,  736,  736,  736,
      736,  736,  736,  736,  737,    0,  737,  738,  738,    0,
      738,  739,  739,  739,  739,  739,  739,  739,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731
    } ;

static const flex_int16_t yy_rule_linenum[19] =
    {   0,
       81,   82,   84,   85,   86,   87,   88,   89,   90,   95,
       96,   99,  104,  110,  116,  124,  129,  134
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"

#include <string>

#include "scanner.h"

/* import the parser's token type into a local typedef */
typedef example::Parser::token token;
typedef example::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1343 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 49 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1356 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1358 "scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 70 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


#line 73 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

#line 1562 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 732 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 731 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 19 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 19 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 20 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 81 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 82 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 86 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 87 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 95 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 96 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 99 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 110 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
/* gobble up white-spaces */
case 16:
YY_RULE_SETUP
#line 124 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 129 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->lines(yyleng); yylloc->step();
}
	YY_BREAK
/* pass all other characters up to bison */
case 18:
YY_RULE_SETUP
#line 134 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        return static_cast<token_type>(*yytext);
    }
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 19:
YY_RULE_SETUP
#line 140 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
ECHO;
	YY_BREAK
#line 1759 "scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Examplefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Examplefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Examplerealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Examplerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 732 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 732 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 731);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Examplealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Examplealloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Examplefree((void *) b->yy_ch_buf  );

	Examplefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Examplealloc(new_size  );

		else
			(yy_start_stack) = (int *) Examplerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Examplealloc (yy_size_t  size )
{
			return malloc(size);
}

void *Examplerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Examplefree (void * ptr )
{
			free( (char *) ptr );	/* see Examplerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 140 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


namespace example {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : ExampleFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int ExampleFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int ExampleFlexLexer::yywrap()
{
    return 1;
}

