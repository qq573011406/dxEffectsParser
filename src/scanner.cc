#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ExampleFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc Examplealloc

    #define yyrealloc Examplerealloc

    #define yyfree Examplefree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *Examplealloc ( yy_size_t  );
void *Examplerealloc ( void *, yy_size_t  );
void Examplefree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[717] =
    {   0,
        0,    0,   20,   18,   16,   17,   18,   12,   12,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   16,    0,    2,   13,   12,    0,   15,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    0,    0,    2,   13,   13,   15,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,    1,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   10,   14,
       14,   14,   14,   14,   14,    3,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   11,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    9,    9,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    9,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,    6,    7,    8,   14,   14,   14,   14,   14,   14,
        9,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,    9,
       14,   14,   14,   14,   14,   14,   14,   14,    5,   14,
        9,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,    9,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,    4,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,    9,   14,    9,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   26,   26,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   26,   26,   39,
        1,    1,    1,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   26,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    8,
        6,    6,    6,    6,    6,    7,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    9,    6,    6
    } ;

static const flex_int16_t yy_base[725] =
    {   0,
        0,    0,  102, 2626,   64, 2626,   62,   62,   64,   66,
       68,   70,   83,   74,   88,   72,   78,   92,   94,   80,
       97,   99,  138,  142,  102,  105,    0,   85,  149,  109,
      151,  157,   92,    0,   90,   89,    0,    0,   76,  157,
      159,  163,  166,  170,  174,  185,  196,  176,  200,  203,
      209,  206,  211,  218,  213,  222,  232,  226,  215,  235,
      237,  242,  244,  247,  249,  257,  270,  259,  272,  275,
      277,  284,  289,  281,  291,  296,    0,  298,  300,  308,
      317,   88,   80,    0,  221, 2626,    0,  321,  323,  325,
      327,  329,  332,  334,  339,  336,  349,  351,  355,  357,

      362,  370,  377,  379,  375,  385,  387,  395,  398,  403,
      411,  420,  400,  423,  430,  432,  434,  440,  444,  446,
      448,  450,  456,  458,  460,  462,  464,  471,  473,  480,
      482,  485,  488, 2626,  494,  490,  500,  506,  508,  510,
      512,  518,  520,  526,  531,  534,  542,  548,  545,  550,
      552,  554,  556,  560,  566,  569,  571,  574,  576,  579,
      581,  583,  588,  592,  599,  602,  606,  610,  612,  614,
      616,  618,  623,  633,  638,  628,  640,  643,  650,  652,
      656,  658,  707,  661,  669,  663,  673,  675,  665,  686,
      698,  688,  690,  695,  700,  724,  728,  736,  740,  743,

      745,  747,  749,  751,  753,  755,  760,  762,  757,  764,
      766,  810,  768,  770,  773,  775,  782,  777,  779,  784,
      786,  801,  804,  806,  812,  819,  840,  842,  844,  847,
      849,  851,  854,  856,  859,  861,  859,  866,  875,  877,
      883,  885,  889,  895,  897,  899,  901,  903,  906,  908,
      912,  914,  921,  923,  925,  928,  931,  937,  939,  945,
      953,  960,  956,  962,  969,  971,  973,  975,  980,  978,
      982,  984,  986,  988,  990,  994,  997,  999, 1001, 1003,
     1006, 1008, 1015, 1017, 1040, 1045, 1047, 1049, 1055, 1059,
     1063, 1065, 1071, 1073, 1076, 1078, 1081, 1083, 1086, 1094,

     1096, 1099, 1101, 1105, 1112, 1114, 1117, 1123, 1127, 1129,
     1131, 1136, 1133, 1138, 1140, 1142, 1147, 1152, 1149, 1159,
     1157, 1163, 1168, 1165, 1171, 1173, 1175, 1188, 1192, 1177,
     1194, 1198, 1200, 1205, 1209, 1212, 1219, 1221, 1223, 1225,
     1229, 1235, 1237, 1240, 1242, 1246, 1248, 1250, 1254, 1258,
     1260, 1265, 1271, 1274, 1282, 1276, 1285, 1287, 1294, 1298,
     1300, 1302, 1304, 1306, 1325, 1309, 1312, 1318, 1320, 1322,
     1331, 1333, 1340, 1345, 1353, 1359, 1361, 1364, 1366, 1368,
     1370, 1372, 1374, 1378, 1381, 1383, 1389, 1385, 1391, 1393,
     1396, 1402, 1405, 1410, 1414, 1423, 1426, 1431, 1428, 1435,

     1443, 1446, 1452, 1457, 1454, 1459, 1461, 1466, 1463, 1475,
     1477, 1479, 1486, 1489, 1491, 1493, 1495, 1497, 1499, 1504,
     1508, 1518, 1522, 1529, 1532, 1537, 1540, 1542, 1545, 1547,
     1550, 1559, 1561, 1565, 1567, 1573, 1569, 1575, 1579, 1581,
     1584, 1591, 1593, 1599, 1595, 1601, 1603, 1605, 1610, 1612,
     1620, 1623, 1625, 1627, 1630, 1633, 1636, 1642, 1638, 1644,
     1651, 1653, 1655, 1660, 1662, 1666, 1669, 1677, 1679, 1686,
     1688, 1695, 1697, 1701, 1705, 1709, 1711, 1714, 1717, 1719,
     1722, 1724, 1728, 1731, 1726, 1733, 1737, 1741, 1749, 1751,
     1755, 1764, 1759, 1772, 1775, 1777, 1781, 1783, 1785, 1787,

     1791, 1793, 1797, 1799, 1802, 1804, 1807, 1809, 1812, 1817,
     1819, 1823, 1825, 1828, 1830, 1835, 1842, 1845, 1855, 1857,
     1860, 1864, 1868, 1870, 1872, 1874, 1882, 1888, 1891, 1895,
     1897, 1899, 1901, 1908, 1912, 1914, 1918, 1920, 1923, 1925,
     1928, 1930, 1935, 1932, 1937, 1945, 1947, 1949, 1951, 1956,
     1962, 1971, 1973, 1977, 1980, 1988, 1991, 1993, 1995, 1998,
     2001, 2003, 2005, 2007, 2011, 2013, 2018, 2031, 2021, 2024,
     2035, 2042, 2048, 2050, 2053, 2057, 2059, 2026, 2067, 2069,
     2072, 2075, 2077, 2079, 2082, 2085, 2087, 2090, 2092, 2094,
     2099, 2106, 2108, 2113, 2116, 2118, 2120, 2125, 2127, 2129,

     2134, 2131, 2136, 2138, 2146, 2151, 2154, 2148, 2156, 2158,
     2168, 2181, 2160, 2184, 2186, 2175, 2188, 2190, 2202, 2205,
     2213, 2215, 2217, 2221, 2223, 2228, 2234, 2238, 2240, 2242,
     2244, 2246, 2249, 2251, 2253, 2255, 2259, 2261, 2265, 2269,
     2272, 2276, 2278, 2287, 2289, 2293, 2301, 2305, 2309, 2312,
     2315, 2319, 2322, 2324, 2326, 2329, 2336, 2338, 2340, 2342,
     2344, 2348, 2356, 2358, 2360, 2363, 2366, 2377, 2381, 2384,
     2387, 2389, 2391, 2396, 2398, 2400, 2403, 2406, 2414, 2408,
     2417, 2411, 2423, 2425, 2429, 2433, 2437, 2440, 2445, 2447,
     2449, 2452, 2458, 2460, 2463, 2465, 2469, 2471, 2473, 2475,

     2477, 2479, 2485, 2492, 2494, 2496, 2498, 2501, 2505, 2515,
     2507, 2518, 2520, 2524, 2528, 2626, 2572, 2579, 2584, 2593,
     2602, 2607, 2609, 2616
    } ;

static const flex_int16_t yy_def[725] =
    {   0,
      716,    1,  716,  716,  716,  716,  716,  717,  717,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  719,  718,  718,  718,
      718,  716,  720,  721,  722,  717,  723,  724,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  719,  718,  718,  718,
      718,  720,  720,  721,  722,  716,  724,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  716,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  183,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,    0,  716,  716,  716,  716,
      716,  716,  716,  716
    } ;

static const flex_int16_t yy_nxt[2692] =
    {   0,
        4,    5,    6,    5,    4,    4,    4,    7,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   16,   17,   18,   19,   20,
       16,   21,   22,   23,   24,   16,   25,   26,   16,   27,
       16,   16,   28,   16,   16,   29,   16,   16,   16,   16,
       16,   16,   16,   16,   30,   16,   16,   16,   31,   16,
       16,   16,   16,   16,   16,   32,   33,   32,   35,   34,
       35,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  134,   38,   38,
       38,   38,   83,   38,   38,   35,   83,   38,   38,   38,

       38,  716,   38,   38,   38,   38,   51,   38,   38,   40,
       38,   38,  716,   86,   38,   38,   41,   42,   43,  716,
       45,   44,  716,   46,   37,   50,  716,   48,   51,   47,
       54,   49,   55,   61,   58,   86,   52,   62,   78,   64,
       56,   53,   59,   38,   38,   57,   75,   38,   38,   80,
       63,  716,  716,   60,   38,   38,   38,   38,   32,  716,
       32,   76,   38,   38,   38,   38,  716,   51,   38,   38,
       65,   38,   38,  716,   72,   38,   38,  716,   66,   38,
       38,   38,   38,   72,  716,   67,   73,  716,   68,   51,
       38,   38,   69,  716,   70,   81,   71,  716,   72,   79,

       88,   38,   38,   74,   90,   38,   38,   72,   38,   38,
       91,   38,   38,   89,   38,   38,   38,   38,   38,   38,
       38,   38,   93,   38,   38,  716,   92,   38,   38,  716,
       96,   38,   38,   97,  716,   94,  101,   38,   38,  716,
       38,   38,   38,   38,   86,   98,   95,   38,   38,   38,
       38,  100,   38,   38,   38,   38,  102,  103,   99,  101,
      716,  104,   38,   38,   38,   38,   86,  111,  106,  112,
      105,  716,  108,  118,  107,   38,   38,   38,   38,  716,
       38,   38,   38,   38,  109,  113,   38,   38,  110,   38,
       38,  716,  116,  114,   38,   38,   38,   38,  716,  117,

      115,   38,   38,   38,   38,   38,   38,  716,  119,  716,
      120,  716,  121,   38,   38,  716,  122,  123,  716,  125,
      716,  124,   38,   38,  716,  127,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  129,   38,   38,   38,
       38,   38,   38,  125,   38,   38,  716,  128,  716,  130,
      716,  126,  716,  131,   38,   38,   38,   38,  716,  133,
       38,   38,   38,   38,  716,  132,  716,   38,   38,  716,
      136,  716,  139,  137,  716,   38,   38,  135,  716,  138,
       38,   38,   38,   38,   38,   38,  140,  141,  716,  142,
       38,   38,   38,   38,  143,  148,  145,  150,  151,  152,

       38,   38,  146,   38,   38,   38,   38,  144,   38,   38,
      153,  154,  716,  155,  147,  716,   38,   38,  160,  148,
      149,  162,  716,  156,  716,   38,   38,  159,   38,   38,
      716,  163,  158,  157,  164,   38,   38,   38,   38,   38,
       38,  716,  161,  165,  716,   38,   38,  716,  166,   38,
       38,   38,   38,   38,   38,   38,   38,  716,  167,  172,
      716,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  716,  169,  716,  168,  177,   38,   38,   38,   38,
      171,  716,  179,  716,  170,   38,   38,   38,   38,  174,
       38,   38,  176,   38,   38,   38,   38,  716,  173,   38,

       38,  716,  175,  716,  179,   38,   38,  716,  181,  716,
      178,   38,   38,   38,   38,   38,   38,   38,   38,  716,
      180,  716,  185,   38,   38,   38,   38,  183,  716,  182,
      189,   38,   38,  716,  184,  187,   38,   38,  188,   38,
       38,  193,  186,  716,  190,  198,  196,   38,   38,  191,
       38,   38,  192,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  716,  194,   38,   38,  197,  195,  716,
      202,   38,   38,  203,   38,   38,   38,   38,  200,   38,
       38,   38,   38,  716,   38,   38,   38,   38,   38,   38,
      199,  716,  202,   38,   38,  716,  205,   38,   38,  201,

      208,  716,  211,  204,   38,   38,  206,   38,   38,  716,
      209,   38,   38,  716,  207,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  716,  213,  214,   38,   38,
      716,  210,  212,   38,   38,  216,  217,  215,   38,   38,
      218,  716,  220,   38,   38,   38,   38,  219,   38,   38,
      222,  716,  226,  716,  221,   38,   38,   38,   38,  223,
      225,   38,   38,   38,   38,  716,   38,   38,   38,   38,
       38,   38,  224,  227,   38,   38,  716,  228,   38,   38,
       38,   38,  229,  716,  242,  232,  716,  230,  243,  716,
      231,   38,   38,   38,   38,   38,   38,  244,  716,  245,

       38,   38,  235,   38,   38,   38,   38,  716,  234,  238,
      716,  233,   38,   38,  716,  236,  237,  236,  236,  236,
      236,  236,  236,  236,  236,  240,  716,  239,  247,   38,
       38,  716,  241,   38,   38,  716,  251,  252,  246,  716,
      249,   38,   38,  250,  248,   38,   38,  254,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  716,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  253,   38,   38,
       38,   38,   38,   38,   38,   38,  255,   38,   38,   38,
       38,   38,   38,  258,  716,  262,  716,  256,  263,  257,

      264,  260,  259,  265,  278,  261,   38,   38,  267,   38,
       38,   38,   38,  266,  268,   38,   38,   38,   38,  286,
      279,  280,  716,  281,   38,   38,  716,  283,  269,  284,
      716,  270,  271,  272,  716,  290,  282,  288,  285,  289,
      716,  273,  274,  275,  276,   38,   38,   38,   38,   38,
       38,  287,   38,   38,   38,   38,   38,   38,  277,   38,
       38,   38,   38,  291,   38,   38,   38,   38,  236,  716,
      293,   38,   38,   39,   39,   39,   39,  294,  716,  299,
       38,   38,   38,   38,  292,  302,  303,  304,   38,   38,
       38,   38,  716,  296,   38,   38,  716,  295,  716,  297,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      298,   38,   38,   38,   38,  716,  301,   38,   38,   38,
       38,  300,  716,  312,  716,  305,   38,   38,   38,   38,
       38,   38,  716,   38,   38,  307,   38,   38,  716,  309,
      306,  310,   38,   38,   38,   38,  313,  716,  308,  716,
       38,   38,  716,  321,  716,  236,  315,  311,   38,   38,
      314,   38,   38,  716,  317,   38,   38,   38,   38,  319,
      316,  318,  320,  716,   38,   38,   38,   38,   38,   38,
       38,   38,  323,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  322,  324,   38,

       38,  326,   38,   38,   38,   38,   38,   38,   38,   38,
      325,   38,   38,   38,   38,  716,  330,  716,  327,  328,
       38,   38,   38,   38,  336,  716,  334,  716,  339,  329,
      716,  332,  716,  337,  335,  348,  716,  331,  333,  338,
      716,  341,  716,  346,  340,   38,   38,  344,  716,  343,
       38,   38,   38,   38,   38,   38,  716,  342,  716,  345,
       38,   38,  716,  347,   38,   38,  716,  351,   38,   38,
       38,   38,  716,  349,  716,  350,   38,   38,   38,   38,
      716,   38,   38,   38,   38,  352,   38,   38,   38,   38,
      716,   38,   38,  354,  716,  353,  716,  355,  716,   38,

       38,   38,   38,  356,   38,   38,   38,   38,  716,  357,
       38,   38,  358,  368,  716,  362,  363,   38,   38,   38,
       38,  360,   38,   38,  361,  359,  367,  366,   38,   38,
      364,  365,   38,   38,   38,   38,   38,   38,   38,   38,
      369,   38,   38,   38,   38,   38,   38,   38,   38,  371,
      371,  371,   38,   38,   38,   38,  716,   38,   38,  375,
      716,  372,   38,   38,   38,   38,  716,  370,   38,   38,
       38,   38,  236,   38,   38,  373,   38,   38,   38,   38,
       38,   38,   38,   38,  263,  377,  374,  382,  716,  376,
      379,  263,  380,   38,   38,  716,  378,   38,   38,   38,

       38,  381,  716,   38,   38,   38,   38,  384,  716,  383,
       38,   38,  236,  389,   38,   38,  716,   38,   38,  385,
      716,  263,  716,  386,   38,   38,   38,   38,   38,   38,
       38,   38,  387,  263,   38,   38,  388,  716,  390,  391,
       38,   38,   38,   38,  716,   38,   38,   38,   38,  395,
      393,   38,   38,   38,   38,   38,   38,  716,  392,   38,
       38,  394,  396,   38,   38,   38,   38,  360,  716,  399,
       38,   38,  716,  400,  716,  398,   38,   38,  397,   38,
       38,   38,   38,  263,  402,  716,  403,   38,   38,  401,
       38,   38,   38,   38,  406,  716,  404,  716,  407,   38,

       38,  405,  408,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  409,   38,   38,  410,   38,   38,  716,
      412,  716,  413,   38,   38,   38,   38,   38,   38,  716,
       38,   38,  428,  416,  716,  411,   38,   38,   38,   38,
      414,  415,  419,  418,  716,   38,   38,  421,  422,  236,
       38,   38,  417,  423,  429,  716,  424,  425,   38,   38,
      420,  716,  426,  427,   38,   38,   38,   38,  430,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  431,  236,   38,   38,  432,   38,   38,   38,   38,
       38,   38,  716,  434,   38,   38,   38,   38,   38,   38,

      716,   38,   38,  433,  716,  436,  441,   38,   38,  435,
       38,   38,  439,  236,  440,   38,   38,  443,  716,   38,
       38,  716,  437,  716,  438,  236,  716,  263,   38,   38,
      716,   38,   38,   38,   38,  445,   38,   38,  716,  442,
       38,   38,  716,  236,  446,  716,  447,  444,   38,   38,
      448,   38,   38,  716,  449,  450,  716,   38,   38,   38,
       38,  716,   38,   38,   38,   38,   38,   38,   38,   38,
      454,   38,   38,  451,  452,  457,  716,  453,  458,  459,
       38,   38,   38,   38,   38,   38,  716,  360,  460,  716,
      461,   38,   38,  455,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   38,   38,   38,  464,  456,  371,   38,
       38,  716,  462,   38,   38,  471,  716,  371,  716,  463,
      716,  466,  371,   38,   38,  716,  474,   38,   38,  465,
      467,  716,  475,  469,   38,   38,  468,   38,   38,  470,
      716,  236,   38,   38,  716,   38,   38,   38,   38,  473,
       38,   38,   38,   38,  472,   38,   38,  716,  477,  716,
      476,  716,  479,  483,   38,   38,   38,   38,  716,  480,
       38,   38,   38,   38,   38,   38,  481,  478,   38,   38,
       38,   38,  484,  489,   38,   38,   38,   38,  716,   38,
       38,  486,  716,  482,  487,  492,   38,   38,   38,   38,

       38,   38,  488,  485,   38,   38,   38,   38,   38,   38,
       38,   38,  716,  493,  716,   38,   38,   38,   38,  494,
      491,  716,  496,  490,  497,   38,   38,  499,   38,   38,
       38,   38,   38,   38,  716,   38,   38,  495,   38,   38,
      716,   38,   38,   38,   38,  501,  498,   38,   38,   38,
       38,  500,  504,  716,  263,  502,   38,   38,   38,   38,
       38,   38,  505,  716,  503,   38,   38,   38,   38,  360,
      360,   38,   38,  506,   38,   38,  716,  509,  716,  517,
      716,  507,   38,   38,   38,   38,  508,  510,  716,  512,
      511,   38,   38,   38,   38,  519,  716,  513,  716,  516,

       38,   38,   38,   38,  716,  514,   38,   38,  716,  515,
       38,   38,  518,  520,   38,   38,   38,   38,  522,   38,
       38,  521,   38,   38,   38,   38,  716,   38,   38,   38,
       38,   38,   38,   38,   38,  716,   38,   38,   38,   38,
      524,  526,   38,   38,  523,  528,   38,   38,  716,  529,
      716,  525,  716,  527,   38,   38,   38,   38,  716,  530,
       38,   38,  716,  539,   38,   38,  531,  236,  535,   38,
       38,  716,  534,  536,  532,  716,  533,   38,   38,  537,
       38,   38,   38,   38,  716,  538,   38,   38,   38,   38,
       38,   38,   38,   38,  543,  541,   38,   38,   38,   38,

      716,  540,   38,   38,   38,   38,  716,   38,   38,   38,
       38,  371,   38,   38,   38,   38,  542,   38,   38,  544,
      716,  263,   38,   38,   38,   38,  547,  545,   38,   38,
       38,   38,  716,   38,   38,   38,   38,  716,  548,  546,
       38,   38,  716,  550,  716,  549,  360,   38,   38,  554,
       38,   38,  551,  716,  552,  555,  716,  553,  557,  556,
       38,   38,   38,   38,  558,   38,   38,  716,  263,   38,
       38,  559,  561,   38,   38,   38,   38,   38,   38,   38,
       38,  716,  567,  562,  716,  371,  560,   38,   38,  564,
      563,  716,  569,   38,   38,  572,   38,   38,  716,  568,

       38,   38,   38,   38,   38,   38,   38,   38,  565,  566,
      571,  716,  570,   38,   38,  716,  371,   38,   38,   38,
       38,  716,  573,   38,   38,   38,   38,  716,   38,   38,
       38,   38,  575,   38,   38,   38,   38,   38,   38,  236,
       38,   38,   38,   38,  716,  236,  574,  716,  236,  716,
       38,   38,   38,   38,   38,   38,   38,   38,  236,  716,
      577,   38,   38,  263,  716,  580,  576,   38,   38,  716,
      582,  716,  578,  716,  263,  579,   38,   38,   38,   38,
      716,  236,   38,   38,  581,   38,   38,  583,  584,  585,
      716,  263,  586,   38,   38,  587,   38,   38,   38,   38,

       38,   38,  588,   38,   38,  716,   38,   38,   38,   38,
       38,   38,   38,   38,  360,  360,   38,   38,   38,   38,
      716,  589,  360,   38,   38,  599,   38,   38,  591,   38,
       38,   38,   38,  590,  716,  600,   38,   38,  593,  592,
       38,   38,  595,  596,  716,  598,  606,   38,   38,  263,
      263,  263,  594,   38,   38,   38,   38,  597,   38,   38,
      716,  604,   38,   38,   38,   38,  716,  601,  716,  605,
      603,  602,   38,   38,   38,   38,  607,   38,   38,  613,
       38,   38,   38,   38,   38,   38,  608,   38,   38,  609,
       38,   38,   38,   38,  610,   38,   38,   38,   38,   38,

       38,  612,  716,  611,   38,   38,  716,  614,  716,  236,
      615,   38,   38,   38,   38,  716,  617,  618,   38,   38,
      616,   38,   38,   38,   38,   38,   38,  619,  716,  263,
       38,   38,   38,   38,   38,   38,   38,   38,  620,   38,
       38,   38,   38,   38,   38,  623,  360,  716,  622,  621,
      624,   38,   38,   38,   38,  360,   38,   38,  716,   38,
       38,   38,   38,   38,   38,   38,   38,  625,  716,  631,
      626,  716,  627,   38,   38,  716,  633,  628,  716,  630,
       38,   38,  371,  629,  716,  632,   38,   38,  263,   38,
       38,   38,   38,   38,   38,   38,   38,  716,  263,  716,

      263,  716,  636,  634,  635,  716,  637,   38,   38,  639,
       38,   38,  236,  716,  638,  642,  236,  716,   38,   38,
       38,   38,   38,   38,  716,  640,   38,   38,   38,   38,
      716,  644,  647,   38,   38,  716,  641,  716,  643,   38,
       38,  716,  645,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  646,   38,   38,   38,   38,   38,   38,
       38,   38,  716,  648,   38,   38,   38,   38,  716,  360,
       38,   38,  716,  649,   38,   38,  651,   38,   38,  716,
      650,   38,   38,   38,   38,  716,  655,  716,  652,  716,
      656,  657,   38,   38,   38,   38,  716,  263,   38,   38,

      653,  654,  716,  263,  716,  660,   38,   38,  716,  659,
       38,   38,  716,  658,   38,   38,  236,   38,   38,  661,
       38,   38,  263,  716,   38,   38,  662,   38,   38,   38,
       38,   38,   38,  665,   38,   38,  716,  663,  716,  664,
      716,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  666,  716,   38,   38,  716,  627,  716,  667,  669,
      716,   38,   38,   38,   38,   38,   38,  627,   38,   38,
      670,   38,   38,  263,  716,  668,  671,  673,  716,  672,
      675,  677,   38,   38,  716,  674,   38,   38,  236,   38,
       38,  678,   38,   38,   38,   38,   38,   38,  716,  676,

      236,   38,   38,   38,   38,   38,   38,  680,   38,   38,
      679,   38,   38,   38,   38,  684,   38,   38,  681,   38,
       38,  627,   38,   38,  682,  360,  360,  360,   38,   38,
       38,   38,  716,  263,   38,   38,  716,  627,   38,   38,
      716,  683,   38,   38,  263,   38,   38,  688,  685,  236,
       38,   38,   38,   38,   38,   38,  686,   38,   38,  687,
      689,  690,  692,   38,   38,   38,   38,  263,   38,   38,
       38,   38,  716,  691,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  716,  703,  696,  698,
       38,   38,  693,  695,  716,  697,  694,   38,   38,   38,

       38,   38,   38,   38,   38,  699,   38,   38,  716,  704,
       38,   38,   38,   38,  700,  716,  701,  706,  716,  707,
       38,   38,  702,   38,   38,   38,   38,  716,  236,   38,
       38,  716,  705,   38,   38,  708,  716,  709,  716,  716,
      263,  716,  263,  711,  716,  712,  716,  716,  716,  263,
      710,  263,  716,  716,  716,  716,  716,  713,  716,  714,
      716,  716,  716,  716,  263,  716,  716,  716,  716,  716,
      716,  716,  263,  716,  715,   36,   36,  716,  716,  716,
       36,   39,   39,   39,   39,   39,   39,   39,   77,   77,
       77,   77,   77,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   84,  716,   84,   84,   84,   84,   84,   84,
       84,   85,  716,   85,   87,   87,  716,   87,   38,   38,
       38,   38,   38,   38,   38,    3,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716

    } ;

static const flex_int16_t yy_chk[2692] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    7,    5,    8,    7,
        9,   10,   10,   11,   11,   12,   12,   16,   16,   14,
       14,   39,   39,   17,   17,   20,   20,   83,   13,   13,
       28,   28,   82,   15,   15,   36,   33,   18,   18,   19,

       19,    3,   21,   21,   22,   22,   15,   25,   25,   10,
       26,   26,    0,   35,   30,   30,   10,   10,   11,    0,
       12,   11,    0,   12,    8,   14,    9,   13,   15,   12,
       17,   13,   18,   20,   19,   35,   15,   21,   28,   22,
       18,   15,   19,   23,   23,   18,   25,   24,   24,   30,
       21,   36,    0,   19,   29,   29,   31,   31,   32,    0,
       32,   26,   40,   40,   41,   41,    0,   29,   42,   42,
       23,   43,   43,    0,   24,   44,   44,    0,   23,   45,
       45,   48,   48,   31,    0,   23,   24,    0,   23,   29,
       46,   46,   23,    0,   23,   31,   23,    0,   24,   29,

       40,   47,   47,   24,   42,   49,   49,   31,   50,   50,
       43,   52,   52,   41,   51,   51,   53,   53,   55,   55,
       59,   59,   45,   54,   54,    0,   44,   56,   56,    0,
       48,   58,   58,   48,    0,   46,   51,   57,   57,    0,
       60,   60,   61,   61,   85,   49,   47,   62,   62,   63,
       63,   50,   64,   64,   65,   65,   52,   53,   49,   51,
        0,   54,   66,   66,   68,   68,   85,   59,   56,   59,
       55,    0,   58,   65,   57,   67,   67,   69,   69,    0,
       70,   70,   71,   71,   58,   60,   74,   74,   58,   72,
       72,    0,   63,   61,   73,   73,   75,   75,    0,   64,

       62,   76,   76,   78,   78,   79,   79,    0,   66,    0,
       67,    0,   68,   80,   80,    0,   69,   70,    0,   72,
        0,   71,   81,   81,    0,   74,   88,   88,   89,   89,
       90,   90,   91,   91,   92,   92,   76,   93,   93,   94,
       94,   96,   96,   72,   95,   95,    0,   75,    0,   78,
        0,   73,    0,   79,   97,   97,   98,   98,    0,   81,
       99,   99,  100,  100,    0,   80,    0,  101,  101,    0,
       89,    0,   92,   90,    0,  102,  102,   88,    0,   91,
      105,  105,  103,  103,  104,  104,   93,   94,    0,   95,
      106,  106,  107,  107,   96,  101,   98,  103,  103,  103,

      108,  108,   99,  109,  109,  113,  113,   97,  110,  110,
      103,  103,    0,  103,  100,    0,  111,  111,  108,  101,
      102,  110,    0,  104,    0,  112,  112,  107,  114,  114,
        0,  110,  106,  105,  111,  115,  115,  116,  116,  117,
      117,    0,  109,  112,    0,  118,  118,    0,  112,  119,
      119,  120,  120,  121,  121,  122,  122,    0,  113,  118,
        0,  123,  123,  124,  124,  125,  125,  126,  126,  127,
      127,    0,  115,    0,  114,  123,  128,  128,  129,  129,
      117,    0,  125,    0,  116,  130,  130,  131,  131,  120,
      132,  132,  122,  133,  133,  136,  136,    0,  119,  135,

      135,    0,  121,    0,  125,  137,  137,    0,  127,    0,
      124,  138,  138,  139,  139,  140,  140,  141,  141,    0,
      126,    0,  131,  142,  142,  143,  143,  129,    0,  128,
      136,  144,  144,    0,  130,  133,  145,  145,  135,  146,
      146,  140,  132,    0,  137,  144,  142,  147,  147,  138,
      149,  149,  139,  148,  148,  150,  150,  151,  151,  152,
      152,  153,  153,    0,  140,  154,  154,  143,  141,    0,
      148,  155,  155,  149,  156,  156,  157,  157,  146,  158,
      158,  159,  159,    0,  160,  160,  161,  161,  162,  162,
      145,    0,  148,  163,  163,    0,  151,  164,  164,  147,

      154,    0,  157,  150,  165,  165,  152,  166,  166,    0,
      155,  167,  167,    0,  153,  168,  168,  169,  169,  170,
      170,  171,  171,  172,  172,    0,  159,  160,  173,  173,
        0,  156,  158,  176,  176,  162,  163,  161,  174,  174,
      164,    0,  166,  175,  175,  177,  177,  165,  178,  178,
      168,    0,  172,    0,  167,  179,  179,  180,  180,  169,
      171,  181,  181,  182,  182,    0,  184,  184,  186,  186,
      189,  189,  170,  173,  185,  185,    0,  174,  187,  187,
      188,  188,  175,    0,  189,  178,    0,  176,  189,    0,
      177,  190,  190,  192,  192,  193,  193,  189,    0,  189,

      194,  194,  182,  191,  191,  195,  195,    0,  181,  184,
        0,  180,  183,  183,    0,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  187,    0,  185,  191,  196,
      196,    0,  188,  197,  197,    0,  195,  195,  190,    0,
      193,  198,  198,  194,  192,  199,  199,  197,  200,  200,
      201,  201,  202,  202,  203,  203,  204,  204,  205,  205,
      206,  206,  209,  209,    0,  207,  207,  208,  208,  210,
      210,  211,  211,  213,  213,  214,  214,  196,  215,  215,
      216,  216,  218,  218,  219,  219,  198,  217,  217,  220,
      220,  221,  221,  201,    0,  206,    0,  199,  206,  200,

      207,  204,  203,  208,  213,  205,  222,  222,  210,  223,
      223,  224,  224,  209,  211,  212,  212,  225,  225,  221,
      214,  215,    0,  216,  226,  226,    0,  218,  212,  219,
        0,  212,  212,  212,    0,  225,  217,  223,  220,  224,
        0,  212,  212,  212,  212,  227,  227,  228,  228,  229,
      229,  222,  230,  230,  231,  231,  232,  232,  212,  233,
      233,  234,  234,  226,  235,  235,  236,  236,  237,    0,
      228,  238,  238,  237,  237,  237,  237,  229,    0,  234,
      239,  239,  240,  240,  227,  239,  239,  239,  241,  241,
      242,  242,    0,  231,  243,  243,    0,  230,    0,  232,

      244,  244,  245,  245,  246,  246,  247,  247,  248,  248,
      233,  249,  249,  250,  250,    0,  238,  251,  251,  252,
      252,  235,    0,  248,    0,  240,  253,  253,  254,  254,
      255,  255,    0,  256,  256,  242,  257,  257,    0,  244,
      241,  245,  258,  258,  259,  259,  249,    0,  243,    0,
      260,  260,    0,  257,    0,  247,  251,  246,  261,  261,
      250,  263,  263,    0,  253,  262,  262,  264,  264,  255,
      252,  254,  256,    0,  265,  265,  266,  266,  267,  267,
      268,  268,  259,  270,  270,  269,  269,  271,  271,  272,
      272,  273,  273,  274,  274,  275,  275,  258,  260,  276,

      276,  262,  277,  277,  278,  278,  279,  279,  280,  280,
      261,  281,  281,  282,  282,    0,  267,    0,  264,  265,
      283,  283,  284,  284,  272,    0,  270,    0,  274,  266,
        0,  269,    0,  273,  271,  282,    0,  268,  269,  273,
        0,  276,    0,  280,  275,  285,  285,  278,    0,  277,
      286,  286,  287,  287,  288,  288,    0,  276,    0,  279,
      289,  289,    0,  281,  290,  290,    0,  285,  291,  291,
      292,  292,    0,  283,    0,  284,  293,  293,  294,  294,
        0,  295,  295,  296,  296,  286,  297,  297,  298,  298,
        0,  299,  299,  288,    0,  287,    0,  289,    0,  300,

      300,  301,  301,  289,  302,  302,  303,  303,    0,  289,
      304,  304,  290,  300,    0,  294,  295,  305,  305,  306,
      306,  292,  307,  307,  293,  291,  299,  298,  308,  308,
      296,  297,  309,  309,  310,  310,  311,  311,  313,  313,
      301,  312,  312,  314,  314,  315,  315,  316,  316,  306,
      306,  306,  317,  317,  319,  319,    0,  318,  318,  311,
        0,  307,  321,  321,  320,  320,    0,  305,  322,  322,
      324,  324,  309,  323,  323,  308,  325,  325,  326,  326,
      327,  327,  330,  330,  314,  313,  310,  320,    0,  312,
      316,  317,  318,  328,  328,    0,  315,  329,  329,  331,

      331,  319,    0,  332,  332,  333,  333,  322,    0,  321,
      334,  334,  323,  330,  335,  335,    0,  336,  336,  325,
        0,  324,    0,  326,  337,  337,  338,  338,  339,  339,
      340,  340,  328,  327,  341,  341,  329,    0,  331,  332,
      342,  342,  343,  343,    0,  344,  344,  345,  345,  335,
      334,  346,  346,  347,  347,  348,  348,    0,  333,  349,
      349,  334,  336,  350,  350,  351,  351,  337,    0,  340,
      352,  352,    0,  341,    0,  339,  353,  353,  338,  354,
      354,  356,  356,  343,  344,    0,  345,  355,  355,  342,
      357,  357,  358,  358,  348,    0,  346,    0,  349,  359,

      359,  347,  350,  360,  360,  361,  361,  362,  362,  363,
      363,  364,  364,  351,  366,  366,  352,  367,  367,    0,
      354,    0,  355,  368,  368,  369,  369,  370,  370,    0,
      365,  365,  366,  358,    0,  353,  371,  371,  372,  372,
      356,  357,  362,  361,    0,  373,  373,  365,  365,  364,
      374,  374,  359,  365,  367,    0,  365,  365,  375,  375,
      363,    0,  365,  365,  376,  376,  377,  377,  368,  378,
      378,  379,  379,  380,  380,  381,  381,  382,  382,  383,
      383,  370,  373,  384,  384,  372,  385,  385,  386,  386,
      388,  388,    0,  375,  387,  387,  389,  389,  390,  390,

        0,  391,  391,  374,    0,  377,  384,  392,  392,  376,
      393,  393,  382,  381,  383,  394,  394,  387,    0,  395,
      395,    0,  378,    0,  379,  380,    0,  386,  396,  396,
        0,  397,  397,  399,  399,  389,  398,  398,    0,  385,
      400,  400,    0,  390,  391,    0,  392,  388,  401,  401,
      393,  402,  402,    0,  394,  395,    0,  403,  403,  405,
      405,    0,  404,  404,  406,  406,  407,  407,  409,  409,
      399,  408,  408,  396,  397,  404,    0,  398,  404,  404,
      410,  410,  411,  411,  412,  412,    0,  401,  404,    0,
      404,  413,  413,  400,  414,  414,  415,  415,  416,  416,

      417,  417,  418,  418,  419,  419,  409,  402,  403,  420,
      420,    0,  405,  421,  421,  416,    0,  407,    0,  406,
        0,  411,  408,  422,  422,    0,  420,  423,  423,  410,
      412,    0,  420,  414,  424,  424,  413,  425,  425,  415,
        0,  418,  426,  426,    0,  427,  427,  428,  428,  419,
      429,  429,  430,  430,  417,  431,  431,    0,  422,    0,
      421,    0,  423,  427,  432,  432,  433,  433,    0,  424,
      434,  434,  435,  435,  437,  437,  425,  422,  436,  436,
      438,  438,  428,  433,  439,  439,  440,  440,    0,  441,
      441,  430,    0,  426,  431,  436,  442,  442,  443,  443,

      445,  445,  432,  429,  444,  444,  446,  446,  447,  447,
      448,  448,    0,  437,    0,  449,  449,  450,  450,  438,
      435,    0,  440,  434,  441,  451,  451,  444,  452,  452,
      453,  453,  454,  454,    0,  455,  455,  439,  456,  456,
        0,  457,  457,  459,  459,  446,  443,  458,  458,  460,
      460,  445,  449,    0,  442,  447,  461,  461,  462,  462,
      463,  463,  450,    0,  448,  464,  464,  465,  465,  453,
      455,  466,  466,  451,  467,  467,    0,  456,    0,  464,
        0,  452,  468,  468,  469,  469,  454,  457,    0,  459,
      458,  470,  470,  471,  471,  466,    0,  460,    0,  463,

      472,  472,  473,  473,    0,  461,  474,  474,    0,  462,
      475,  475,  465,  467,  476,  476,  477,  477,  469,  478,
      478,  468,  479,  479,  480,  480,    0,  481,  481,  482,
      482,  485,  485,  483,  483,    0,  484,  484,  486,  486,
      471,  473,  487,  487,  470,  475,  488,  488,    0,  476,
        0,  472,    0,  474,  489,  489,  490,  490,    0,  477,
      491,  491,    0,  488,  493,  493,  478,  481,  483,  492,
      492,    0,  482,  484,  479,    0,  480,  494,  494,  485,
      495,  495,  496,  496,    0,  486,  497,  497,  498,  498,
      499,  499,  500,  500,  494,  490,  501,  501,  502,  502,

        0,  489,  503,  503,  504,  504,    0,  505,  505,  506,
      506,  491,  507,  507,  508,  508,  492,  509,  509,  495,
        0,  493,  510,  510,  511,  511,  498,  496,  512,  512,
      513,  513,    0,  514,  514,  515,  515,    0,  499,  497,
      516,  516,    0,  501,    0,  500,  505,  517,  517,  506,
      518,  518,  502,    0,  503,  507,    0,  504,  510,  508,
      519,  519,  520,  520,  511,  521,  521,    0,  509,  522,
      522,  512,  514,  523,  523,  524,  524,  525,  525,  526,
      526,    0,  521,  515,    0,  516,  513,  527,  527,  518,
      517,    0,  522,  528,  528,  526,  529,  529,    0,  521,

      530,  530,  531,  531,  532,  532,  533,  533,  519,  520,
      524,    0,  523,  534,  534,    0,  525,  535,  535,  536,
      536,    0,  527,  537,  537,  538,  538,    0,  539,  539,
      540,  540,  529,  541,  541,  542,  542,  544,  544,  531,
      543,  543,  545,  545,    0,  530,  528,    0,  532,    0,
      546,  546,  547,  547,  548,  548,  549,  549,  533,    0,
      535,  550,  550,  538,    0,  540,  534,  551,  551,    0,
      542,    0,  536,    0,  537,  539,  552,  552,  553,  553,
        0,  545,  554,  554,  541,  555,  555,  543,  544,  546,
        0,  547,  548,  556,  556,  549,  557,  557,  558,  558,

      559,  559,  551,  560,  560,    0,  561,  561,  562,  562,
      563,  563,  564,  564,  550,  552,  565,  565,  566,  566,
        0,  553,  554,  567,  567,  564,  569,  569,  556,  570,
      570,  578,  578,  555,    0,  564,  568,  568,  558,  557,
      571,  571,  560,  561,    0,  563,  570,  572,  572,  568,
      568,  568,  559,  573,  573,  574,  574,  562,  575,  575,
        0,  569,  576,  576,  577,  577,    0,  565,    0,  569,
      567,  566,  579,  579,  580,  580,  571,  581,  581,  578,
      582,  582,  583,  583,  584,  584,  572,  585,  585,  573,
      586,  586,  587,  587,  574,  588,  588,  589,  589,  590,

      590,  576,    0,  575,  591,  591,    0,  579,    0,  577,
      580,  592,  592,  593,  593,    0,  582,  583,  594,  594,
      581,  595,  595,  596,  596,  597,  597,  584,    0,  586,
      598,  598,  599,  599,  600,  600,  602,  602,  585,  601,
      601,  603,  603,  604,  604,  589,  590,    0,  588,  587,
      592,  605,  605,  608,  608,  591,  606,  606,    0,  607,
      607,  609,  609,  610,  610,  613,  613,  593,    0,  600,
      594,    0,  595,  611,  611,    0,  603,  596,    0,  599,
      616,  616,  598,  597,    0,  601,  612,  612,  602,  614,
      614,  615,  615,  617,  617,  618,  618,    0,  605,    0,

      604,    0,  608,  606,  607,    0,  609,  619,  619,  612,
      620,  620,  611,    0,  610,  616,  613,    0,  621,  621,
      622,  622,  623,  623,    0,  614,  624,  624,  625,  625,
        0,  618,  621,  626,  626,    0,  615,    0,  617,  627,
      627,    0,  619,  628,  628,  629,  629,  630,  630,  631,
      631,  632,  632,  620,  633,  633,  634,  634,  635,  635,
      636,  636,    0,  622,  637,  637,  638,  638,    0,  623,
      639,  639,    0,  624,  640,  640,  626,  641,  641,    0,
      625,  642,  642,  643,  643,    0,  632,    0,  628,    0,
      633,  634,  644,  644,  645,  645,    0,  635,  646,  646,

      630,  631,    0,  637,    0,  639,  647,  647,    0,  638,
      648,  648,    0,  636,  649,  649,  641,  650,  650,  640,
      651,  651,  643,    0,  652,  652,  642,  653,  653,  654,
      654,  655,  655,  646,  656,  656,    0,  644,    0,  645,
        0,  657,  657,  658,  658,  659,  659,  660,  660,  661,
      661,  647,    0,  662,  662,    0,  650,    0,  648,  652,
        0,  663,  663,  664,  664,  665,  665,  649,  666,  666,
      653,  667,  667,  654,    0,  651,  655,  657,    0,  656,
      659,  662,  668,  668,    0,  658,  669,  669,  661,  670,
      670,  664,  671,  671,  672,  672,  673,  673,    0,  660,

      663,  674,  674,  675,  675,  676,  676,  666,  677,  677,
      665,  678,  678,  680,  680,  674,  682,  682,  667,  679,
      679,  668,  681,  681,  670,  681,  681,  681,  683,  683,
      684,  684,    0,  672,  685,  685,    0,  669,  686,  686,
        0,  673,  687,  687,  671,  688,  688,  679,  675,  676,
      689,  689,  690,  690,  691,  691,  677,  692,  692,  678,
      680,  682,  685,  693,  693,  694,  694,  683,  695,  695,
      696,  696,    0,  684,  697,  697,  698,  698,  699,  699,
      700,  700,  701,  701,  702,  702,    0,  696,  689,  691,
      703,  703,  686,  688,    0,  690,  687,  704,  704,  705,

      705,  706,  706,  707,  707,  692,  708,  708,    0,  697,
      709,  709,  711,  711,  693,    0,  694,  700,    0,  701,
      710,  710,  695,  712,  712,  713,  713,    0,  698,  714,
      714,    0,  699,  715,  715,  702,    0,  703,    0,    0,
      706,    0,  707,  708,    0,  709,    0,    0,    0,  704,
      705,  711,    0,    0,    0,    0,    0,  710,    0,  712,
        0,    0,    0,    0,  713,    0,    0,    0,    0,    0,
        0,    0,  715,    0,  714,  717,  717,    0,    0,    0,
      717,  718,  718,  718,  718,  718,  718,  718,  719,  719,
      719,  719,  719,  720,  720,  720,  720,  720,  720,  720,

      720,  720,  721,    0,  721,  721,  721,  721,  721,  721,
      721,  722,    0,  722,  723,  723,    0,  723,  724,  724,
      724,  724,  724,  724,  724,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716

    } ;

static const flex_int16_t yy_rule_linenum[19] =
    {   0,
       77,   78,   80,   81,   82,   83,   84,   85,   86,   91,
       92,   95,  100,  106,  112,  120,  125,  130
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"

#include <string>

#include "scanner.h"

/* import the parser's token type into a local typedef */
typedef example::Parser::token token;
typedef example::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1327 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 49 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1340 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1342 "scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 66 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


#line 69 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

#line 1546 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 717 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 716 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 19 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 19 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 20 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 77 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 78 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 80 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 82 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 83 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 100 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 106 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
/* gobble up white-spaces */
case 16:
YY_RULE_SETUP
#line 120 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 125 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->lines(yyleng); yylloc->step();
}
	YY_BREAK
/* pass all other characters up to bison */
case 18:
YY_RULE_SETUP
#line 130 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        return static_cast<token_type>(*yytext);
    }
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 19:
YY_RULE_SETUP
#line 136 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
ECHO;
	YY_BREAK
#line 1743 "scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Examplefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Examplefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Examplerealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Examplerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 717 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 717 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 716);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Examplealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Examplealloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Examplefree((void *) b->yy_ch_buf  );

	Examplefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Examplealloc(new_size  );

		else
			(yy_start_stack) = (int *) Examplerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Examplealloc (yy_size_t  size )
{
			return malloc(size);
}

void *Examplerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Examplefree (void * ptr )
{
			free( (char *) ptr );	/* see Examplerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 136 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


namespace example {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : ExampleFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int ExampleFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int ExampleFlexLexer::yywrap()
{
    return 1;
}

