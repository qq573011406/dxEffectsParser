#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ExampleFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc Examplealloc

    #define yyrealloc Examplerealloc

    #define yyfree Examplefree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *Examplealloc ( yy_size_t  );
void *Examplerealloc ( void *, yy_size_t  );
void Examplefree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[904] =
    {   0,
        0,    0,    0,    0,   24,   22,   20,   21,   22,   16,
       16,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,    3,    4,    3,   20,    0,    6,
       17,   16,    0,   19,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,    3,    3,    0,    0,

        6,    6,   17,   17,   19,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        3,    5,    6,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   14,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,    8,   18,    3,    6,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   15,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   13,   13,   18,   18,   18,   18,   18,
        3,    6,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   13,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   10,   11,   12,   18,
        3,    6,   18,   18,   18,   18,   13,   18,   18,   13,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   13,   18,   18,   18,   18,   18,   18,
       13,   18,   18,   18,   18,   18,   18,    9,   18,    3,
        6,   13,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,    3,    6,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   13,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,    7,    3,    6,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,    3,    6,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   13,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,    3,    6,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   13,   18,   18,    3,    6,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   13,   18,   13,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   13,   18,    3,    6,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        3,    6,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,    2,    6,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   13,   18,    1,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   13,   18,   18,   18,   18,
       18,   18,   18,   13,   18,   18,   13,   18,   18,   18,

       18,   18,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
       28,   34,   35,   36,   37,   38,   39,   28,   28,   40,
        1,    1,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        8,    6,    6,    6,    6,    6,    7,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    9,    6,    6
    } ;

static const flex_int16_t yy_base[914] =
    {   0,
        0,    0,   65,   67,  330, 3234,   70, 3234,   71,   70,
       71,   74,   76,   78,   80,   83,   91,   85,   87,  101,
      106,   89,  108,  117,  146,  115,  148,  110,  169,    0,
      164,  171,   97,  166,    0, 3234,  320,   97,  319,  294,
       64,   95,    0,    0,   99,  176,  178,  180,  190,  195,
      203,  208,  210,  212,  220,  222,  224,  226,  231,  233,
      237,  235,  239,  241,  243,  245,  253,  255,  260,  264,
      266,  269,  282,  286,  290,  303,  292,  305,  312,  316,
      320,  325,  329,  332,  334,  336,  338,  341,  343,  345,
      347,    0,  349,  357,  361,  364,    0,  291,  308,  299,

        0,  276,  157, 3234,    0,  366,  368,  370,  373,  378,
      382,  384,  389,  393,  395,  398,  403,  405,  408,  412,
      420,  442,  423,  425,  427,  429,  431,  436,  451,  455,
      460,  445,  468,  481,  485,  487,  489,  491,  493,  495,
      497,  501,  503,  505,  507,  510,  512,  517,  522,  514,
      526,  530,  537,  544,  541,  550,  546,  555,  557,  560,
      274, 3234,  266,  564,  566,  570,  573,  575,  578,  581,
      585,  592,  598,  600,  605,  617,  619,  622,  624,  626,
      628,  630,  633,  635,  642,  644,  650,  646,  652,  654,
      658,  663,  665,  669,  674,  680,  683,  685,  689,  691,

      693,  695,  704,  706,  719,  714,  722,  724,  728,  730,
      733,  736,  739,  741,  745,  750,  755,  757,  798,  774,
      778,  759,  768,  765,  772,  780,  259,  261,  782,  817,
      791,  787,  821,  823,  826,  832,  837,  841,  848,  851,
      853,  855,  857,  859,  864,  866,  877,  879,  881,  883,
      885,  887,  889,  939,  892,  894,  899,  902,  896,  904,
      911,  909,  921,  928,  930,  934,  936,  944,  953,  948,
      961,  972,  976,  978,  980,  984,  986,  988,  990,  992,
      994,  996,  998, 1004, 1013, 1008, 1022, 1025, 1034, 1031,
      257,  237, 1036, 1044, 1046, 1050, 1056, 1058, 1060, 1063,

     1065, 1067, 1069, 1073, 1076, 1078, 1083, 1080, 1085, 1088,
     1091, 1101, 1103, 1094, 1112, 1114, 1121, 1123, 1128, 1132,
     1136, 1139, 1144, 1146, 1148, 1150, 1156, 1154, 1158, 1161,
     1166, 1163, 1172, 1174, 1178, 1180, 1182, 1187, 1190, 1192,
     1195, 1208, 1216, 1219, 1224, 1226, 1228, 1233, 1236, 1238,
     1242, 1244, 1248, 1253, 1256, 1258, 1261, 1267, 1270, 1273,
     1275, 1277, 1280, 1282, 1294, 1284, 1299, 1302, 1305, 1314,
      227,  243, 1316, 1318, 1325, 1327, 1329, 1331, 1334, 1337,
     1339, 1344, 1341, 1350, 1352, 1354, 1356, 1358, 1363, 1369,
     1373, 1377, 1379, 1381, 1383, 1385, 1395, 1401, 1403, 1405,

     1408, 1410, 1412, 1414, 1422, 1416, 1424, 1430, 1427, 1433,
     1437, 1446, 1453, 1457, 1460, 1465, 1467, 1472, 1478, 1483,
     1487, 1489, 1492, 1494, 1496, 1501, 1506, 1508, 1510, 1512,
     1515, 1519, 1524, 1528, 1531, 1535, 1533, 1543, 1550, 1546,
     1558, 1552, 1548, 1560, 1564, 1580, 1591, 1593, 1596,  235,
      221, 1598, 1601, 1607, 1609, 1611, 1614, 1617, 1619, 1621,
     1623, 1625, 1631, 1633, 1635, 1637, 1641, 1643, 1654, 1658,
     1660, 1667, 1669, 1671, 1673, 1680, 1682, 1684, 1692, 1694,
     1696, 1698, 1702, 1707, 1704, 1709, 1714, 1716, 1734, 1718,
     1726, 1729, 1736, 1738, 1740, 1752, 1754, 1756, 1764, 1766,

     1770, 1774, 1779, 1784, 1786, 1793, 1797, 1799, 1803, 1807,
     1809, 1812, 1817, 1819, 1821, 1828, 1830, 1834, 1836, 1840,
     1846, 1850, 1853, 1858, 1855,  202,  200, 1860, 1864, 1867,
     1869, 1873, 1875, 1877, 1883, 1885, 1888, 1892, 1896, 1905,
     1907, 1909, 1911, 1915, 1917, 1920, 1923, 1926, 1929, 1936,
     1938, 1942, 1944, 1948, 1950, 1953, 1955, 1960, 1962, 1965,
     1970, 1973, 1977, 1980, 1994, 1988, 1996, 2002, 2004, 2006,
     2009, 2014, 2017, 2020, 2024, 2029, 2031, 2033, 2037, 2040,
     2043, 2046, 2048, 2052, 2050, 2055, 2068, 2071, 2074, 2078,
     2081, 2083, 2089, 2095,  189,  183, 2101, 2105, 2107, 2109,

     2111, 2113, 2124, 2115, 2119, 2129, 2131, 2133, 2135, 2138,
     2141, 2143, 2150, 2155, 2158, 2160, 2165, 2167, 2169, 2172,
     2174, 2181, 2183, 2185, 2187, 2192, 2194, 2196, 2202, 2200,
     2206, 2209, 2216, 2220, 2225, 2222, 2230, 2234, 2238, 2241,
     2247, 2250, 2252, 2263, 2265, 2267, 2271, 2273, 2275, 2279,
     2281, 2284, 2286, 2290, 2292, 2294, 2296, 2298,  168,  148,
     2300, 2306, 2308, 2311, 2315, 2320, 2347, 2330, 2326, 2334,
     2340, 2352, 2354, 2356, 2358, 2363, 2367, 2369, 2371, 2373,
     2376, 2381, 2378, 2383, 2385, 2388, 2396, 2390, 2399, 2406,
     2401, 2404, 2410, 2412, 2431, 2420, 2436, 2442, 2447, 2449,

     2451, 2457, 2462, 2465, 2467, 2470, 2472, 2474, 2476, 2478,
     2480, 2485,  124,  142, 2482, 2490, 2492, 2498, 2500, 2502,
     2506, 2511, 2515, 2519, 2523, 2532, 2534, 2543, 2545, 2548,
     2550, 2553, 2556, 2560, 2562, 2564, 2566, 2569, 2571, 2573,
     2575, 2577, 2579, 2585, 2590, 2593, 2595, 2599, 2601, 2603,
     2611, 2620, 2623, 2630, 2632, 2640, 2636, 2645,  123,  121,
     2652, 2657, 2659, 2661, 2663, 2665, 2667, 2669, 2671, 2674,
     2676, 2678, 2680, 2686, 2690, 2692, 2696, 2699, 2705, 2707,
     2711, 2714, 2719, 2721, 2723, 2728, 2731, 2735, 2737, 2740,
     2744, 2746, 2748,   94,   95, 2752, 2757, 2761, 2764, 2766,

     2768, 2774, 2776, 2780, 2784, 2786, 2788, 2791, 2800, 2802,
     2805, 2811, 2816, 2818, 2820, 2824, 2828, 2831, 2833, 2835,
       96,   82, 2837, 2840, 2842, 2846, 2849, 2853, 2856, 2858,
     2860, 2870, 2872, 2878, 2880, 2887, 2889, 2894, 2891, 2899,
     2901, 2903,    0,   69, 2909, 2911, 2914, 2916, 2918, 2924,
     2927, 2935, 2931, 2939, 2941, 2946, 2950,    0, 2952, 2954,
     2966, 2968, 2973, 2976, 2978, 2984, 2986, 2988, 2990, 2992,
     2994, 2996, 2998, 3001, 3003, 3011, 3013, 3018, 3021, 3023,
     3027, 3032, 3029, 3038, 3040, 3079, 3042, 3048, 3050, 3061,
     3063, 3053, 3068, 3055, 3075, 3077, 3111, 3088, 3098, 3106,

     3108, 3119, 3234, 3165, 3171, 3178, 3183, 3192, 3201, 3210,
     3215, 3217, 3224
    } ;

static const flex_int16_t yy_def[914] =
    {   0,
      903,    1,  904,  904,  903,  903,  903,  903,  903,  905,
      905,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  907,
      906,  906,  906,  906,  908,  903,  908,  903,  909,  910,
      911,  905,  912,  913,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  907,  906,  906,  906,  906,  908,  908,  909,  909,

      910,  910,  911,  903,  913,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      908,  903,  910,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  908,  910,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      908,  910,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      908,  910,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  908,
      910,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  908,  910,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  908,  910,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  908,  910,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  908,  910,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  908,  910,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  908,  910,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      908,  910,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  908,  910,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  910,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,    0,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903
    } ;

static const flex_int16_t yy_nxt[3302] =
    {   0,
        6,    7,    8,    7,    6,    6,    6,    9,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   13,
       14,   15,   16,   17,   18,   18,   19,   18,   20,   21,
       22,   18,   23,   24,   25,   26,   18,   27,   28,   29,
       30,   18,   18,   31,   18,   18,   32,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   33,   18,   18,   18,
       34,   18,   18,   18,   18,   18,   18,   36,   36,   36,
       36,   38,   37,   38,   37,   39,   41,   41,   40,   44,
       44,   44,   44,   44,   44,   44,   44,  104,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   38,  858,

       38,   41,   44,   44,   44,   44,   44,   44,  844,   58,
      104,   44,   44,   44,   44,   44,   44,  843,   46,  822,
       44,   44,   44,   44,  821,   55,   47,   48,   49,   56,
       52,   50,   58,   53,   43,  903,   57,   51,   95,   54,
       59,   61,   62,  795,   68,  794,   60,   65,   82,   69,
       63,   44,   44,   44,   44,   66,   64,   70,   73,  903,
       83,  760,   74,   71,  759,   87,   72,   67,   88,   44,
       44,   44,   44,   82,   44,   44,   44,   44,   84,   75,
      104,   44,   44,   44,   44,   44,   44,   76,  714,   58,
      713,   89,   90,   85,   77,   44,   44,   86,   78,   82,

       44,   44,   79,  104,   80,  660,   81,   91,   44,   44,
      659,   96,   58,   44,   44,   44,   44,   44,   44,   93,
      106,  596,  108,   94,   82,   44,   44,   44,   44,   44,
       44,   44,   44,  595,  107,  109,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,  527,  110,  120,  526,  111,  112,   44,   44,
       44,   44,  113,  451,  114,   44,   44,  450,  117,   44,
       44,   44,   44,  119,   44,   44,  115,  372,  120,  116,
      122,  123,  118,  121,  126,  371,  125,   44,   44,  292,
      127,   44,   44,  291,  124,   44,   44,   44,   44,  130,

      228,  131,  227,  128,  163,  132,  162,  129,   44,   44,
       44,   44,  100,  133,  140,  136,  161,   44,   44,  102,
      134,   44,   44,  100,  137,   44,   44,   98,  135,  903,
       44,   44,  903,  142,   44,   44,  138,   44,   44,   44,
       44,   44,   44,   44,   44,  139,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  141,  144,  903,  145,
      143,  147,   44,   44,  903,  146,   44,   44,  903,   44,
       44,   44,   44,   44,   44,   44,   44,  149,   44,   44,
      903,  151,  153,   44,   44,  903,  147,   44,   44,   44,
       44,  903,  150,  148,   44,   44,  152,  154,   44,   44,

       44,   44,  157,   44,   44,  156,  155,  160,   44,   44,
       44,   44,  158,   44,   44,  903,  165,   44,   44,  166,
      159,  903,  168,  903,  164,   44,   44,  167,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,  169,  903,
      170,   44,   44,  903,  171,  172,  178,   44,   44,  175,
       44,   44,  903,  176,  190,  173,   44,   44,  174,  903,
       44,   44,  180,  181,  182,   44,   44,  177,  186,  192,
      189,  178,  179,   44,   44,  188,  183,  184,  194,  185,
      193,  191,  903,  195,  903,  187,   44,   44,  903,  196,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,  903,  197,   44,   44,   44,   44,
       44,   44,   44,   44,  205,   44,   44,   44,   44,   44,
       44,  198,   44,   44,  199,  903,  210,   44,   44,  903,
      200,   44,   44,  903,  212,   44,   44,  213,  203,  202,
      903,  201,   44,   44,  903,  207,   44,   44,  209,   44,
       44,   44,   44,  206,  204,   44,   44,  212,  903,  208,
       44,   44,   44,   44,  211,   44,   44,  215,  903,   44,
       44,   44,   44,  903,  216,   44,   44,  214,   44,   44,
       44,   44,  218,   44,   44,  220,   44,   44,  903,  217,
       44,   44,  903,  219,  903,  221,  224,   44,   44,  222,

      234,  903,  223,   44,   44,   44,   44,  230,  226,  229,
       44,   44,  903,  235,  903,  231,  225,  232,  903,  240,
      233,  238,   44,   44,   44,   44,  903,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,  236,   44,   44,
       44,   44,  903,  237,  244,  903,  239,   44,   44,   44,
       44,   44,   44,  245,  903,   44,   44,   44,   44,   44,
       44,  903,  242,   44,   44,  903,  241,  244,   44,   44,
       44,   44,  903,  247,   44,   44,  250,  903,  243,   44,
       44,  246,  253,  903,  248,   44,   44,  251,   44,   44,
       44,   44,  903,  249,   44,   44,   44,   44,   44,   44,

       44,   44,  903,  256,  255,  903,  254,  903,  252,   44,
       44,   44,   44,  903,  259,  903,  257,  258,  260,   44,
       44,  262,  903,  261,   44,   44,  264,   44,   44,   44,
       44,  903,  263,   44,   44,   44,   44,  265,   44,   44,
      268,   44,   44,  266,   44,   44,   44,   44,  903,  269,
       44,   44,  903,  267,  271,   44,   44,  903,  270,  903,
       44,   44,   44,   44,   44,   44,  272,  273,  903,  274,
       44,   44,  903,   44,   44,  903,  277,   44,   44,   44,
       44,  903,  276,   44,   44,   44,   44,   44,   44,  275,
      282,  903,   44,   44,  278,  281,   44,   44,  903,  280,

      903,  283,  279,   44,   44,  903,  284,  285,  284,  284,
      284,  284,  284,  284,  284,  284,  286,  288,  301,  287,
      903,  284,   44,   44,  903,  289,   44,   44,   44,   44,
      903,   44,   44,  903,  290,  294,  295,   44,   44,  903,
      296,  293,   44,   44,  903,  300,   44,   44,  297,  903,
      298,  903,  299,   44,   44,  306,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  903,  311,  307,   44,
       44,   44,   44,  903,  308,  309,  903,  303,  304,  302,
      903,  305,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  310,   44,   44,   44,

       44,   44,   44,  312,   44,   44,  315,   44,   44,   44,
       44,  903,  313,  314,   44,   44,   44,   44,  317,  316,
      319,  903,  321,  320,  903,  322,   44,   44,  903,  335,
      903,  318,  324,   44,   44,   44,   44,  903,  325,   44,
       44,   44,   44,  323,   44,   44,  336,  903,  337,   44,
       44,  338,  339,   44,   44,  343,  340,  326,   44,   44,
      327,  328,  329,  341,  345,  342,   44,   44,  346,  903,
      347,  330,  331,  332,  333,  903,  349,   44,   44,  903,
      344,   44,   44,   44,   44,   44,   44,  348,  334,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,  353,  351,  903,  350,   44,
       44,  903,  354,   44,   44,  360,  903,  352,   44,   44,
      903,  284,  284,  284,  284,  284,  284,   44,   44,  356,
       44,   44,  355,  363,  903,  357,   44,   44,  903,   44,
       44,   44,   44,  358,  367,  368,  369,  903,  359,   44,
       44,   44,   44,  903,  362,   44,   44,  903,  361,  903,
      364,   44,   44,   44,   44,   44,   44,  365,   44,   44,
       44,   44,   44,   44,   44,   44,  903,  366,   44,   44,
      370,   44,   44,   44,   44,   44,   44,  381,   44,   44,
       44,   44,  903,   44,   44,  373,   44,   44,  375,   44,

       44,  903,  374,  378,  903,  379,   44,   44,   44,   44,
      903,  376,  377,  903,  383,  903,  392,   44,   44,   44,
       44,  284,  903,  380,  903,  386,   44,   44,   44,   44,
      384,  382,  388,   44,   44,  903,  385,   44,   44,  377,
      389,   44,   44,  387,   44,   44,  390,  903,  391,   44,
       44,   44,   44,   44,   44,   44,   44,  903,  394,   44,
       44,   44,   44,   44,   44,  903,   44,   44,   44,   44,
      397,   44,   44,  903,  393,  903,  395,   44,   44,   44,
       44,  903,  396,   44,   44,   44,   44,   44,   44,  903,
      401,  399,   44,   44,  398,   44,   44,   44,   44,  407,

       44,   44,  903,  403,  400,  405,  903,  410,  406,  408,
      404,  903,  402,   44,   44,  903,  409,  903,  419,  411,
      412,   44,   44,  417,   44,   44,  903,  415,  414,   44,
       44,   44,   44,   44,   44,  903,  422,  413,   44,   44,
      416,   44,   44,   44,   44,  903,  418,   44,   44,   44,
       44,  903,  420,   44,   44,  421,  432,  423,   44,   44,
      903,   44,   44,   44,   44,  903,   44,   44,  424,  425,
      903,  427,   44,   44,  426,   44,   44,  428,   44,   44,
       44,   44,   44,   44,  429,   44,   44,   44,   44,   44,
       44,  431,  903,  430,  443,  903,  436,  437,  903,   44,

       44,  903,  434,  435,   44,   44,  433,   44,   44,  444,
       44,   44,  438,  439,  442,  441,  447,  903,  445,   44,
       44,   44,   44,   44,   44,  440,  903,  284,  903,  448,
       44,   44,   44,   44,   44,   44,   44,   44,  446,   44,
       44,  903,   44,   44,   44,   44,   44,   44,  903,   44,
       44,  903,  452,  452,  452,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,  453,  457,  903,   44,   44,
      454,  449,  459,  460,   44,   44,  903,  284,   44,   44,
      903,  455,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,  903,  456,  458,  461,  903,  320,  903,  462,

       44,   44,  467,  320,  465,  464,   44,   44,   44,   44,
       44,   44,  463,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,  466,  469,  903,  284,   44,   44,   44,
       44,  468,   44,   44,  470,   44,   44,  903,   44,   44,
      903,  320,   44,   44,  903,  474,  903,  471,  472,  903,
      473,   44,   44,  903,  476,  475,  903,  480,   44,   44,
      903,  320,   44,   44,  903,   44,   44,  903,  478,  903,
       44,   44,   44,   44,  477,  903,  481,   44,   44,  434,
      479,  903,  484,   44,   44,  903,  482,  483,   44,   44,
      903,  485,   44,   44,   44,   44,  903,   44,   44,   44,

       44,   44,   44,  903,  320,  487,   44,   44,  903,  486,
      488,   44,   44,   44,   44,   44,   44,   44,   44,  489,
       44,   44,  903,  491,   44,   44,  903,  490,  492,   44,
       44,  903,  493,   44,   44,  903,   44,   44,   44,   44,
       44,   44,  498,  497,  494,  495,  903,  499,   44,   44,
      903,   44,   44,   44,   44,   44,   44,   44,   44,  903,
      496,  502,  503,   44,   44,   44,   44,  903,  501,   44,
       44,  903,  509,  510,  500,  506,  507,  504,  903,  511,
      903,  517,  512,  513,  505,   44,   44,  284,  514,  515,
      516,  508,  903,  518,  903,  519,   44,   44,   44,   44,

      520,   44,   44,   44,   44,  903,   44,   44,  521,  377,
      377,  377,   44,   44,   44,   44,   44,   44,  522,   44,
       44,  523,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,  903,  377,  377,  377,   44,   44,   44,   44,
       44,   44,   44,   44,  903,  524,   44,   44,   44,   44,
      532,  903,  284,  533,  903,  530,  903,  525,  903,   44,
       44,  528,  534,   44,   44,   44,   44,  903,  535,  531,
      903,  529,   44,   44,   44,   44,   44,   44,   44,   44,
      903,  284,  538,  540,  539,   44,   44,   44,   44,   44,
       44,  536,  903,  537,  284,  903,  542,   44,   44,   44,

       44,   44,   44,   44,   44,  320,  903,   44,   44,   44,
       44,  903,   44,   44,   44,   44,  544,  903,  541,   44,
       44,   44,   44,   44,   44,  284,  903,  546,  903,  545,
      547,   44,   44,  543,   44,   44,  549,  548,  903,   44,
       44,   44,   44,   44,   44,   44,   44,  551,  550,  552,
      553,  903,  556,  903,  434,  557,  558,   44,   44,   44,
       44,   44,   44,  903,  554,  903,  559,  903,  560,   44,
       44,   44,   44,  903,  452,   44,   44,  555,  561,   44,
       44,  903,  563,  903,   44,   44,  903,  452,  562,   44,
       44,   44,   44,  903,  452,  903,  564,  565,   44,   44,

      567,  572,   44,   44,   44,   44,  903,  566,   44,   44,
      903,  569,   44,   44,   44,   44,  568,   44,   44,  570,
      903,  575,   44,   44,   44,   44,   44,   44,  576,  571,
      903,  377,  903,   44,   44,   44,   44,  903,  284,   44,
       44,   44,   44,  903,  584,   44,   44,  573,  578,  574,
      580,   44,   44,  581,  585,   44,   44,  577,   44,   44,
       44,   44,  582,   44,   44,   44,   44,  903,  579,   44,
       44,  586,   44,   44,   44,   44,  903,  583,   44,   44,
       44,   44,   44,   44,  903,  589,  598,  590,   44,   44,
       44,   44,  587,   44,   44,  903,  588,   44,   44,  593,

      594,   44,   44,  903,  597,  604,  903,  592,  903,  591,
       44,   44,   44,   44,   44,   44,   44,   44,  602,  601,
       44,   44,   44,   44,  600,   44,   44,  599,   44,   44,
      605,   44,   44,  606,   44,   44,  903,  603,  608,  903,
      611,   44,   44,   44,   44,  903,  609,   44,   44,   44,
       44,  903,  607,   44,   44,   44,   44,  903,   44,   44,
       44,   44,  613,  903,  610,   44,   44,   44,   44,  616,
       44,   44,  320,  612,  614,   44,   44,  903,   44,   44,
      903,  617,   44,   44,  615,   44,   44,  434,  903,  434,
      903,  618,  903,   44,   44,  621,  629,  903,  619,   44,

       44,   44,   44,  903,  623,  620,  622,   44,   44,   44,
       44,   44,   44,  624,   44,   44,  903,  625,  628,   44,
       44,  626,   44,   44,  631,   44,   44,  903,  627,   44,
       44,  903,  630,  632,   44,   44,   44,   44,   44,   44,
      903,  633,   44,   44,  635,   44,   44,  634,   44,   44,
      903,   44,   44,   44,   44,   44,   44,   44,   44,  903,
       44,   44,  903,  637,  903,  640,  636,  903,  638,  903,
      642,  903,  643,   44,   44,  639,   44,   44,  641,   44,
       44,  903,  644,   44,   44,  903,   44,   44,   44,   44,
      903,  645,  284,  649,   44,   44,  903,  648,  651,  646,

       44,   44,  647,  903,  650,  903,   44,   44,  903,  652,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,  655,  661,   44,   44,  653,  656,  654,   44,
       44,  658,  666,  667,   44,   44,   44,   44,   44,   44,
       44,   44,  657,   44,   44,  903,   44,   44,   44,   44,
      903,  669,  663,  903,  665,   44,   44,  664,  903,  662,
       44,   44,  903,   44,   44,   44,   44,  452,  903,  668,
       44,   44,   44,   44,   44,   44,  670,   44,   44,   44,
       44,  903,  673,  320,  903,  671,   44,   44,   44,   44,
       44,   44,   44,   44,  903,  672,  674,   44,   44,   44,

       44,   44,   44,  675,  676,   44,   44,   44,   44,  903,
      434,   44,   44,  680,   44,   44,  677,  678,  681,  903,
      679,   44,   44,  683,  682,   44,   44,   44,   44,  684,
       44,   44,  320,  903,  685,   44,   44,  687,  903,   44,
       44,  903,  694,   44,   44,  690,   44,   44,  452,  688,
      686,  689,   44,   44,  696,   44,   44,   44,   44,  903,
      695,  691,  700,  692,  903,  698,  903,  697,   44,   44,
       44,   44,   44,   44,  693,  699,   44,   44,   44,   44,
       44,   44,  903,  452,   44,   44,   44,   44,  701,   44,
       44,   44,   44,  903,  703,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,  903,  284,  903,
      702,   44,   44,   44,   44,  284,   44,   44,  284,  903,
       44,   44,  903,  706,  705,   44,   44,  903,  377,  377,
      284,   44,   44,  704,  320,   44,   44,  709,  708,   44,
       44,  707,  711,  903,  320,   44,   44,  716,  903,  710,
      712,  903,   44,   44,  715,  377,  377,   44,   44,   44,
       44,   44,   44,   44,   44,  903,  717,  719,   44,   44,
      718,  720,   44,   44,   44,   44,   44,   44,   44,   44,
      721,   44,   44,   44,   44,  284,   44,   44,   44,   44,
       44,   44,  722,   44,   44,   44,   44,  723,  903,  320,

      724,   44,   44,  725,   44,   44,   44,   44,  726,   44,
       44,   44,   44,  903,  434,   44,   44,   44,   44,  434,
      727,  903,  729,  434,  737,   44,   44,  730,  903,  731,
      741,  728,  903,  733,  903,  738,   44,   44,  903,  734,
      736,   44,   44,  903,  732,  903,  735,   44,   44,  320,
      320,  320,   44,   44,   44,   44,   44,   44,  745,  739,
      903,  743,   44,   44,  740,  903,  742,   44,   44,  744,
       44,   44,   44,   44,  903,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,  747,
       44,   44,  903,  749,  748,   44,   44,   44,   44,  903,

      746,  903,  750,   44,   44,   44,   44,   44,   44,  903,
      752,   44,   44,  903,  751,  753,   44,   44,  903,  284,
       44,   44,  903,  761,   44,   44,  903,  754,   44,   44,
      284,  903,  762,  755,  756,  758,  757,   44,   44,   44,
       44,  763,  903,  764,  765,  377,  903,  766,   44,   44,
       44,   44,  903,   44,   44,   44,   44,  903,   44,   44,
      767,   44,   44,  903,  320,   44,   44,   44,   44,   44,
       44,   44,   44,  768,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  903,  769,  903,  771,
       44,   44,  770,  772,  903,   44,   44,  434,   44,   44,

       44,   44,  903,  434,   44,   44,   44,   44,   44,   44,
      779,  773,  774,  903,  775,  903,   44,   44,  782,  903,
      778,  776,  903,  452,  780,   44,   44,  777,   44,   44,
      781,  903,  320,  903,  784,   44,   44,   44,   44,  320,
      903,   44,   44,  320,  783,   44,   44,  785,  903,  789,
       44,   44,  903,  787,  903,  786,  284,   44,   44,  903,
      791,  788,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,  790,   44,
       44,   44,   44,   44,   44,   44,   44,  377,  284,  792,
      803,   44,   44,  903,  796,   44,   44,   44,   44,  903,

      798,   44,   44,  793,   44,   44,  903,  800,  801,  797,
       44,   44,   44,   44,  903,  799,   44,   44,  802,   44,
       44,  377,  903,  804,   44,   44,   44,   44,   44,   44,
      434,  903,  805,   44,   44,  807,   44,   44,  903,  806,
       44,   44,   44,   44,  808,   44,   44,  903,  811,   44,
       44,   44,   44,   44,   44,  903,  813,   44,   44,  809,
      814,  903,   44,   44,  810,  812,   44,   44,  320,   44,
       44,   44,   44,   44,   44,  815,  320,  903,  818,   44,
       44,   44,   44,  903,  817,   44,   44,  903,  816,   44,
       44,   44,   44,   44,   44,  819,   44,   44,  903,  820,

      903,  792,  284,  903,  823,   44,   44,   44,   44,  320,
       44,   44,  903,  824,  903,  827,   44,   44,  825,  903,
      826,   44,   44,   44,   44,   44,   44,  903,  828,   44,
       44,  775,  831,   44,   44,  829,   44,   44,   44,   44,
       44,   44,   44,   44,  775,   44,   44,   44,   44,  832,
      830,   44,   44,  320,   44,   44,  903,  833,   44,   44,
      836,   44,   44,   44,   44,   44,   44,  903,  835,  839,
      834,  903,  838,  903,  845,   44,   44,   44,   44,  837,
      846,  903,  284,   44,   44,   44,   44,  284,  903,  842,
      840,  841,   44,   44,   44,   44,   44,   44,  848,   44,

       44,  847,  903,  775,   44,   44,   44,   44,   44,   44,
      849,  850,  903,  854,   44,   44,   44,   44,  775,   44,
       44,   44,   44,   44,   44,  320,  434,  434,  434,   44,
       44,  320,   44,   44,  903,  853,   44,   44,  851,  852,
       44,   44,  903,  855,   44,   44,   44,   44,  861,  903,
      284,   44,   44,  903,  856,   44,   44,   44,   44,   44,
       44,  903,  857,  903,  859,  903,  860,  903,  864,  868,
      862,   44,   44,   44,   44,  867,  863,  903,   44,   44,
      320,   44,   44,   44,   44,  903,  865,  903,  866,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,  903,   44,   44,   44,   44,
      869,  903,  873,  870,  903,  871,   44,   44,   44,   44,
      884,  872,  874,   44,   44,  877,   44,   44,   44,   44,
      875,  880,   44,   44,   44,   44,  876,   44,   44,  903,
      879,  878,  885,   44,   44,   44,   44,   44,   44,  903,
      881,  903,  882,   44,   44,   44,   44,  883,   44,   44,
       44,   44,  888,  886,  792,  903,   44,   44,   44,   44,
      890,  903,  284,   44,   44,  891,  903,  889,  903,  887,
       44,   44,   44,   44,   44,   44,  903,  892,  894,  894,
      894,  894,  893,   44,   44,  896,  898,  903,  894,  320,

      895,  903,  894,   44,   44,  894,  320,  903,  320,  899,
      897,   44,   44,   44,   44,  903,   44,   44,  900,  903,
      894,  894,  894,  894,   44,   44,  903,  903,  903,  903,
      894,  903,  903,  320,  894,  903,  377,  894,  903,  903,
      901,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  320,  903,  903,  903,  903,  903,  903,  903,  903,
      902,  903,  903,  903,  320,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   42,   42,  903,  903,  903,   42,
       45,   45,   45,   45,   45,   45,   45,   92,   92,   92,
       92,   92,   97,  903,   97,   97,   97,   97,   97,   97,

       97,   99,   99,   99,   99,   99,   99,   99,   99,   99,
      101,  903,  101,  101,  101,  101,  101,  101,  101,  103,
      903,  103,  105,  105,  903,  105,   44,   44,   44,   44,
       44,   44,   44,    5,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,

      903
    } ;

static const flex_int16_t yy_chk[3302] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    7,    3,    7,    4,    9,   10,   11,    9,   12,
       12,   13,   13,   14,   14,   15,   15,   41,   16,   16,
       18,   18,   19,   19,   22,   22,   17,   17,   38,  844,

       38,   42,   33,   33,   45,   45,   20,   20,  822,   17,
       41,   21,   21,   23,   23,   28,   28,  821,   12,  795,
       26,   26,   24,   24,  794,   15,   12,   12,   13,   15,
       14,   13,   17,   14,   10,   11,   16,   13,   33,   14,
       17,   19,   20,  760,   22,  759,   17,   21,   26,   23,
       20,   25,   25,   27,   27,   21,   20,   23,   24,   42,
       26,  714,   24,   23,  713,   28,   23,   21,   28,   31,
       31,   34,   34,   26,   29,   29,   32,   32,   26,   25,
      103,   46,   46,   47,   47,   48,   48,   25,  660,   32,
      659,   29,   29,   27,   25,   49,   49,   27,   25,   34,

       50,   50,   25,  103,   25,  596,   25,   29,   51,   51,
      595,   34,   32,   52,   52,   53,   53,   54,   54,   31,
       46,  527,   48,   32,   34,   55,   55,   56,   56,   57,
       57,   58,   58,  526,   47,   49,   59,   59,   60,   60,
       62,   62,   61,   61,   63,   63,   64,   64,   65,   65,
       66,   66,  451,   50,   58,  450,   51,   52,   67,   67,
       68,   68,   53,  372,   54,   69,   69,  371,   56,   70,
       70,   71,   71,   57,   72,   72,   55,  292,   58,   55,
       60,   61,   56,   59,   64,  291,   63,   73,   73,  228,
       65,   74,   74,  227,   62,   75,   75,   77,   77,   66,

      163,   66,  161,   65,  102,   67,  100,   65,   76,   76,
       78,   78,   99,   68,   75,   71,   98,   79,   79,   40,
       69,   80,   80,   39,   72,   81,   81,   37,   70,    5,
       82,   82,    0,   77,   83,   83,   73,   84,   84,   85,
       85,   86,   86,   87,   87,   74,   88,   88,   89,   89,
       90,   90,   91,   91,   93,   93,   76,   79,    0,   80,
       78,   82,   94,   94,    0,   81,   95,   95,    0,   96,
       96,  106,  106,  107,  107,  108,  108,   84,  109,  109,
        0,   86,   88,  110,  110,    0,   82,  111,  111,  112,
      112,    0,   85,   83,  113,  113,   87,   89,  114,  114,

      115,  115,   93,  116,  116,   91,   90,   96,  117,  117,
      118,  118,   94,  119,  119,    0,  107,  120,  120,  108,
       95,    0,  110,    0,  106,  121,  121,  109,  123,  123,
      124,  124,  125,  125,  126,  126,  127,  127,  111,    0,
      112,  128,  128,    0,  113,  114,  120,  122,  122,  117,
      132,  132,    0,  118,  127,  115,  129,  129,  116,    0,
      130,  130,  122,  122,  122,  131,  131,  119,  123,  129,
      126,  120,  121,  133,  133,  125,  122,  122,  130,  122,
      129,  128,    0,  131,    0,  124,  134,  134,    0,  131,
      135,  135,  136,  136,  137,  137,  138,  138,  139,  139,

      140,  140,  141,  141,    0,  132,  142,  142,  143,  143,
      144,  144,  145,  145,  140,  146,  146,  147,  147,  150,
      150,  133,  148,  148,  134,    0,  145,  149,  149,    0,
      135,  151,  151,    0,  147,  152,  152,  148,  138,  137,
        0,  136,  153,  153,    0,  142,  155,  155,  144,  154,
      154,  157,  157,  141,  139,  156,  156,  147,    0,  143,
      158,  158,  159,  159,  146,  160,  160,  149,    0,  164,
      164,  165,  165,    0,  150,  166,  166,  148,  167,  167,
      168,  168,  152,  169,  169,  154,  170,  170,    0,  151,
      171,  171,    0,  153,    0,  155,  158,  172,  172,  156,

      169,    0,  157,  173,  173,  174,  174,  165,  160,  164,
      175,  175,    0,  170,    0,  166,  159,  167,    0,  174,
      168,  172,  176,  176,  177,  177,    0,  178,  178,  179,
      179,  180,  180,  181,  181,  182,  182,  170,  183,  183,
      184,  184,    0,  171,  178,    0,  173,  185,  185,  186,
      186,  188,  188,  179,    0,  187,  187,  189,  189,  190,
      190,    0,  176,  191,  191,    0,  175,  178,  192,  192,
      193,  193,    0,  181,  194,  194,  184,    0,  177,  195,
      195,  180,  187,    0,  182,  196,  196,  185,  197,  197,
      198,  198,    0,  183,  199,  199,  200,  200,  201,  201,

      202,  202,    0,  190,  189,    0,  188,    0,  186,  203,
      203,  204,  204,    0,  193,    0,  191,  192,  194,  206,
      206,  196,    0,  195,  205,  205,  198,  207,  207,  208,
      208,    0,  197,  209,  209,  210,  210,  199,  211,  211,
      202,  212,  212,  200,  213,  213,  214,  214,    0,  203,
      215,  215,    0,  201,  205,  216,  216,    0,  204,    0,
      217,  217,  218,  218,  222,  222,  206,  207,    0,  208,
      224,  224,    0,  223,  223,    0,  211,  225,  225,  220,
      220,    0,  210,  221,  221,  226,  226,  229,  229,  209,
      217,    0,  232,  232,  213,  216,  231,  231,    0,  215,

        0,  218,  214,  219,  219,    0,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  220,  223,  232,  222,
        0,  221,  230,  230,    0,  224,  233,  233,  234,  234,
        0,  235,  235,    0,  226,  230,  230,  236,  236,    0,
      230,  229,  237,  237,    0,  231,  238,  238,  230,    0,
      230,    0,  230,  239,  239,  237,  240,  240,  241,  241,
      242,  242,  243,  243,  244,  244,    0,  239,  237,  245,
      245,  246,  246,    0,  237,  237,    0,  234,  235,  233,
        0,  236,  247,  247,  248,  248,  249,  249,  250,  250,
      251,  251,  252,  252,  253,  253,  238,  255,  255,  256,

      256,  259,  259,  240,  257,  257,  243,  258,  258,  260,
      260,    0,  241,  242,  262,  262,  261,  261,  246,  245,
      248,    0,  249,  248,    0,  250,  263,  263,    0,  255,
        0,  247,  252,  264,  264,  265,  265,    0,  253,  266,
      266,  267,  267,  251,  254,  254,  256,    0,  257,  268,
      268,  258,  259,  270,  270,  263,  260,  254,  269,  269,
      254,  254,  254,  261,  265,  262,  271,  271,  266,    0,
      267,  254,  254,  254,  254,    0,  269,  272,  272,    0,
      264,  273,  273,  274,  274,  275,  275,  268,  254,  276,
      276,  277,  277,  278,  278,  279,  279,  280,  280,  281,

      281,  282,  282,  283,  283,  273,  271,    0,  270,  284,
      284,    0,  274,  286,  286,  280,    0,  272,  285,  285,
        0,  285,  285,  285,  285,  285,  285,  287,  287,  276,
      288,  288,  275,  283,    0,  277,  290,  290,    0,  289,
      289,  293,  293,  278,  289,  289,  289,    0,  279,  294,
      294,  295,  295,    0,  282,  296,  296,    0,  281,    0,
      286,  297,  297,  298,  298,  299,  299,  287,  300,  300,
      301,  301,  302,  302,  303,  303,    0,  288,  304,  304,
      290,  305,  305,  306,  306,  308,  308,  302,  307,  307,
      309,  309,    0,  310,  310,  293,  311,  311,  295,  314,

      314,    0,  294,  298,    0,  299,  312,  312,  313,  313,
        0,  296,  297,    0,  304,    0,  314,  315,  315,  316,
      316,  301,    0,  300,    0,  308,  317,  317,  318,  318,
      305,  303,  310,  319,  319,    0,  306,  320,  320,  307,
      311,  321,  321,  309,  322,  322,  312,    0,  313,  323,
      323,  324,  324,  325,  325,  326,  326,    0,  316,  328,
      328,  327,  327,  329,  329,    0,  330,  330,  332,  332,
      319,  331,  331,    0,  315,    0,  317,  333,  333,  334,
      334,    0,  318,  335,  335,  336,  336,  337,  337,    0,
      324,  322,  338,  338,  321,  339,  339,  340,  340,  329,

      341,  341,    0,  326,  323,  327,    0,  331,  328,  330,
      326,    0,  325,  342,  342,    0,  330,    0,  339,  332,
      333,  343,  343,  337,  344,  344,    0,  335,  334,  345,
      345,  346,  346,  347,  347,    0,  342,  333,  348,  348,
      336,  349,  349,  350,  350,    0,  338,  351,  351,  352,
      352,    0,  340,  353,  353,  341,  350,  343,  354,  354,
        0,  355,  355,  356,  356,    0,  357,  357,  344,  345,
        0,  347,  358,  358,  346,  359,  359,  347,  360,  360,
      361,  361,  362,  362,  347,  363,  363,  364,  364,  366,
      366,  349,    0,  348,  361,    0,  354,  355,    0,  365,

      365,    0,  352,  353,  367,  367,  351,  368,  368,  361,
      369,  369,  356,  357,  360,  359,  365,    0,  362,  370,
      370,  373,  373,  374,  374,  358,    0,  364,    0,  366,
      375,  375,  376,  376,  377,  377,  378,  378,  363,  379,
      379,    0,  380,  380,  381,  381,  383,  383,    0,  382,
      382,    0,  373,  373,  373,  384,  384,  385,  385,  386,
      386,  387,  387,  388,  388,  374,  380,    0,  389,  389,
      375,  370,  382,  382,  390,  390,    0,  378,  391,  391,
        0,  376,  392,  392,  393,  393,  394,  394,  395,  395,
      396,  396,    0,  379,  381,  383,    0,  384,    0,  385,

      397,  397,  391,  388,  389,  387,  398,  398,  399,  399,
      400,  400,  386,  401,  401,  402,  402,  403,  403,  404,
      404,  406,  406,  390,  393,    0,  394,  405,  405,  407,
      407,  392,  409,  409,  396,  408,  408,    0,  410,  410,
        0,  395,  411,  411,    0,  401,    0,  397,  399,    0,
      400,  412,  412,    0,  403,  402,    0,  406,  413,  413,
        0,  398,  414,  414,    0,  415,  415,    0,  405,    0,
      416,  416,  417,  417,  404,    0,  407,  418,  418,  408,
      405,    0,  411,  419,  419,    0,  409,  410,  420,  420,
        0,  412,  421,  421,  422,  422,    0,  423,  423,  424,

      424,  425,  425,    0,  414,  415,  426,  426,    0,  413,
      416,  427,  427,  428,  428,  429,  429,  430,  430,  417,
      431,  431,    0,  419,  432,  432,    0,  418,  420,  433,
      433,    0,  421,  434,  434,    0,  435,  435,  437,  437,
      436,  436,  426,  425,  422,  423,    0,  427,  438,  438,
        0,  440,  440,  443,  443,  439,  439,  442,  442,    0,
      424,  430,  431,  441,  441,  444,  444,    0,  429,  445,
      445,    0,  439,  439,  428,  435,  436,  432,    0,  439,
        0,  441,  439,  439,  433,  446,  446,  438,  439,  439,
      440,  437,    0,  441,    0,  442,  447,  447,  448,  448,

      443,  449,  449,  452,  452,    0,  453,  453,  444,  453,
      453,  453,  454,  454,  455,  455,  456,  456,  445,  457,
      457,  446,  458,  458,  459,  459,  460,  460,  461,  461,
      462,  462,    0,  462,  462,  462,  463,  463,  464,  464,
      465,  465,  466,  466,    0,  447,  467,  467,  468,  468,
      459,    0,  455,  459,    0,  457,    0,  449,    0,  469,
      469,  454,  460,  470,  470,  471,  471,    0,  461,  458,
        0,  456,  472,  472,  473,  473,  474,  474,  475,  475,
        0,  466,  467,  469,  468,  476,  476,  477,  477,  478,
      478,  463,    0,  464,  465,    0,  472,  479,  479,  480,

      480,  481,  481,  482,  482,  471,    0,  483,  483,  485,
      485,    0,  484,  484,  486,  486,  474,    0,  470,  487,
      487,  488,  488,  490,  490,  475,    0,  477,    0,  476,
      478,  491,  491,  473,  492,  492,  480,  479,    0,  489,
      489,  493,  493,  494,  494,  495,  495,  482,  481,  483,
      484,    0,  489,    0,  486,  489,  489,  496,  496,  497,
      497,  498,  498,    0,  485,    0,  489,    0,  489,  499,
      499,  500,  500,    0,  488,  501,  501,  487,  490,  502,
      502,    0,  494,    0,  503,  503,    0,  492,  491,  504,
      504,  505,  505,    0,  493,    0,  495,  496,  506,  506,

      498,  503,  507,  507,  508,  508,    0,  497,  509,  509,
        0,  500,  510,  510,  511,  511,  499,  512,  512,  501,
        0,  508,  513,  513,  514,  514,  515,  515,  508,  502,
        0,  504,    0,  516,  516,  517,  517,    0,  506,  518,
      518,  519,  519,    0,  515,  520,  520,  505,  510,  507,
      511,  521,  521,  512,  516,  522,  522,  509,  523,  523,
      525,  525,  513,  524,  524,  528,  528,    0,  510,  529,
      529,  517,  530,  530,  531,  531,    0,  514,  532,  532,
      533,  533,  534,  534,    0,  520,  529,  521,  535,  535,
      536,  536,  518,  537,  537,    0,  519,  538,  538,  524,

      525,  539,  539,    0,  528,  535,    0,  523,    0,  522,
      540,  540,  541,  541,  542,  542,  543,  543,  533,  532,
      544,  544,  545,  545,  531,  546,  546,  530,  547,  547,
      536,  548,  548,  537,  549,  549,    0,  534,  539,    0,
      543,  550,  550,  551,  551,    0,  540,  552,  552,  553,
      553,    0,  538,  554,  554,  555,  555,    0,  556,  556,
      557,  557,  545,    0,  542,  558,  558,  559,  559,  548,
      560,  560,  541,  544,  546,  561,  561,    0,  562,  562,
        0,  549,  563,  563,  547,  564,  564,  552,    0,  554,
        0,  550,    0,  566,  566,  555,  563,    0,  551,  565,

      565,  567,  567,    0,  557,  553,  556,  568,  568,  569,
      569,  570,  570,  558,  571,  571,    0,  559,  562,  572,
      572,  560,  573,  573,  565,  574,  574,    0,  561,  575,
      575,    0,  564,  566,  576,  576,  577,  577,  578,  578,
        0,  567,  579,  579,  569,  580,  580,  568,  581,  581,
        0,  582,  582,  583,  583,  585,  585,  584,  584,    0,
      586,  586,    0,  571,    0,  574,  570,    0,  572,    0,
      576,    0,  577,  587,  587,  573,  588,  588,  575,  589,
      589,    0,  578,  590,  590,    0,  591,  591,  592,  592,
        0,  579,  582,  584,  593,  593,    0,  583,  586,  580,

      594,  594,  581,    0,  585,    0,  597,  597,    0,  587,
      598,  598,  599,  599,  600,  600,  601,  601,  602,  602,
      604,  604,  590,  597,  605,  605,  588,  591,  589,  603,
      603,  593,  603,  603,  606,  606,  607,  607,  608,  608,
      609,  609,  592,  610,  610,    0,  611,  611,  612,  612,
        0,  606,  599,    0,  602,  613,  613,  601,    0,  598,
      614,  614,    0,  615,  615,  616,  616,  600,    0,  604,
      617,  617,  618,  618,  619,  619,  607,  620,  620,  621,
      621,    0,  610,  605,    0,  608,  622,  622,  623,  623,
      624,  624,  625,  625,    0,  609,  611,  626,  626,  627,

      627,  628,  628,  612,  613,  630,  630,  629,  629,    0,
      617,  631,  631,  618,  632,  632,  614,  615,  619,    0,
      616,  633,  633,  622,  620,  634,  634,  636,  636,  623,
      635,  635,  621,    0,  624,  637,  637,  626,    0,  638,
      638,    0,  634,  639,  639,  630,  640,  640,  628,  627,
      625,  629,  641,  641,  635,  642,  642,  643,  643,    0,
      634,  631,  640,  632,    0,  637,    0,  636,  644,  644,
      645,  645,  646,  646,  633,  638,  647,  647,  648,  648,
      649,  649,    0,  639,  650,  650,  651,  651,  641,  652,
      652,  653,  653,    0,  643,  654,  654,  655,  655,  656,

      656,  657,  657,  658,  658,  661,  661,    0,  645,    0,
      642,  662,  662,  663,  663,  644,  664,  664,  646,    0,
      665,  665,    0,  650,  649,  666,  666,    0,  666,  666,
      647,  669,  669,  648,  654,  668,  668,  655,  652,  670,
      670,  651,  657,    0,  653,  671,  671,  662,    0,  656,
      658,    0,  667,  667,  661,  667,  667,  672,  672,  673,
      673,  674,  674,  675,  675,    0,  663,  665,  676,  676,
      664,  668,  677,  677,  678,  678,  679,  679,  680,  680,
      669,  681,  681,  683,  683,  671,  682,  682,  684,  684,
      685,  685,  670,  686,  686,  688,  688,  672,    0,  673,

      674,  687,  687,  675,  689,  689,  691,  691,  677,  692,
      692,  690,  690,    0,  678,  693,  693,  694,  694,  680,
      679,    0,  682,  676,  690,  696,  696,  683,    0,  684,
      693,  681,    0,  686,    0,  690,  695,  695,    0,  687,
      689,  697,  697,    0,  685,    0,  688,  698,  698,  695,
      695,  695,  699,  699,  700,  700,  701,  701,  697,  691,
        0,  696,  702,  702,  692,    0,  694,  703,  703,  696,
      704,  704,  705,  705,    0,  706,  706,  707,  707,  708,
      708,  709,  709,  710,  710,  711,  711,  715,  715,  699,
      712,  712,    0,  701,  700,  716,  716,  717,  717,    0,

      698,    0,  702,  718,  718,  719,  719,  720,  720,    0,
      704,  721,  721,    0,  703,  706,  722,  722,    0,  705,
      723,  723,    0,  715,  724,  724,    0,  707,  725,  725,
      712,    0,  716,  708,  709,  711,  710,  726,  726,  727,
      727,  717,    0,  718,  720,  719,    0,  721,  728,  728,
      729,  729,    0,  730,  730,  731,  731,    0,  732,  732,
      722,  733,  733,    0,  724,  734,  734,  735,  735,  736,
      736,  737,  737,  723,  738,  738,  739,  739,  740,  740,
      741,  741,  742,  742,  743,  743,    0,  725,    0,  727,
      744,  744,  726,  730,    0,  745,  745,  728,  746,  746,

      747,  747,    0,  729,  748,  748,  749,  749,  750,  750,
      738,  731,  732,    0,  733,    0,  751,  751,  742,    0,
      737,  734,    0,  736,  739,  752,  752,  735,  753,  753,
      741,    0,  740,    0,  746,  754,  754,  755,  755,  744,
        0,  757,  757,  743,  745,  756,  756,  747,    0,  752,
      758,  758,    0,  749,    0,  748,  751,  761,  761,    0,
      756,  750,  762,  762,  763,  763,  764,  764,  765,  765,
      766,  766,  767,  767,  768,  768,  769,  769,  755,  770,
      770,  771,  771,  772,  772,  773,  773,  753,  754,  757,
      769,  774,  774,    0,  761,  775,  775,  776,  776,    0,

      763,  777,  777,  758,  778,  778,    0,  766,  767,  762,
      779,  779,  780,  780,    0,  765,  781,  781,  768,  782,
      782,  764,    0,  770,  783,  783,  784,  784,  785,  785,
      771,    0,  772,  786,  786,  774,  787,  787,    0,  773,
      788,  788,  789,  789,  776,  790,  790,    0,  780,  791,
      791,  792,  792,  793,  793,    0,  782,  796,  796,  778,
      783,    0,  797,  797,  779,  781,  798,  798,  785,  799,
      799,  800,  800,  801,  801,  784,  787,    0,  789,  802,
      802,  803,  803,    0,  788,  804,  804,    0,  786,  805,
      805,  806,  806,  807,  807,  790,  808,  808,    0,  791,

        0,  793,  797,    0,  796,  809,  809,  810,  810,  799,
      811,  811,    0,  798,    0,  802,  812,  812,  800,    0,
      801,  813,  813,  814,  814,  815,  815,    0,  803,  816,
      816,  806,  808,  817,  817,  804,  818,  818,  819,  819,
      820,  820,  823,  823,  805,  824,  824,  825,  825,  809,
      807,  826,  826,  810,  827,  827,    0,  811,  828,  828,
      814,  829,  829,  830,  830,  831,  831,    0,  813,  817,
      812,    0,  816,    0,  824,  832,  832,  833,  833,  815,
      826,    0,  823,  834,  834,  835,  835,  825,    0,  820,
      818,  819,  836,  836,  837,  837,  839,  839,  828,  838,

      838,  827,    0,  830,  840,  840,  841,  841,  842,  842,
      829,  832,    0,  838,  845,  845,  846,  846,  831,  847,
      847,  848,  848,  849,  849,  835,  849,  849,  849,  850,
      850,  833,  851,  851,    0,  837,  853,  853,  834,  836,
      852,  852,    0,  839,  854,  854,  855,  855,  847,    0,
      840,  856,  856,    0,  841,  857,  857,  859,  859,  860,
      860,    0,  842,    0,  845,    0,  846,    0,  851,  856,
      848,  861,  861,  862,  862,  855,  850,    0,  863,  863,
      852,  864,  864,  865,  865,    0,  853,    0,  854,  866,
      866,  867,  867,  868,  868,  869,  869,  870,  870,  871,

      871,  872,  872,  873,  873,    0,  874,  874,  875,  875,
      857,    0,  862,  859,    0,  860,  876,  876,  877,  877,
      873,  861,  863,  878,  878,  866,  879,  879,  880,  880,
      864,  869,  881,  881,  883,  883,  865,  882,  882,    0,
      868,  867,  874,  884,  884,  885,  885,  887,  887,    0,
      870,    0,  871,  888,  888,  889,  889,  872,  892,  892,
      894,  894,  879,  875,  876,    0,  890,  890,  891,  891,
      881,    0,  877,  893,  893,  882,    0,  880,    0,  878,
      895,  895,  896,  896,  886,  886,    0,  883,  886,  886,
      886,  886,  884,  898,  898,  888,  892,    0,  886,  885,

      887,    0,  886,  899,  899,  886,  890,    0,  891,  893,
      889,  900,  900,  901,  901,    0,  897,  897,  895,    0,
      897,  897,  897,  897,  902,  902,    0,    0,    0,    0,
      897,    0,    0,  898,  897,    0,  896,  897,    0,    0,
      899,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  900,    0,    0,    0,    0,    0,    0,    0,    0,
      901,    0,    0,    0,  902,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  905,  905,    0,    0,    0,  905,
      906,  906,  906,  906,  906,  906,  906,  907,  907,  907,
      907,  907,  908,    0,  908,  908,  908,  908,  908,  908,

      908,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      910,    0,  910,  910,  910,  910,  910,  910,  910,  911,
        0,  911,  912,  912,    0,  912,  913,  913,  913,  913,
      913,  913,  913,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,

      903
    } ;

static const flex_int16_t yy_rule_linenum[23] =
    {   0,
       90,   95,  102,  105,  112,  113,  114,  115,  116,  117,
      118,  119,  121,  126,  127,  129,  134,  140,  146,  153,
      155,  156
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"

#include <string>
#include <sstream>
#include "scanner.h"


/* HLSL Code Block */

std::stringstream code_block;

/* import the parser's token type into a local typedef */
typedef example::Parser::token token;
typedef example::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1530 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 55 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1544 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1546 "scanner.cc"

#define INITIAL 0
#define PARSE_STATE_HLSLCODEBLOCK 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 79 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


#line 82 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
 /* code to place at the beginning of yylex() */

    BEGIN(INITIAL);
    // reset location
    yylloc->step();



#line 1751 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 904 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 903 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 23 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 23 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 24 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        BEGIN PARSE_STATE_HLSLCODEBLOCK;
        code_block.clear();
        code_block.str("");
    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 95 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(code_block.str());
    code_block.clear();
    code_block.str("");
    //BEGIN(INITIAL);
    return token::HLSL_CODE_BLOCK;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 102 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    code_block<<yytext;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 105 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    code_block<<std::endl;
    yylloc->lines(yyleng);yylloc->step();
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 112 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 113 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 114 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 115 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 116 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 117 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 118 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 119 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 121 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 126 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 127 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 146 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 153 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylloc->step();}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 155 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylloc->lines(yyleng); yylloc->step();}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 156 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return static_cast<token_type>(*yytext);}
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 23:
YY_RULE_SETUP
#line 161 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
ECHO;
	YY_BREAK
#line 1975 "scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSE_STATE_HLSLCODEBLOCK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Examplefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Examplefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Examplerealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Examplerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 904 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 904 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 903);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Examplealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Examplealloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Examplefree((void *) b->yy_ch_buf  );

	Examplefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Examplealloc(new_size  );

		else
			(yy_start_stack) = (int *) Examplerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Examplealloc (yy_size_t  size )
{
			return malloc(size);
}

void *Examplerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Examplefree (void * ptr )
{
			free( (char *) ptr );	/* see Examplerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 161 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


namespace example {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : ExampleFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int ExampleFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int ExampleFlexLexer::yywrap()
{
    return 1;
}

