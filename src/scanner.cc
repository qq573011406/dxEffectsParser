#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ExampleFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc Examplealloc

    #define yyrealloc Examplerealloc

    #define yyfree Examplefree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *Examplealloc ( yy_size_t  );
void *Examplerealloc ( void *, yy_size_t  );
void Examplefree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[885] =
    {   0,
        0,    0,    0,    0,   24,   22,   20,   21,   22,   16,
       16,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,    3,    4,    3,   20,    0,    6,   17,
       16,    0,   19,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,    3,    3,    0,    0,    6,    6,   17,   17,

       19,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,    3,    5,    6,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   14,   18,   18,   18,   18,   18,
       18,   18,   18,   18,    8,   18,    3,    6,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   15,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   13,   13,   18,   18,   18,    3,    6,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   13,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   10,   11,   12,   18,    3,    6,   18,   18,
       18,   18,   13,   18,   18,   13,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   13,
       18,   18,   18,   18,   18,   18,   13,   18,   18,   18,
       18,   18,    9,   18,    3,    6,   13,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,    3,
        6,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   13,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,    7,    3,    6,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        3,    6,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   13,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,    3,    6,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   13,   18,   18,    3,
        6,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   13,   18,   13,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   13,   18,    3,    6,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,    3,    6,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,    2,    6,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   13,   18,    1,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   13,   18,   18,   18,
       18,   18,   18,   18,   13,   18,   18,   13,   18,   18,
       18,   18,   18,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
       28,   34,   35,   36,   37,   38,   39,   28,   28,   40,
        1,    1,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        8,    6,    6,    6,    6,    6,    7,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    9,    6,    6
    } ;

static const flex_int16_t yy_base[895] =
    {   0,
        0,    0,   65,   67,  349, 3178,   70, 3178,   71,   70,
       71,   74,   76,   78,   80,   83,   91,   85,   87,  101,
      106,   89,  108,  117,  146,  115,  148,  110,    0,  164,
      166,   97,  170,    0, 3178,  333,   97,  322,  294,   64,
       95,    0,    0,   99,  176,  180,  183,  185,  190,  194,
      203,  205,  207,  211,  216,  226,  221,  228,  218,  233,
      235,  237,  239,  245,  248,  255,  250,  258,  263,  266,
      273,  280,  282,  290,  284,  292,  294,  305,  311,  307,
      315,  317,  319,  324,  326,  330,  333,    0,  337,  339,
      341,  350,    0,  281,  299,  294,    0,  265,  191, 3178,

        0,  352,  354,  356,  360,  362,  364,  367,  372,  374,
      378,  380,  386,  391,  393,  402,  398,  423,  406,  410,
      416,  412,  419,  428,  449,  425,  457,  441,  460,  463,
      466,  469,  471,  477,  479,  483,  485,  487,  489,  491,
      493,  498,  503,  509,  511,  513,  521,  527,  530,  532,
      537,  541,  544,  263, 3178,  249,  548,  553,  556,  558,
      560,  565,  571,  562,  569,  575,  577,  584,  601,  603,
      606,  608,  610,  612,  616,  619,  625,  627,  629,  635,
      637,  633,  642,  644,  647,  649,  654,  658,  663,  668,
      670,  672,  675,  677,  681,  683,  689,  694,  700,  703,

      708,  710,  713,  716,  718,  725,  727,  729,  733,  737,
      740,  784,  755,  745,  749,  752,  247,  246,  757,  802,
      761,  771,  764,  769,  776,  780,  808,  804,  812,  806,
      835,  837,  842,  844,  846,  848,  850,  855,  857,  860,
      862,  864,  866,  916,  868,  871,  875,  877,  873,  879,
      881,  884,  901,  905,  907,  911,  913,  887,  937,  922,
      947,  949,  956,  953,  958,  961,  963,  965,  967,  970,
      972,  974,  978,  983,  990,  985, 1011,  999,  238,  218,
     1002, 1009, 1013, 1021, 1023, 1025, 1028, 1033, 1035, 1037,
     1039, 1044, 1041, 1046, 1049, 1053, 1057, 1063, 1069, 1066,

     1071, 1075, 1078, 1081, 1083, 1094, 1097, 1103, 1107, 1114,
     1116, 1118, 1121, 1124, 1126, 1128, 1130, 1138, 1140, 1136,
     1142, 1144, 1146, 1149, 1153, 1151, 1155, 1158, 1162, 1168,
     1164, 1174, 1182, 1194, 1196, 1198, 1206, 1208, 1210, 1214,
     1223, 1219, 1225, 1227, 1230, 1232, 1235, 1238, 1241, 1243,
     1245, 1248, 1250, 1258, 1262, 1264,  206,  215, 1271, 1280,
     1283, 1286, 1289, 1291, 1293, 1295, 1299, 1305, 1307, 1309,
     1311, 1313, 1317, 1320, 1326, 1324, 1330, 1333, 1336, 1338,
     1340, 1342, 1344, 1357, 1363, 1367, 1369, 1371, 1379, 1374,
     1383, 1387, 1394, 1389, 1396, 1398, 1404, 1408, 1413, 1417,

     1420, 1425, 1427, 1430, 1437, 1439, 1442, 1434, 1445, 1451,
     1453, 1455, 1461, 1457, 1466, 1469, 1472, 1475, 1485, 1487,
     1498, 1489, 1500, 1502, 1505, 1507, 1526, 1509, 1515, 1520,
     1530, 1534, 1542, 1548,  209,  174, 1550, 1554, 1560, 1564,
     1566, 1571, 1568, 1574, 1576, 1580, 1582, 1588, 1590, 1592,
     1594, 1596, 1598, 1605, 1610, 1613, 1616, 1618, 1622, 1624,
     1626, 1635, 1637, 1641, 1630, 1647, 1649, 1654, 1651, 1656,
     1658, 1660, 1663, 1686, 1668, 1672, 1679, 1682, 1691, 1700,
     1684, 1704, 1706, 1708, 1719, 1721, 1725, 1727, 1736, 1733,
     1739, 1741, 1746, 1748, 1756, 1760, 1766, 1753, 1768, 1772,

     1780, 1782, 1776, 1784, 1786, 1794, 1798, 1804, 1806,  170,
      171, 1808, 1810, 1813, 1815, 1819, 1823, 1831, 1833, 1835,
     1837, 1840, 1842, 1844, 1848, 1854, 1857, 1862, 1866, 1869,
     1871, 1873, 1882, 1884, 1887, 1890, 1892, 1896, 1898, 1901,
     1909, 1912, 1916, 1919, 1921, 1923, 1925, 1935, 1940, 1943,
     1945, 1950, 1954, 1956, 1958, 1961, 1967, 1972, 1975, 1977,
     1979, 1986, 1991, 1993, 1995, 1997, 1999, 2001, 2003, 2008,
     2005, 2016, 2018, 2021, 2027, 2025, 2031,  162,  158, 2033,
     2035, 2053, 2044, 2055, 2058, 2061, 2069, 2071, 2073, 2075,
     2077, 2080, 2082, 2086, 2088, 2091, 2098, 2101, 2103, 2105,

     2107, 2109, 2112, 2116, 2119, 2122, 2126, 2128, 2131, 2133,
     2137, 2141, 2149, 2146, 2151, 2160, 2164, 2166, 2172, 2174,
     2178, 2176, 2187, 2191, 2193, 2197, 2205, 2201, 2207, 2209,
     2217, 2220, 2222, 2224, 2228, 2230, 2232, 2235, 2237, 2240,
      155,  134, 2242, 2244, 2246, 2249, 2254, 2256, 2265, 2273,
     2284, 2288, 2292, 2294, 2296, 2304, 2306, 2310, 2312, 2314,
     2316, 2318, 2320, 2322, 2324, 2326, 2328, 2337, 2349, 2330,
     2339, 2356, 2344, 2351, 2361, 2363, 2371, 2373, 2378, 2388,
     2390, 2392, 2398, 2400, 2402, 2404, 2407, 2410, 2413, 2415,
     2418, 2420, 2422,  124,  142, 2424, 2428, 2430, 2436, 2438,

     2433, 2445, 2442, 2447, 2451, 2455, 2457, 2461, 2466, 2479,
     2482, 2484, 2487, 2489, 2492, 2494, 2496, 2498, 2501, 2503,
     2505, 2507, 2509, 2516, 2518, 2520, 2524, 2526, 2528, 2530,
     2533, 2538, 2552, 2535, 2543, 2561, 2555, 2563, 2565,  123,
      121, 2571, 2580, 2583, 2587, 2589, 2591, 2597, 2599, 2603,
     2605, 2609, 2612, 2614, 2620, 2622, 2624, 2629, 2631, 2634,
     2637, 2640, 2644, 2646, 2650, 2652, 2654, 2656, 2659, 2662,
     2665, 2669, 2674, 2676,   94,   95, 2678, 2683, 2690, 2693,
     2700, 2704, 2706, 2710, 2712, 2716, 2720, 2726, 2728, 2730,
     2734, 2738, 2740, 2743, 2745, 2748, 2752, 2755, 2758, 2765,

     2767,   96,   82, 2769, 2772, 2775, 2777, 2786, 2788, 2792,
     2796, 2798, 2803, 2807, 2810, 2813, 2819, 2821, 2823, 2825,
     2829, 2831, 2834,    0,   69, 2842, 2844, 2847, 2849, 2854,
     2863, 2867, 2869, 2873, 2877, 2882, 2884, 2880,    0, 2886,
     2889, 2896, 2899, 2904, 2906, 2912, 2914, 2916, 2924, 2918,
     2926, 2928, 2930, 2932, 2936, 2939, 2943, 2951, 2956, 2959,
     2961, 2963, 2968, 2973, 2975, 2977, 3014, 2983, 2987, 2989,
     2997, 2999, 2992, 3002, 3007, 3016, 3022, 3041, 3033, 3049,
     3051, 3056, 3060, 3178, 3109, 3115, 3122, 3127, 3136, 3145,
     3154, 3159, 3161, 3168

    } ;

static const flex_int16_t yy_def[895] =
    {   0,
      884,    1,  885,  885,  884,  884,  884,  884,  884,  886,
      886,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  888,  887,
      887,  887,  887,  889,  884,  889,  884,  890,  891,  892,
      886,  893,  894,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  888,  887,  887,
      887,  887,  889,  889,  890,  890,  891,  891,  892,  884,

      894,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  889,  884,  891,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  889,  891,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  889,  891,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  889,  891,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  889,  891,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  889,
      891,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  889,  891,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      889,  891,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  889,  891,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  889,
      891,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  889,  891,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  889,  891,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  889,  891,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  891,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,    0,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884

    } ;

static const flex_int16_t yy_nxt[3246] =
    {   0,
        6,    7,    8,    7,    6,    6,    6,    9,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   13,
       14,   15,   16,   17,   18,   18,   19,   18,   20,   21,
       22,   18,   23,   24,   25,   26,   18,   27,   28,   18,
       29,   18,   18,   30,   18,   18,   31,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   32,   18,   18,   18,
       33,   18,   18,   18,   18,   18,   18,   35,   35,   35,
       35,   37,   36,   37,   36,   38,   40,   40,   39,   43,
       43,   43,   43,   43,   43,   43,   43,  100,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   37,  839,

       37,   40,   43,   43,   43,   43,   43,   43,  825,   57,
      100,   43,   43,   43,   43,   43,   43,  824,   45,  803,
       43,   43,   43,   43,  802,   54,   46,   47,   48,   55,
       51,   49,   57,   52,   42,  884,   56,   50,   91,   53,
       58,   60,   61,  776,   67,  775,   59,   64,   81,   68,
       62,   43,   43,   43,   43,   65,   63,   69,   72,  884,
       82,  741,   73,   70,  740,   86,   71,   66,   87,   43,
       43,   43,   43,   81,  695,   43,   43,  694,   83,   74,
      642,   43,   43,  641,   57,   43,   43,   75,   43,   43,
       43,   43,  579,   84,   76,   43,   43,   85,   77,   43,

       43,  578,   78,   81,   79,  511,   80,   57,   43,   43,
       43,   43,   43,   43,  100,   92,   43,   43,   90,   89,
      102,   43,   43,   43,   43,  104,   43,   43,   81,  510,
      105,   43,   43,   43,   43,  436,  103,  100,   43,   43,
       43,   43,   43,   43,   43,   43,  435,  107,  106,  116,
       43,   43,  108,   43,   43,   43,   43,  109,  358,  110,
       43,   43,  113,   43,   43,  118,  357,  111,   43,   43,
      112,   43,   43,  116,  280,  115,  114,  119,   43,   43,
      117,  279,  122,  218,  121,   43,   43,   43,   43,   43,
       43,  217,  123,  156,  120,   43,   43,   43,   43,   43,

       43,  155,  126,   96,  127,  124,  154,  128,  129,  125,
       43,   43,   43,   43,  136,  132,   43,   43,  130,   98,
       43,   43,   43,   43,   43,   43,   96,  131,  133,   43,
       43,   43,   43,  138,  134,   43,   43,  137,   43,   43,
       94,  135,   43,   43,   43,   43,   43,   43,  884,  139,
      140,  143,  142,  884,  141,   43,   43,   43,   43,   43,
       43,   43,   43,  884,  145,   43,   43,   43,   43,   43,
       43,  147,   43,   43,  149,  884,  143,   43,   43,   43,
       43,  144,  146,   43,   43,   43,   43,  884,  148,  884,
      150,   43,   43,  153,  151,  884,   43,   43,   43,   43,

      152,  884,  158,   43,   43,  159,  161,   43,   43,  884,
      157,   43,   43,  884,  160,   43,   43,   43,   43,  884,
      162,   43,   43,  163,   43,   43,  165,  164,   43,   43,
       43,   43,  168,   43,   43,  884,  171,  884,  166,  169,
      167,  884,  183,  173,  174,  175,   43,   43,  187,  884,
      172,  179,  170,  182,   43,   43,  884,  176,  177,  884,
      178,  171,   43,   43,  181,   43,   43,  185,   43,   43,
      180,   43,   43,  184,   43,   43,   43,   43,  186,  884,
      188,  884,   43,   43,   43,   43,  189,  884,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

      884,  190,  198,   43,   43,  884,  192,  884,   43,   43,
      884,  193,  203,  191,   43,   43,   43,   43,   43,   43,
      884,  195,  884,  194,  196,  205,   43,   43,  884,  206,
      884,  200,   43,   43,  202,   43,   43,   43,   43,  884,
      197,  199,   43,   43,  884,  201,   43,   43,  205,   43,
       43,  884,  204,   43,   43,  884,  208,  884,   43,   43,
      884,   43,   43,   43,   43,   43,   43,   43,   43,  207,
       43,   43,  884,  209,   43,   43,   43,   43,  214,  211,
       43,   43,   43,   43,  210,  884,  212,  224,  213,   43,
       43,  884,  216,  219,  220,  884,  230,  884,  228,  884,

      215,  221,  222,  225,  884,  223,   43,   43,   43,   43,
      884,   43,   43,   43,   43,   43,   43,   43,   43,  884,
      227,   43,   43,  229,   43,   43,  884,  226,  234,  884,
       43,   43,   43,   43,   43,   43,  884,  235,   43,   43,
       43,   43,   43,   43,  884,  231,  232,   43,   43,   43,
       43,  234,   43,   43,   43,   43,  884,  237,  884,   43,
       43,  884,  233,   43,   43,  236,  240,  243,   43,   43,
      238,  884,  241,   43,   43,   43,   43,   43,   43,  239,
       43,   43,   43,   43,  884,  245,   43,   43,   43,   43,
      884,  246,  884,  242,   43,   43,  884,  244,  249,   43,

       43,  248,  247,  250,  252,   43,   43,  251,   43,   43,
      884,  254,  884,   43,   43,   43,   43,  253,   43,   43,
      255,   43,   43,   43,   43,  884,  258,  256,  259,  261,
       43,   43,   43,   43,   43,   43,  884,  257,   43,   43,
      884,  260,   43,   43,  884,   43,   43,  884,  263,  884,
       43,   43,  262,  264,   43,   43,  884,   43,   43,  267,
       43,   43,   43,   43,  884,  266,   43,   43,  884,   43,
       43,  265,  272,  884,   43,   43,   43,   43,  271,  884,
      268,   43,   43,  270,  273,   43,   43,  884,  269,   43,
       43,  884,  274,  275,  274,  274,  274,  274,  274,  274,

      274,  274,  289,  884,  276,  277,  278,   43,   43,   43,
       43,   43,   43,   43,   43,  288,  281,   43,   43,  884,
      282,  283,  290,  291,  884,  284,  294,  884,  292,  293,
      884,  299,  884,  285,  884,  286,  884,  287,  884,  295,
       43,   43,   43,   43,  884,  296,  297,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,  884,  300,  298,
       43,   43,   43,   43,  884,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,  884,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,  884,   43,
       43,  303,   43,   43,  301,  302,  307,  884,  309,  308,

      305,  304,  310,  884,  306,  323,   43,   43,  884,  312,
       43,   43,   43,   43,  884,  313,   43,   43,   43,   43,
      311,   43,   43,  324,  325,  884,  326,   43,   43,  327,
      336,  328,  884,  329,  314,  331,  884,  315,  316,  317,
      330,  333,   43,   43,  884,  334,  884,  335,  318,  319,
      320,  321,   43,   43,   43,   43,  884,  332,   43,   43,
      337,   43,   43,   43,   43,  322,   43,   43,   43,   43,
       43,   43,   43,   43,  884,   43,   43,   43,   43,   43,
       43,  884,  338,   43,   43,  341,  884,  342,   43,   43,
       43,   43,  339,  348,  340,   43,   43,  884,  274,  274,

      274,  274,  274,  274,   43,   43,  344,   43,   43,  884,
      343,  884,  345,  351,   43,   43,   43,   43,   43,   43,
      346,  353,  354,  355,  884,  347,   43,   43,   43,   43,
       43,   43,  350,   43,   43,  884,  349,  352,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,  356,   43,
       43,   43,   43,  884,   43,   43,  884,  367,   43,   43,
      884,  359,   43,   43,  884,  361,  884,  360,   43,   43,
      364,   43,   43,  365,   43,   43,   43,   43,  884,  363,
       43,   43,  362,   43,   43,  369,   43,   43,   43,   43,
      884,  274,  884,  366,  884,  370,  884,  378,  372,   43,

       43,  368,   43,   43,  371,  363,  884,  374,   43,   43,
      884,  376,   43,   43,  884,  373,  377,  884,  375,   43,
       43,   43,   43,   43,   43,  380,   43,   43,  884,   43,
       43,   43,   43,   43,   43,   43,   43,  884,  381,  383,
      379,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,  382,   43,   43,   43,   43,   43,   43,
       43,   43,  387,   43,   43,  384,  385,   43,   43,   43,
       43,  393,  884,   43,   43,  391,  386,  389,  884,   43,
       43,  396,  392,  405,  390,  388,  394,   43,   43,  884,
      398,  884,  397,  395,  403,  401,  408,  884,  400,   43,

       43,   43,   43,   43,   43,  409,  884,  399,  884,  402,
      404,   43,   43,   43,   43,   43,   43,  884,  406,   43,
       43,  884,  407,  410,   43,   43,  418,  411,   43,   43,
       43,   43,   43,   43,  884,   43,   43,   43,   43,  413,
       43,   43,  412,   43,   43,  414,   43,   43,   43,   43,
       43,   43,  415,   43,   43,   43,   43,  884,  416,  884,
      429,  417,  422,   43,   43,  884,  423,   43,   43,   43,
       43,  884,  420,  884,  419,  430,   43,   43,  421,  428,
      427,  424,  425,  884,  431,   43,   43,  884,   43,   43,
      426,   43,   43,  433,   43,   43,   43,   43,   43,   43,

       43,   43,  884,  432,   43,   43,  884,  437,  437,  437,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
      884,  434,   43,   43,  442,   43,   43,  438,  439,   43,
       43,   43,   43,  444,  445,   43,   43,  274,   43,   43,
      440,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,  884,  441,  884,  443,  884,  308,  884,  447,  452,
      884,  446,   43,   43,  884,  308,  449,  450,   43,   43,
      884,  448,   43,   43,   43,   43,   43,   43,  451,   43,
       43,  454,  884,  274,   43,   43,  884,  453,   43,   43,
      884,  455,   43,   43,   43,   43,  456,  884,  308,   43,

       43,   43,   43,   43,   43,  884,  459,  884,  457,   43,
       43,  884,  458,   43,   43,  884,  460,  308,   43,   43,
      884,  461,   43,   43,  884,   43,   43,  884,  465,  463,
       43,   43,   43,   43,  462,   43,   43,  884,  420,   43,
       43,  464,   43,   43,   43,   43,  466,   43,   43,  469,
       43,   43,  468,  470,  884,  467,   43,   43,   43,   43,
       43,   43,   43,   43,  308,  472,   43,   43,  884,  471,
      473,   43,   43,  884,   43,   43,  884,   43,   43,  474,
       43,   43,  476,  884,  477,  475,  884,  478,  884,  479,
       43,   43,   43,   43,   43,   43,  483,  884,  480,  884,

      482,  884,  484,   43,   43,   43,   43,   43,   43,  884,
       43,   43,   43,   43,   43,   43,  884,  481,  487,  488,
       43,   43,  884,  485,  486,   43,   43,  494,  495,  884,
      492,   43,   43,  489,  496,   43,   43,  497,  498,   43,
       43,  884,  491,  499,  500,  490,  274,   43,   43,  502,
      884,  501,  504,   43,   43,   43,   43,  884,  493,   43,
       43,  503,  363,  363,  363,   43,   43,  505,  506,   43,
       43,   43,   43,   43,   43,  508,   43,   43,  884,   43,
       43,   43,   43,  884,  507,   43,   43,   43,   43,  884,
      363,  363,  363,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,  516,  884,  274,  517,  509,
       43,   43,  514,  884,  512,   43,   43,  518,   43,   43,
      515,   43,   43,   43,   43,  519,  513,   43,   43,   43,
       43,   43,   43,  884,  524,   43,   43,  522,  274,  523,
       43,   43,   43,   43,  884,  526,   43,   43,  520,  884,
      521,  274,   43,   43,   43,   43,   43,   43,  308,   43,
       43,   43,   43,   43,   43,   43,   43,  528,   43,   43,
      525,  884,  533,   43,   43,  529,  274,   43,   43,  884,
      530,  884,  527,  531,   43,   43,  532,   43,   43,   43,
       43,   43,   43,  884,  537,  884,   43,   43,  535,  534,

      884,  536,  884,  420,  540,   43,   43,  541,  542,   43,
       43,   43,   43,   43,   43,  884,  538,  884,  543,  884,
      544,  437,  884,  539,   43,   43,   43,   43,  545,  549,
       43,   43,   43,   43,  546,  547,  884,  437,   43,   43,
      437,   43,   43,  884,   43,   43,   43,   43,  884,  556,
      551,   43,   43,   43,   43,  884,  548,  550,   43,   43,
      552,   43,   43,  884,  553,   43,   43,  884,  559,  884,
      554,   43,   43,   43,   43,  560,  884,   43,   43,  884,
      555,   43,   43,  363,  274,   43,   43,   43,   43,   43,
       43,   43,   43,  558,  557,  568,  884,  562,  566,   43,

       43,  564,  561,   43,   43,  884,  569,  565,  884,   43,
       43,   43,   43,   43,   43,   43,   43,  563,   43,   43,
       43,   43,  884,  570,   43,   43,  567,  884,   43,   43,
      884,  573,  581,  884,  571,  574,   43,   43,   43,   43,
       43,   43,   43,   43,  572,   43,   43,   43,   43,   43,
       43,  577,  580,   43,   43,  587,  884,  575,  576,   43,
       43,  884,   43,   43,  884,  584,  585,   43,   43,  884,
      583,   43,   43,  582,   43,   43,   43,   43,   43,   43,
      588,  884,  589,  884,  591,  592,  594,   43,   43,   43,
       43,  586,   43,   43,  884,   43,   43,   43,   43,  884,

      590,   43,   43,   43,   43,  884,   43,   43,  884,  593,
      884,  596,  884,  308,   43,   43,  599,   43,   43,  884,
      595,   43,   43,  597,   43,   43,   43,   43,   43,   43,
       43,   43,  598,  884,  600,  420,  884,  420,  884,  601,
       43,   43,  884,  604,  612,   43,   43,  602,   43,   43,
       43,   43,  884,  603,  605,   43,   43,  884,  606,   43,
       43,   43,   43,   43,   43,  607,   43,   43,  611,  884,
      614,  608,   43,   43,  884,  609,  884,   43,   43,  610,
       43,   43,   43,   43,   43,   43,  884,  613,  615,  884,
      616,   43,   43,  884,  618,  617,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,  620,   43,   43,  621,  619,  623,  625,  884,
      626,   43,   43,   43,   43,  622,   43,   43,  884,  624,
       43,   43,   43,   43,  884,  627,   43,   43,   43,   43,
       43,   43,  632,  274,  884,  628,  635,  884,  631,   43,
       43,  634,  629,  884,  630,  643,  884,  633,   43,   43,
       43,   43,  884,   43,   43,  638,   43,   43,  884,  648,
      649,  636,  637,  639,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,  640,   43,   43,   43,   43,  644,
      884,   43,   43,   43,   43,  651,   43,   43,  645,  647,

      884,  646,  437,   43,   43,  884,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,  884,   43,   43,  884,
      652,   43,   43,  650,   43,   43,  655,   43,   43,  653,
      884,   43,   43,   43,   43,  308,   43,   43,   43,   43,
      654,  656,   43,   43,  884,  658,   43,   43,  657,  884,
      420,   43,   43,  662,   43,   43,   43,   43,  663,  659,
      660,  665,  884,  661,  664,   43,   43,  884,  666,   43,
       43,   43,   43,  884,  308,  667,  669,   43,   43,   43,
       43,   43,   43,   43,   43,  884,  676,  884,  670,  437,
      671,  668,   43,   43,  672,  678,   43,   43,   43,   43,

      884,  673,   43,   43,  677,  674,   43,   43,  682,  680,
       43,   43,   43,   43,   43,   43,  884,  679,  675,  681,
      884,  437,   43,   43,  884,   43,   43,   43,   43,   43,
       43,  884,  683,   43,   43,   43,   43,   43,   43,  685,
       43,   43,   43,   43,  274,   43,   43,   43,   43,   43,
       43,   43,   43,  684,   43,   43,  884,  274,  274,   43,
       43,   43,   43,  884,  363,  363,  688,  884,  274,  687,
       43,   43,  884,  363,  363,  884,  308,  686,   43,   43,
      691,  884,  690,  884,  689,  697,  693,  884,  308,   43,
       43,  884,  692,   43,   43,  884,  696,   43,   43,   43,

       43,   43,   43,  884,  698,  884,  700,  884,  699,   43,
       43,   43,   43,  884,  701,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,  274,  702,  704,
      884,  308,   43,   43,   43,   43,  703,  884,  705,   43,
       43,  706,  884,  707,   43,   43,   43,   43,  884,  420,
      884,   43,   43,  710,  420,  708,   43,   43,   43,   43,
      420,  884,  712,  711,  718,  709,   43,   43,   43,   43,
      717,  722,  714,   43,   43,  719,  716,  713,  884,  308,
      308,  308,  715,   43,   43,   43,   43,   43,   43,  884,

      726,  884,  720,   43,   43,   43,   43,   43,   43,   43,
       43,  721,   43,   43,  724,   43,   43,  723,   43,   43,
       43,   43,  725,   43,   43,   43,   43,   43,   43,   43,
       43,  884,  728,   43,   43,   43,   43,  729,   43,   43,
      730,   43,   43,   43,   43,  731,  727,   43,   43,  733,
       43,   43,   43,   43,  732,  734,   43,   43,  884,  274,
       43,   43,   43,   43,  884,  742,   43,   43,  735,  884,
      743,   43,   43,  884,  736,  746,  737,  739,  738,  744,
      884,  745,  884,  363,   43,   43,  747,   43,   43,   43,
       43,  748,   43,   43,   43,   43,  308,   43,   43,   43,

       43,   43,   43,   43,   43,  749,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,  752,  751,  884,  750,
      420,   43,   43,   43,   43,   43,   43,  753,  884,   43,
       43,   43,   43,   43,   43,   43,   43,  420,   43,   43,
       43,   43,  760,   43,   43,  754,  755,  756,   43,   43,
      763,  884,  759,  757,  884,  437,  761,   43,   43,  758,
       43,   43,  762,  884,  308,  765,   43,   43,   43,   43,
       43,   43,  308,  884,  764,  772,   43,   43,  766,  884,
      308,  770,  768,  274,  767,   43,   43,  884,   43,   43,
      884,  769,   43,   43,   43,   43,   43,   43,  884,  363,

      884,  274,   43,   43,   43,   43,  884,  771,   43,   43,
       43,   43,  884,  777,   43,   43,  773,   43,   43,   43,
       43,  884,  784,  774,  779,   43,   43,   43,   43,   43,
       43,  884,  778,  781,   43,   43,   43,   43,  782,   43,
       43,  780,   43,   43,  884,   43,   43,  363,  783,   43,
       43,   43,   43,  884,  785,   43,   43,   43,   43,   43,
       43,   43,   43,  420,   43,   43,  786,   43,   43,  788,
       43,   43,  884,  787,   43,   43,  789,  884,  792,   43,
       43,   43,   43,   43,   43,  884,  794,  795,   43,   43,
      884,  790,  884,  791,  793,   43,   43,  308,   43,   43,

      884,  308,  884,  799,  796,   43,   43,  884,  798,   43,
       43,   43,   43,  884,  797,   43,   43,   43,   43,  884,
      800,   43,   43,  884,  801,   43,   43,  884,  274,  773,
      804,   43,   43,   43,   43,   43,   43,  884,  308,   43,
       43,  884,  805,   43,   43,   43,   43,  808,   43,   43,
       43,   43,  806,   43,   43,  884,  807,   43,   43,  884,
       43,   43,  809,   43,   43,  756,  884,  810,  884,  812,
       43,   43,   43,   43,   43,   43,  756,   43,   43,  813,
       43,   43,   43,   43,  884,  308,  884,  817,  811,  884,
      814,   43,   43,   43,   43,  816,  820,   43,   43,  815,

      819,   43,   43,   43,   43,  884,  826,  818,   43,   43,
      884,  827,   43,   43,  274,   43,   43,  821,   43,   43,
      274,  823,  884,  822,   43,   43,   43,   43,   43,   43,
       43,   43,  884,  829,   43,   43,   43,   43,  828,   43,
       43,  756,  835,  884,  831,  884,  830,   43,   43,   43,
       43,  884,   43,   43,   43,   43,  756,  884,  308,   43,
       43,  884,  420,  420,  420,  884,  308,  834,   43,   43,
      832,  833,   43,   43,   43,   43,  884,  836,   43,   43,
      274,  842,   43,   43,  837,   43,   43,   43,   43,   43,
       43,   43,   43,  838,   43,   43,  884,  840,  884,  841,

      884,   43,   43,  843,   43,   43,  884,  849,  845,   43,
       43,   43,   43,  884,  308,  844,  848,   43,   43,   43,
       43,   43,   43,   43,   43,  884,  847,  884,  846,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,  884,
      850,   43,   43,  854,   43,   43,  884,  851,   43,   43,
      852,  853,  884,  855,  865,  858,   43,   43,  884,  861,
      856,   43,   43,  884,   43,   43,   43,   43,   43,   43,
      857,  859,  884,   43,   43,  884,  860,  866,   43,   43,
       43,   43,   43,   43,  862,  884,  863,  884,   43,   43,
      884,  864,   43,   43,   43,   43,  773,   43,   43,  867,

      869,  884,   43,   43,   43,   43,  871,   43,   43,  884,
      274,  872,   43,   43,  884,  870,  884,  868,  884,   43,
       43,   43,   43,  875,  875,  875,  875,   43,   43,  874,
      884,  873,  884,  875,  877,  879,  308,  875,   43,   43,
      875,  876,  308,  880,  308,  884,   43,   43,  884,  878,
      875,  875,  875,  875,   43,   43,   43,   43,  884,  881,
      875,   43,   43,  884,  875,   43,   43,  875,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  308,  884,
      884,  363,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  882,  884,  884,  884,  884,  308,  884,  884,  884,

      884,  884,  884,  884,  884,  308,  884,  884,  883,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   41,   41,
      884,  884,  884,   41,   44,   44,   44,   44,   44,   44,
       44,   88,   88,   88,   88,   88,   93,  884,   93,   93,
       93,   93,   93,   93,   93,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   97,  884,   97,   97,   97,   97,
       97,   97,   97,   99,  884,   99,  101,  101,  884,  101,
       43,   43,   43,   43,   43,   43,   43,    5,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,

      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884
    } ;

static const flex_int16_t yy_chk[3246] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    7,    3,    7,    4,    9,   10,   11,    9,   12,
       12,   13,   13,   14,   14,   15,   15,   40,   16,   16,
       18,   18,   19,   19,   22,   22,   17,   17,   37,  825,

       37,   41,   32,   32,   44,   44,   20,   20,  803,   17,
       40,   21,   21,   23,   23,   28,   28,  802,   12,  776,
       26,   26,   24,   24,  775,   15,   12,   12,   13,   15,
       14,   13,   17,   14,   10,   11,   16,   13,   32,   14,
       17,   19,   20,  741,   22,  740,   17,   21,   26,   23,
       20,   25,   25,   27,   27,   21,   20,   23,   24,   41,
       26,  695,   24,   23,  694,   28,   23,   21,   28,   30,
       30,   31,   31,   26,  642,   33,   33,  641,   26,   25,
      579,   45,   45,  578,   31,   46,   46,   25,   47,   47,
       48,   48,  511,   27,   25,   49,   49,   27,   25,   50,

       50,  510,   25,   33,   25,  436,   25,   31,   51,   51,
       52,   52,   53,   53,   99,   33,   54,   54,   31,   30,
       45,   55,   55,   59,   59,   47,   57,   57,   33,  435,
       48,   56,   56,   58,   58,  358,   46,   99,   60,   60,
       61,   61,   62,   62,   63,   63,  357,   50,   49,   57,
       64,   64,   51,   65,   65,   67,   67,   52,  280,   53,
       66,   66,   55,   68,   68,   59,  279,   54,   69,   69,
       54,   70,   70,   57,  218,   56,   55,   60,   71,   71,
       58,  217,   63,  156,   62,   72,   72,   73,   73,   75,
       75,  154,   64,   98,   61,   74,   74,   76,   76,   77,

       77,   96,   65,   95,   65,   64,   94,   66,   67,   64,
       78,   78,   80,   80,   74,   70,   79,   79,   68,   39,
       81,   81,   82,   82,   83,   83,   38,   69,   71,   84,
       84,   85,   85,   76,   72,   86,   86,   75,   87,   87,
       36,   73,   89,   89,   90,   90,   91,   91,    5,   77,
       78,   81,   80,    0,   79,   92,   92,  102,  102,  103,
      103,  104,  104,    0,   83,  105,  105,  106,  106,  107,
      107,   85,  108,  108,   87,    0,   81,  109,  109,  110,
      110,   82,   84,  111,  111,  112,  112,    0,   86,    0,
       89,  113,  113,   92,   90,    0,  114,  114,  115,  115,

       91,    0,  103,  117,  117,  104,  106,  116,  116,    0,
      102,  119,  119,    0,  105,  120,  120,  122,  122,    0,
      107,  121,  121,  108,  123,  123,  110,  109,  118,  118,
      126,  126,  113,  124,  124,    0,  116,    0,  111,  114,
      112,    0,  123,  118,  118,  118,  128,  128,  126,    0,
      117,  119,  115,  122,  125,  125,    0,  118,  118,    0,
      118,  116,  127,  127,  121,  129,  129,  125,  130,  130,
      120,  131,  131,  124,  132,  132,  133,  133,  125,    0,
      127,    0,  134,  134,  135,  135,  127,    0,  136,  136,
      137,  137,  138,  138,  139,  139,  140,  140,  141,  141,

        0,  128,  136,  142,  142,    0,  130,    0,  143,  143,
        0,  131,  141,  129,  144,  144,  145,  145,  146,  146,
        0,  133,    0,  132,  134,  143,  147,  147,    0,  144,
        0,  138,  148,  148,  140,  149,  149,  150,  150,    0,
      135,  137,  151,  151,    0,  139,  152,  152,  143,  153,
      153,    0,  142,  157,  157,    0,  145,    0,  158,  158,
        0,  159,  159,  160,  160,  161,  161,  164,  164,  144,
      162,  162,    0,  146,  165,  165,  163,  163,  151,  148,
      166,  166,  167,  167,  147,    0,  149,  162,  150,  168,
      168,    0,  153,  157,  158,    0,  167,    0,  165,    0,

      152,  159,  160,  163,    0,  161,  169,  169,  170,  170,
        0,  171,  171,  172,  172,  173,  173,  174,  174,    0,
      164,  175,  175,  166,  176,  176,    0,  163,  171,    0,
      177,  177,  178,  178,  179,  179,    0,  172,  182,  182,
      180,  180,  181,  181,    0,  168,  169,  183,  183,  184,
      184,  171,  185,  185,  186,  186,    0,  174,    0,  187,
      187,    0,  170,  188,  188,  173,  177,  180,  189,  189,
      175,    0,  178,  190,  190,  191,  191,  192,  192,  176,
      193,  193,  194,  194,    0,  182,  195,  195,  196,  196,
        0,  183,    0,  179,  197,  197,    0,  181,  186,  198,

      198,  185,  184,  187,  189,  199,  199,  188,  200,  200,
        0,  191,    0,  201,  201,  202,  202,  190,  203,  203,
      192,  204,  204,  205,  205,    0,  195,  193,  196,  198,
      206,  206,  207,  207,  208,  208,    0,  194,  209,  209,
        0,  197,  210,  210,    0,  211,  211,    0,  200,    0,
      214,  214,  199,  201,  215,  215,    0,  216,  216,  204,
      213,  213,  219,  219,    0,  203,  221,  221,    0,  223,
      223,  202,  210,    0,  224,  224,  222,  222,  209,    0,
      206,  225,  225,  208,  211,  226,  226,    0,  207,  212,
      212,    0,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  222,    0,  213,  214,  216,  220,  220,  228,
      228,  230,  230,  227,  227,  221,  219,  229,  229,    0,
      220,  220,  223,  224,    0,  220,  227,    0,  225,  226,
        0,  229,    0,  220,    0,  220,    0,  220,    0,  227,
      231,  231,  232,  232,    0,  227,  227,  233,  233,  234,
      234,  235,  235,  236,  236,  237,  237,    0,  230,  228,
      238,  238,  239,  239,    0,  240,  240,  241,  241,  242,
      242,  243,  243,  245,  245,    0,  246,  246,  249,  249,
      247,  247,  248,  248,  250,  250,  251,  251,    0,  252,
      252,  233,  258,  258,  231,  232,  238,    0,  239,  238,

      236,  235,  240,    0,  237,  245,  253,  253,    0,  242,
      254,  254,  255,  255,    0,  243,  256,  256,  257,  257,
      241,  244,  244,  246,  247,    0,  248,  260,  260,  249,
      258,  250,    0,  251,  244,  253,    0,  244,  244,  244,
      252,  255,  259,  259,    0,  256,    0,  257,  244,  244,
      244,  244,  261,  261,  262,  262,    0,  254,  264,  264,
      259,  263,  263,  265,  265,  244,  266,  266,  267,  267,
      268,  268,  269,  269,    0,  270,  270,  271,  271,  272,
      272,    0,  260,  273,  273,  263,    0,  264,  274,  274,
      276,  276,  261,  270,  262,  275,  275,    0,  275,  275,

      275,  275,  275,  275,  278,  278,  266,  281,  281,    0,
      265,    0,  267,  273,  282,  282,  277,  277,  283,  283,
      268,  277,  277,  277,    0,  269,  284,  284,  285,  285,
      286,  286,  272,  287,  287,    0,  271,  276,  288,  288,
      289,  289,  290,  290,  291,  291,  293,  293,  278,  292,
      292,  294,  294,    0,  295,  295,    0,  290,  296,  296,
        0,  281,  297,  297,    0,  283,    0,  282,  298,  298,
      286,  300,  300,  287,  299,  299,  301,  301,    0,  285,
      302,  302,  284,  303,  303,  292,  304,  304,  305,  305,
        0,  289,    0,  288,    0,  293,    0,  302,  296,  306,

      306,  291,  307,  307,  294,  295,    0,  298,  308,  308,
        0,  300,  309,  309,    0,  297,  301,    0,  299,  310,
      310,  311,  311,  312,  312,  304,  313,  313,    0,  314,
      314,  315,  315,  316,  316,  317,  317,    0,  305,  307,
      303,  320,  320,  318,  318,  319,  319,  321,  321,  322,
      322,  323,  323,  306,  324,  324,  326,  326,  325,  325,
      327,  327,  312,  328,  328,  309,  310,  329,  329,  331,
      331,  317,    0,  330,  330,  315,  311,  314,    0,  332,
      332,  319,  316,  327,  314,  313,  318,  333,  333,    0,
      321,    0,  320,  318,  325,  323,  330,    0,  322,  334,

      334,  335,  335,  336,  336,  331,    0,  321,    0,  324,
      326,  337,  337,  338,  338,  339,  339,    0,  328,  340,
      340,    0,  329,  332,  342,  342,  338,  333,  341,  341,
      343,  343,  344,  344,    0,  345,  345,  346,  346,  335,
      347,  347,  334,  348,  348,  335,  349,  349,  350,  350,
      351,  351,  335,  352,  352,  353,  353,    0,  336,    0,
      349,  337,  342,  354,  354,    0,  343,  355,  355,  356,
      356,    0,  340,    0,  339,  349,  359,  359,  341,  348,
      347,  344,  345,    0,  350,  360,  360,    0,  361,  361,
      346,  362,  362,  352,  363,  363,  364,  364,  365,  365,

      366,  366,    0,  351,  367,  367,    0,  359,  359,  359,
      368,  368,  369,  369,  370,  370,  371,  371,  372,  372,
        0,  356,  373,  373,  366,  374,  374,  360,  361,  376,
      376,  375,  375,  368,  368,  377,  377,  364,  378,  378,
      362,  379,  379,  380,  380,  381,  381,  382,  382,  383,
      383,    0,  365,    0,  367,    0,  370,    0,  371,  377,
        0,  369,  384,  384,    0,  374,  373,  375,  385,  385,
        0,  372,  386,  386,  387,  387,  388,  388,  376,  390,
      390,  379,    0,  380,  389,  389,    0,  378,  391,  391,
        0,  382,  392,  392,  394,  394,  383,    0,  381,  393,

      393,  395,  395,  396,  396,    0,  387,    0,  385,  397,
      397,    0,  386,  398,  398,    0,  388,  384,  399,  399,
        0,  389,  400,  400,    0,  401,  401,    0,  392,  391,
      402,  402,  403,  403,  390,  404,  404,    0,  394,  408,
      408,  391,  405,  405,  406,  406,  393,  407,  407,  397,
      409,  409,  396,  398,    0,  395,  410,  410,  411,  411,
      412,  412,  414,  414,  400,  401,  413,  413,    0,  399,
      402,  415,  415,    0,  416,  416,    0,  417,  417,  403,
      418,  418,  405,    0,  406,  404,    0,  407,    0,  408,
      419,  419,  420,  420,  422,  422,  412,    0,  409,    0,

      411,    0,  413,  421,  421,  423,  423,  424,  424,    0,
      425,  425,  426,  426,  428,  428,    0,  410,  416,  417,
      429,  429,    0,  414,  415,  430,  430,  425,  425,    0,
      422,  427,  427,  418,  425,  431,  431,  425,  425,  432,
      432,    0,  421,  425,  425,  419,  424,  433,  433,  427,
        0,  426,  428,  434,  434,  437,  437,    0,  423,  438,
      438,  427,  438,  438,  438,  439,  439,  429,  430,  440,
      440,  441,  441,  443,  443,  432,  442,  442,    0,  444,
      444,  445,  445,    0,  431,  446,  446,  447,  447,    0,
      447,  447,  447,  448,  448,  449,  449,  450,  450,  451,

      451,  452,  452,  453,  453,  444,    0,  440,  444,  434,
      454,  454,  442,    0,  439,  455,  455,  445,  456,  456,
      443,  457,  457,  458,  458,  446,  441,  459,  459,  460,
      460,  461,  461,    0,  454,  465,  465,  452,  451,  453,
      462,  462,  463,  463,    0,  457,  464,  464,  448,    0,
      449,  450,  466,  466,  467,  467,  469,  469,  456,  468,
      468,  470,  470,  471,  471,  472,  472,  459,  473,  473,
      455,    0,  465,  475,  475,  461,  460,  476,  476,    0,
      462,    0,  458,  463,  477,  477,  464,  478,  478,  481,
      481,  474,  474,    0,  469,    0,  479,  479,  467,  466,

        0,  468,    0,  471,  474,  480,  480,  474,  474,  482,
      482,  483,  483,  484,  484,    0,  470,    0,  474,    0,
      474,  473,    0,  472,  485,  485,  486,  486,  475,  481,
      487,  487,  488,  488,  476,  479,    0,  477,  490,  490,
      478,  489,  489,    0,  491,  491,  492,  492,    0,  488,
      483,  493,  493,  494,  494,    0,  480,  482,  498,  498,
      484,  495,  495,    0,  485,  496,  496,    0,  493,    0,
      486,  497,  497,  499,  499,  493,    0,  500,  500,    0,
      487,  503,  503,  489,  491,  501,  501,  502,  502,  504,
      504,  505,  505,  492,  490,  500,    0,  495,  498,  506,

      506,  496,  494,  507,  507,    0,  501,  497,    0,  508,
      508,  509,  509,  512,  512,  513,  513,  495,  514,  514,
      515,  515,    0,  502,  516,  516,  499,    0,  517,  517,
        0,  505,  513,    0,  503,  506,  518,  518,  519,  519,
      520,  520,  521,  521,  504,  522,  522,  523,  523,  524,
      524,  509,  512,  525,  525,  519,    0,  507,  508,  526,
      526,    0,  527,  527,    0,  516,  517,  528,  528,    0,
      515,  529,  529,  514,  530,  530,  531,  531,  532,  532,
      520,    0,  521,    0,  523,  524,  527,  533,  533,  534,
      534,  518,  535,  535,    0,  536,  536,  537,  537,    0,

      522,  538,  538,  539,  539,    0,  540,  540,    0,  526,
        0,  529,    0,  525,  541,  541,  532,  542,  542,    0,
      528,  543,  543,  530,  544,  544,  545,  545,  546,  546,
      547,  547,  531,    0,  533,  536,    0,  538,    0,  534,
      548,  548,    0,  539,  547,  549,  549,  535,  550,  550,
      551,  551,    0,  537,  540,  552,  552,    0,  541,  553,
      553,  554,  554,  555,  555,  542,  556,  556,  546,    0,
      549,  543,  557,  557,    0,  544,    0,  558,  558,  545,
      559,  559,  560,  560,  561,  561,    0,  548,  550,    0,
      551,  562,  562,    0,  553,  552,  563,  563,  564,  564,

      565,  565,  566,  566,  567,  567,  568,  568,  569,  569,
      571,  571,  555,  570,  570,  556,  554,  558,  560,    0,
      561,  572,  572,  573,  573,  557,  574,  574,    0,  559,
      576,  576,  575,  575,    0,  562,  577,  577,  580,  580,
      581,  581,  568,  566,    0,  563,  571,    0,  567,  583,
      583,  570,  564,    0,  565,  580,    0,  569,  582,  582,
      584,  584,    0,  585,  585,  574,  586,  586,    0,  586,
      586,  572,  573,  575,  587,  587,  588,  588,  589,  589,
      590,  590,  591,  591,  576,  592,  592,  593,  593,  581,
        0,  594,  594,  595,  595,  589,  596,  596,  582,  585,

        0,  584,  583,  597,  597,    0,  598,  598,  599,  599,
      600,  600,  601,  601,  602,  602,    0,  603,  603,    0,
      590,  604,  604,  587,  605,  605,  593,  606,  606,  591,
        0,  607,  607,  608,  608,  588,  609,  609,  610,  610,
      592,  594,  611,  611,    0,  596,  612,  612,  595,    0,
      600,  614,  614,  601,  613,  613,  615,  615,  602,  597,
      598,  605,    0,  599,  603,  616,  616,    0,  606,  617,
      617,  618,  618,    0,  604,  607,  609,  619,  619,  620,
      620,  622,  622,  621,  621,    0,  617,    0,  610,  611,
      612,  608,  623,  623,  613,  618,  624,  624,  625,  625,

        0,  614,  626,  626,  617,  615,  628,  628,  623,  620,
      627,  627,  629,  629,  630,  630,    0,  619,  616,  621,
        0,  622,  631,  631,    0,  632,  632,  633,  633,  634,
      634,    0,  624,  635,  635,  636,  636,  637,  637,  626,
      638,  638,  639,  639,  628,  640,  640,  643,  643,  644,
      644,  645,  645,  625,  646,  646,    0,  627,  629,  647,
      647,  648,  648,    0,  648,  648,  633,    0,  630,  632,
      649,  649,    0,  649,  649,    0,  637,  631,  650,  650,
      638,    0,  635,    0,  634,  644,  640,    0,  636,  651,
      651,    0,  639,  652,  652,    0,  643,  653,  653,  654,

      654,  655,  655,    0,  645,    0,  647,    0,  646,  656,
      656,  657,  657,    0,  650,  658,  658,  659,  659,  660,
      660,  661,  661,  662,  662,  663,  663,  664,  664,  665,
      665,  666,  666,  667,  667,  670,  670,  653,  651,  654,
        0,  655,  668,  668,  671,  671,  652,    0,  656,  673,
      673,  657,    0,  659,  669,  669,  674,  674,    0,  660,
        0,  672,  672,  664,  662,  661,  675,  675,  676,  676,
      658,    0,  666,  665,  672,  663,  677,  677,  678,  678,
      671,  675,  668,  679,  679,  672,  670,  667,    0,  677,
      677,  677,  669,  680,  680,  681,  681,  682,  682,    0,

      679,    0,  673,  683,  683,  684,  684,  685,  685,  686,
      686,  674,  687,  687,  678,  688,  688,  676,  689,  689,
      690,  690,  678,  691,  691,  692,  692,  693,  693,  696,
      696,    0,  681,  697,  697,  698,  698,  682,  701,  701,
      683,  699,  699,  700,  700,  684,  680,  703,  703,  686,
      702,  702,  704,  704,  685,  688,  705,  705,    0,  687,
      706,  706,  707,  707,    0,  696,  708,  708,  689,    0,
      697,  709,  709,    0,  690,  701,  691,  693,  692,  698,
        0,  699,    0,  700,  710,  710,  702,  711,  711,  712,
      712,  703,  713,  713,  714,  714,  705,  715,  715,  716,

      716,  717,  717,  718,  718,  704,  719,  719,  720,  720,
      721,  721,  722,  722,  723,  723,  708,  707,    0,  706,
      709,  724,  724,  725,  725,  726,  726,  711,    0,  727,
      727,  728,  728,  729,  729,  730,  730,  710,  731,  731,
      734,  734,  719,  732,  732,  712,  713,  714,  735,  735,
      723,    0,  718,  715,    0,  717,  720,  733,  733,  716,
      737,  737,  722,    0,  721,  727,  736,  736,  738,  738,
      739,  739,  725,    0,  726,  737,  742,  742,  728,    0,
      724,  733,  730,  732,  729,  743,  743,    0,  744,  744,
        0,  731,  745,  745,  746,  746,  747,  747,    0,  734,

        0,  735,  748,  748,  749,  749,    0,  736,  750,  750,
      751,  751,    0,  742,  752,  752,  738,  753,  753,  754,
      754,    0,  750,  739,  744,  755,  755,  756,  756,  757,
      757,    0,  743,  747,  758,  758,  759,  759,  748,  760,
      760,  746,  761,  761,    0,  762,  762,  745,  749,  763,
      763,  764,  764,    0,  751,  765,  765,  766,  766,  767,
      767,  768,  768,  752,  769,  769,  753,  770,  770,  755,
      771,  771,    0,  754,  772,  772,  757,    0,  761,  773,
      773,  774,  774,  777,  777,    0,  763,  764,  778,  778,
        0,  759,    0,  760,  762,  779,  779,  766,  780,  780,

        0,  768,    0,  770,  765,  781,  781,    0,  769,  782,
      782,  783,  783,    0,  767,  784,  784,  785,  785,    0,
      771,  786,  786,    0,  772,  787,  787,    0,  778,  774,
      777,  788,  788,  789,  789,  790,  790,    0,  780,  791,
      791,    0,  779,  792,  792,  793,  793,  783,  794,  794,
      795,  795,  781,  796,  796,    0,  782,  797,  797,    0,
      798,  798,  784,  799,  799,  787,    0,  785,    0,  789,
      800,  800,  801,  801,  804,  804,  786,  805,  805,  790,
      806,  806,  807,  807,    0,  791,    0,  795,  788,    0,
      792,  808,  808,  809,  809,  794,  798,  810,  810,  793,

      797,  811,  811,  812,  812,    0,  805,  796,  813,  813,
        0,  807,  814,  814,  804,  815,  815,  799,  816,  816,
      806,  801,    0,  800,  817,  817,  818,  818,  819,  819,
      820,  820,    0,  809,  821,  821,  822,  822,  808,  823,
      823,  811,  819,    0,  813,    0,  810,  826,  826,  827,
      827,    0,  828,  828,  829,  829,  812,    0,  816,  830,
      830,    0,  830,  830,  830,    0,  814,  818,  831,  831,
      815,  817,  832,  832,  833,  833,    0,  820,  834,  834,
      821,  828,  835,  835,  822,  838,  838,  836,  836,  837,
      837,  840,  840,  823,  841,  841,    0,  826,    0,  827,

        0,  842,  842,  829,  843,  843,    0,  837,  832,  844,
      844,  845,  845,    0,  833,  831,  836,  846,  846,  847,
      847,  848,  848,  850,  850,    0,  835,    0,  834,  849,
      849,  851,  851,  852,  852,  853,  853,  854,  854,    0,
      838,  855,  855,  843,  856,  856,    0,  840,  857,  857,
      841,  842,    0,  844,  854,  847,  858,  858,    0,  850,
      845,  859,  859,    0,  860,  860,  861,  861,  862,  862,
      846,  848,    0,  863,  863,    0,  849,  855,  864,  864,
      865,  865,  866,  866,  851,    0,  852,    0,  868,  868,
        0,  853,  869,  869,  870,  870,  857,  873,  873,  856,

      860,    0,  871,  871,  872,  872,  862,  874,  874,    0,
      858,  863,  875,  875,    0,  861,    0,  859,    0,  867,
      867,  876,  876,  867,  867,  867,  867,  877,  877,  865,
        0,  864,    0,  867,  869,  873,  866,  867,  879,  879,
      867,  868,  871,  874,  872,    0,  878,  878,    0,  870,
      878,  878,  878,  878,  880,  880,  881,  881,    0,  876,
      878,  882,  882,    0,  878,  883,  883,  878,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  879,    0,
        0,  877,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  880,    0,    0,    0,    0,  881,    0,    0,    0,

        0,    0,    0,    0,    0,  883,    0,    0,  882,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  886,  886,
        0,    0,    0,  886,  887,  887,  887,  887,  887,  887,
      887,  888,  888,  888,  888,  888,  889,    0,  889,  889,
      889,  889,  889,  889,  889,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  891,    0,  891,  891,  891,  891,
      891,  891,  891,  892,    0,  892,  893,  893,    0,  893,
      894,  894,  894,  894,  894,  894,  894,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,

      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884
    } ;

static const flex_int16_t yy_rule_linenum[23] =
    {   0,
       90,   95,  102,  105,  112,  113,  114,  115,  116,  117,
      118,  119,  121,  126,  127,  129,  134,  140,  146,  153,
      155,  156
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"

#include <string>
#include <sstream>
#include "scanner.h"


/* HLSL Code Block */

std::stringstream code_block;

/* import the parser's token type into a local typedef */
typedef example::Parser::token token;
typedef example::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1509 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 55 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1523 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1525 "scanner.cc"

#define INITIAL 0
#define PARSE_STATE_HLSLCODEBLOCK 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 79 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


#line 82 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
 /* code to place at the beginning of yylex() */

    BEGIN(INITIAL);
    // reset location
    yylloc->step();



#line 1730 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 885 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 884 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 23 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 23 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 24 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        BEGIN PARSE_STATE_HLSLCODEBLOCK;
        code_block.clear();
        code_block.str("");
    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 95 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(code_block.str());
    code_block.clear();
    code_block.str("");
    //BEGIN(INITIAL);
    return token::HLSL_CODE_BLOCK;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 102 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    code_block<<yytext;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 105 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    code_block<<std::endl;
    yylloc->lines(yyleng);yylloc->step();
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 112 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 113 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 114 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 115 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 116 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 117 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 118 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 119 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 121 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 126 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 127 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 146 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 153 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylloc->step();}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 155 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylloc->lines(yyleng); yylloc->step();}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 156 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return static_cast<token_type>(*yytext);}
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 23:
YY_RULE_SETUP
#line 161 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
ECHO;
	YY_BREAK
#line 1954 "scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSE_STATE_HLSLCODEBLOCK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Examplefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Examplefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Examplerealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Examplerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 885 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 885 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 884);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Examplealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Examplealloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Examplefree((void *) b->yy_ch_buf  );

	Examplefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Examplealloc(new_size  );

		else
			(yy_start_stack) = (int *) Examplerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Examplealloc (yy_size_t  size )
{
			return malloc(size);
}

void *Examplerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Examplefree (void * ptr )
{
			free( (char *) ptr );	/* see Examplerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 161 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


namespace example {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : ExampleFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int ExampleFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int ExampleFlexLexer::yywrap()
{
    return 1;
}

