#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ExampleFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc Examplealloc

    #define yyrealloc Examplerealloc

    #define yyfree Examplefree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *Examplealloc ( yy_size_t  );
void *Examplerealloc ( void *, yy_size_t  );
void Examplefree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[641] =
    {   0,
        0,    0,   20,   18,   16,   17,   18,   12,   12,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   16,    0,    2,   13,   12,    0,   15,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,    0,    0,    2,   13,
       13,   15,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        1,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   10,   14,   14,   14,   14,
       14,   14,    3,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   11,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,    9,    9,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    9,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,    6,    7,
        8,   14,   14,   14,   14,   14,    9,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    5,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    9,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,    9,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        4,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    9,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   25,   26,   25,   25,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   25,   25,   38,
        1,    1,    1,    1,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   25,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    8,    6,
        6,    6,    6,    6,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    9,    6,    6
    } ;

static const flex_int16_t yy_base[649] =
    {   0,
        0,    0,   98, 2355,   63, 2355,   61,   61,   63,   65,
       67,   69,   76,   78,   73,   71,   80,   87,   90,   83,
       93,   97,  100,  132,  104,   95,    0,  102,  146,  135,
      138,  110,   90,    0,  133,   81,    0,    0,  153,  155,
      160,  162,  165,  167,  173,  177,  183,  185,  192,  196,
      198,  204,  201,  208,  214,  218,  220,  223,  229,  232,
      242,  244,  246,  253,  256,  258,  260,  262,  265,  267,
      271,    0,  275,  279,  282,  285,   86,   73,    0,  171,
     2355,    0,  294,  297,  299,  301,  306,  308,  310,  314,
      322,  324,  327,  329,  331,  342,  336,  340,  346,  350,

      363,  354,  367,  381,  376,  385,  389,  393,  395,  397,
      399,  402,  404,  408,  413,  415,  420,  423,  427,  429,
     2355,  432,  434,  436,  442,  438,  447,  450,  460,  452,
      454,  458,  476,  479,  481,  483,  485,  494,  496,  498,
      502,  507,  510,  512,  515,  517,  519,  522,  524,  526,
      533,  537,  539,  541,  543,  547,  549,  551,  560,  603,
      554,  566,  568,  573,  616,  577,  581,  583,  586,  590,
      588,  624,  593,  599,  631,  640,  645,  647,  651,  653,
      655,  657,  661,  659,  663,  665,  710,  667,  670,  673,
      675,  677,  679,  684,  686,  713,  715,  717,  720,  724,

      729,  731,  733,  739,  741,  760,  744,  753,  756,  763,
      768,  770,  772,  776,  778,  780,  782,  788,  791,  793,
      798,  795,  802,  804,  807,  813,  815,  826,  828,  837,
      834,  839,  842,  844,  846,  848,  851,  858,  861,  865,
      867,  869,  872,  882,  891,  879,  874,  900,  902,  906,
      909,  917,  919,  922,  926,  928,  930,  932,  934,  937,
      939,  946,  954,  956,  958,  960,  967,  971,  973,  975,
      977,  980,  982,  984,  986,  990,  993,  999, 1003, 1005,
     1014, 1009, 1021, 1026, 1032, 1028, 1034, 1023, 1038, 1040,
     1042, 1045, 1048, 1050, 1054, 1056, 1067, 1070, 1078, 1080,

     1072, 1082, 1089, 1084, 1097, 1100, 1102, 1104, 1111, 1106,
     1120, 1136, 1108, 1113, 1122, 1127, 1130, 1132, 1134, 1138,
     1143, 1146, 1151, 1159, 1163, 1171, 1173, 1175, 1179, 1181,
     1185, 1188, 1191, 1193, 1195, 1198, 1204, 1212, 1215, 1217,
     1219, 1221, 1224, 1227, 1229, 1234, 1236, 1243, 1245, 1248,
     1254, 1256, 1259, 1268, 1275, 1277, 1280, 1282, 1287, 1284,
     1289, 1299, 1307, 1310, 1312, 1314, 1319, 1321, 1327, 1334,
     1324, 1337, 1339, 1343, 1345, 1349, 1351, 1355, 1358, 1363,
     1366, 1374, 1368, 1370, 1376, 1378, 1380, 1384, 1388, 1393,
     1398, 1400, 1404, 1406, 1409, 1414, 1423, 1411, 1425, 1432,

     1429, 1439, 1441, 1447, 1449, 1459, 1461, 1463, 1466, 1469,
     1471, 1474, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495,
     1497, 1511, 1506, 1515, 1517, 1521, 1525, 1530, 1535, 1537,
     1543, 1545, 1547, 1549, 1554, 1557, 1559, 1564, 1561, 1570,
     1566, 1572, 1574, 1581, 1583, 1585, 1590, 1593, 1587, 1596,
     1604, 1613, 1615, 1617, 1623, 1626, 1629, 1632, 1643, 1646,
     1648, 1654, 1656, 1658, 1661, 1664, 1669, 1671, 1673, 1675,
     1677, 1683, 1685, 1688, 1692, 1694, 1679, 1696, 1698, 1702,
     1709, 1718, 1720, 1722, 1727, 1737, 1739, 1741, 1743, 1748,
     1745, 1751, 1753, 1756, 1762, 1764, 1770, 1772, 1782, 1788,

     1790, 1785, 1793, 1795, 1799, 1803, 1808, 1810, 1812, 1814,
     1816, 1818, 1821, 1824, 1826, 1832, 1835, 1840, 1844, 1849,
     1853, 1855, 1860, 1862, 1864, 1866, 1869, 1872, 1874, 1876,
     1883, 1887, 1885, 1891, 1893, 1896, 1899, 1909, 1914, 1916,
     1918, 1923, 1926, 1936, 1938, 1940, 1944, 1946, 1950, 1955,
     1957, 1962, 1964, 1968, 1971, 1973, 1975, 1977, 1981, 1983,
     1987, 1989, 1993, 1997, 2000, 2002, 2004, 2012, 2014, 2016,
     2023, 2028, 2032, 2036, 2039, 2043, 2047, 2051, 2053, 2059,
     2061, 2063, 2065, 2068, 2070, 2078, 2072, 2080, 2082, 2085,
     2087, 2090, 2100, 2111, 2113, 2115, 2117, 2120, 2124, 2129,

     2131, 2135, 2138, 2140, 2143, 2151, 2154, 2156, 2158, 2162,
     2166, 2169, 2173, 2175, 2179, 2183, 2187, 2189, 2193, 2201,
     2199, 2196, 2203, 2205, 2207, 2211, 2220, 2222, 2224, 2226,
     2231, 2234, 2228, 2244, 2248, 2250, 2252, 2254, 2257, 2355,
     2301, 2308, 2313, 2322, 2331, 2336, 2338, 2345
    } ;

static const flex_int16_t yy_def[649] =
    {   0,
      640,    1,  640,  640,  640,  640,  640,  641,  641,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  643,  642,  642,  642,
      642,  640,  644,  645,  646,  641,  647,  648,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  643,  642,  642,  642,  642,  644,  644,  645,  646,
      640,  648,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      640,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  160,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,    0,
      640,  640,  640,  640,  640,  640,  640,  640
    } ;

static const flex_int16_t yy_nxt[2420] =
    {   0,
        4,    5,    6,    5,    4,    4,    4,    7,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   16,
       21,   22,   23,   24,   16,   25,   26,   16,   27,   16,
       16,   28,   16,   16,   29,   16,   16,   16,   16,   16,
       16,   16,   16,   30,   16,   16,   16,   31,   16,   16,
       16,   16,   16,   16,   32,   33,   32,   35,   34,   35,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
      121,   38,   38,   38,   38,   38,   38,   35,   38,   38,
       78,   49,   38,   38,   78,   38,   38,  640,   38,   38,

       38,   38,   38,   38,  640,   38,   38,   38,   38,   38,
       38,   32,   49,   32,   40,   41,   42,  640,   43,   46,
       50,   44,   37,   47,  640,   51,   53,   45,   48,   56,
      640,   52,   59,  640,   54,   58,   61,   38,   38,   55,
       38,   38,  640,   38,   38,   60,   62,   70,   57,   63,
       71,   38,   38,   64,   73,   65,   81,   66,   38,   38,
       38,   38,  640,   67,   49,   38,   38,   38,   38,   67,
       38,   38,   38,   38,   75,   68,  640,   81,   38,   38,
      640,   76,   38,   38,  640,   49,  640,   67,   38,   38,
       38,   38,   69,   67,   81,   74,  640,   38,   38,  640,

       84,   38,   38,   38,   38,   85,   38,   38,   83,   38,
       38,  640,   86,   38,   38,   81,   87,  640,   94,   38,
       38,  640,   88,   38,   38,   38,   38,   91,   38,   38,
       89,  640,   93,   90,   38,   38,  640,   38,   38,  640,
       92,   94,  640,   96,  640,   95,   97,   38,   38,   38,
       38,   38,   38,   99,  640,  100,  640,   98,   38,   38,
      640,   38,   38,   38,   38,   38,   38,   38,   38,  102,
       38,   38,   38,   38,  640,  101,   38,   38,  103,  105,
       38,   38,  640,  107,   38,   38,  104,   38,   38,  640,
       38,   38,  640,  106,  112,  640,  109,  110,  108,   38,

       38,  111,   38,   38,   38,   38,   38,   38,  114,  640,
      116,   38,   38,   38,   38,   38,   38,  640,  112,   38,
       38,  640,  115,  113,  640,  117,  120,   38,   38,   38,
       38,  118,   38,   38,   38,   38,   38,   38,  119,  640,
      122,   38,   38,  640,  123,   38,   38,   38,   38,  640,
      124,   38,   38,  640,  125,   38,   38,  127,  126,   38,
       38,  133,  135,  136,  137,  640,  130,  128,   38,   38,
      131,  129,   38,   38,  138,  139,  640,  140,  640,  141,
      134,   38,   38,  132,  640,  133,   38,   38,  640,  144,
       38,   38,  143,  640,   38,   38,  640,  142,   38,   38,

       38,   38,   38,   38,   38,   38,  145,   38,   38,   38,
       38,  146,  640,   38,   38,  640,  154,  147,   38,   38,
       38,   38,  148,  640,  156,   38,   38,  149,   38,   38,
      150,  151,   38,   38,   38,   38,  153,   38,   38,   38,
       38,   38,   38,   38,   38,  156,  152,   38,   38,  640,
      155,  158,   38,   38,  640,   38,   38,   38,   38,   38,
       38,  157,  162,   38,   38,   38,   38,  640,  160,  640,
      159,  165,  168,  161,  171,  164,  640,  166,  167,  173,
      640,   38,   38,  163,   38,   38,   38,   38,   38,   38,
       38,   38,  640,  170,  640,  169,  172,  175,  177,   38,

       38,   38,   38,   38,   38,  640,  178,   38,   38,  640,
      174,  640,   38,   38,  176,   38,   38,   38,   38,  177,
       38,   38,   38,   38,   38,   38,  180,   38,   38,   38,
       38,   38,   38,  179,  640,  183,  181,  186,   38,   38,
      640,  184,   38,   38,   38,   38,   38,   38,   38,   38,
      640,  182,   38,   38,   38,   38,   38,   38,  191,   38,
       38,  188,  640,  185,  190,   38,   38,  187,  192,  194,
      189,   38,   38,   38,   38,  640,  195,  640,   38,   38,
      196,  193,   38,   38,  199,  640,   38,   38,   38,   38,
      198,   38,   38,   38,   38,   38,   38,  197,   38,   38,

      640,  205,  201,  202,   38,   38,  640,  200,   38,   38,
      213,  203,  204,  203,  203,  203,  203,  203,  203,  203,
      203,   38,   38,  206,  207,  216,  217,  640,  212,   38,
       38,  640,  214,  215,  640,  208,   38,   38,  640,  209,
      218,  640,  220,  219,  640,   38,   38,  210,  640,  211,
       38,   38,   38,   38,  640,  221,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  640,   38,   38,  640,   38,   38,
       38,   38,   38,   38,   38,   38,  222,  223,  640,   38,
       38,   38,   38,  640,  227,  640,  229,  228,  640,  224,

      225,  230,  243,  640,  226,  245,  232,  249,  640,  247,
      640,  248,  233,  250,  231,   38,   38,  244,   38,   38,
       38,   38,   38,   38,  246,   38,   38,  640,  234,   38,
       38,  235,  236,  237,   38,   38,   38,   38,   38,   38,
      238,  239,  240,  241,  640,  251,   38,   38,  203,   38,
       38,  640,  256,   39,   39,   39,   39,  242,   38,   38,
      253,   38,   38,  640,  252,   38,   38,  254,   38,   38,
      259,  260,  261,   38,   38,   38,   38,   38,   38,  255,
      640,   38,   38,   38,   38,   38,   38,   38,   38,  640,
      258,  262,  257,   38,   38,  640,   38,   38,   38,   38,

       38,   38,  263,   38,   38,  640,  265,   38,   38,   38,
       38,  266,   38,   38,  264,  268,  640,  276,   38,   38,
       38,   38,  640,  270,  640,  203,  640,  267,  640,  269,
      272,   38,   38,   38,   38,  640,  274,  271,  273,   38,
       38,  275,   38,   38,   38,   38,  278,   38,   38,   38,
       38,   38,   38,   38,   38,  281,   38,   38,  640,  279,
      640,  277,  640,   38,   38,  640,   38,   38,  640,  280,
       38,   38,   38,   38,   38,   38,  640,   38,   38,   38,
       38,  285,  640,  282,   38,   38,  283,   38,   38,  640,
      291,  284,  640,  289,  287,  640,   38,   38,  640,  290,

      294,  288,  640,  286,  292,   38,   38,   38,   38,  640,
      293,   38,   38,  296,   38,   38,  640,  303,  295,  299,
      298,  300,   38,   38,   38,   38,  302,   38,   38,  297,
      301,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  304,   38,   38,   38,   38,  640,  305,  640,  315,
      309,   38,   38,  306,  307,  640,  310,  640,  308,   38,
       38,   38,   38,   38,   38,   38,   38,  314,  640,  313,
      311,  312,   38,   38,  640,  316,   38,   38,   38,   38,
       38,   38,   38,   38,  640,   38,   38,   38,   38,   38,
       38,   38,   38,  640,  321,   38,   38,  318,   38,   38,

      317,  640,  203,  640,   38,   38,  640,  319,   38,   38,
       38,   38,  640,  327,   38,   38,  320,  640,  228,   38,
       38,  325,  322,  228,  324,  640,   38,   38,   38,   38,
      323,   38,   38,   38,   38,  326,  329,   38,   38,   38,
       38,  328,  203,   38,   38,   38,   38,   38,   38,  640,
       38,   38,  330,   38,   38,   38,   38,  640,  228,   38,
       38,   38,   38,  331,  332,  640,  228,  334,  640,  333,
      640,  335,   38,   38,  336,   38,   38,   38,   38,  340,
      337,  640,  338,   38,   38,   38,   38,   38,   38,   38,
       38,  341,  342,  339,   38,   38,  640,  345,  640,  346,

      640,  344,   38,   38,  343,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  228,   38,   38,   38,   38,
      347,  348,  350,  353,  640,   38,   38,   38,   38,  349,
      640,  367,   38,   38,  352,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  351,  357,  356,   38,   38,
      358,   38,   38,  640,  368,  355,   38,   38,  360,  361,
      354,  359,  203,  362,   38,   38,  363,  364,   38,   38,
      640,  369,  365,  366,  640,  203,   38,   38,   38,   38,
       38,   38,  373,  371,   38,   38,   38,   38,  370,  374,
       38,   38,  640,   38,   38,  372,   38,   38,   38,   38,

       38,   38,  640,   38,   38,  640,  379,  640,  375,   38,
       38,  640,  377,  203,  378,  381,  376,   38,   38,  203,
       38,   38,   38,   38,   38,   38,   38,   38,  228,   38,
       38,  640,   38,   38,   38,   38,  383,  640,  380,   38,
       38,   38,   38,  640,  203,  384,  640,  385,   38,   38,
       38,   38,  382,   38,   38,  640,  386,  388,  387,   38,
       38,   38,   38,  395,   38,   38,  396,  397,  389,  640,
      392,  390,  391,   38,   38,  398,  640,  399,  640,  342,
       38,   38,   38,   38,  640,   38,   38,   38,   38,   38,
       38,  393,   38,   38,   38,   38,  640,  401,  640,  406,

      640,  400,  640,  394,   38,   38,  402,  640,  403,  408,
      640,  404,   38,   38,  409,   38,   38,   38,   38,   38,
       38,  640,  405,  203,   38,   38,   38,   38,  411,   38,
       38,  407,   38,   38,  640,  410,  640,  417,  413,   38,
       38,  640,   38,   38,   38,   38,  414,  412,   38,   38,
       38,   38,  640,  415,   38,   38,   38,   38,  418,  423,
       38,   38,  640,   38,   38,  425,  422,  416,   38,   38,
      420,   38,   38,   38,   38,   38,   38,  421,  419,   38,
       38,   38,   38,   38,   38,   38,   38,  640,  426,   38,
       38,  640,  427,   38,   38,  429,  424,  430,   38,   38,

      640,  432,  640,   38,   38,   38,   38,  640,  428,   38,
       38,   38,   38,  434,   38,   38,   38,   38,  431,   38,
       38,  437,  640,  433,  640,  228,  640,  435,   38,   38,
       38,   38,  640,  438,   38,   38,  436,   38,   38,  640,
      439,  342,  640,  342,   38,   38,   38,   38,  640,  442,
      440,  640,   38,   38,   38,   38,  640,  449,  441,  443,
      640,  444,  640,  446,   38,   38,   38,   38,   38,   38,
      640,   38,   38,  445,   38,   38,   38,   38,  447,   38,
       38,  448,  450,  640,  451,  452,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   38,  455,  457,  453,  640,  458,  640,
      454,   38,   38,  640,  456,  640,   38,   38,  459,  640,
       38,   38,   38,   38,  640,  460,   38,   38,  464,  203,
       38,   38,  465,  468,  463,   38,   38,  461,  640,  462,
       38,   38,   38,   38,  640,  466,  467,  472,   38,   38,
       38,   38,   38,   38,   38,   38,  640,  469,  470,   38,
       38,  640,   38,   38,   38,   38,   38,   38,  471,   38,
       38,   38,   38,  473,  640,   38,   38,   38,   38,   38,
       38,  640,  228,  640,  474,  476,   38,   38,   38,   38,
       38,   38,   38,   38,  475,   38,   38,  477,   38,   38,

      479,   38,   38,  640,  478,  483,  640,  342,  640,   38,
       38,  640,  480,  481,  486,  485,  482,  484,   38,   38,
       38,   38,   38,   38,  640,  487,  494,  228,   38,   38,
      488,   38,   38,  490,   38,   38,  491,   38,   38,  492,
      496,  640,  495,  640,  499,  489,  640,  493,   38,   38,
      640,   38,   38,   38,   38,  640,  498,  640,  497,   38,
       38,   38,   38,   38,   38,  500,   38,   38,  640,   38,
       38,  640,  502,  640,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  501,  203,   38,   38,
       38,   38,  203,   38,   38,  640,  203,   38,   38,   38,

       38,   38,   38,   38,   38,  504,  640,   38,   38,  640,
      203,  228,  507,  503,   38,   38,  509,  640,  505,  228,
      640,  513,  506,   38,   38,   38,   38,   38,   38,  640,
      508,  203,   38,   38,  510,  512,  640,  228,  640,  514,
      511,  515,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,  342,   38,   38,  342,   38,   38,   38,   38,
      640,   38,   38,  524,  342,  516,  518,   38,   38,   38,
       38,  640,  525,  640,  517,   38,   38,   38,   38,  640,
      228,  228,  228,  520,  519,  640,  522,   38,   38,  523,
       38,   38,  531,   38,   38,   38,   38,  521,   38,   38,

       38,   38,  640,  529,   38,   38,  526,  528,   38,   38,
      527,  530,  532,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  533,   38,   38,  534,   38,
       38,   38,   38,  535,  536,  640,  537,   38,   38,  640,
       38,   38,  539,  640,  203,   38,   38,  640,  540,   38,
       38,  538,  542,  543,   38,   38,  640,  541,   38,   38,
       38,   38,  640,  544,  228,   38,   38,   38,   38,   38,
       38,   38,   38,  545,   38,   38,  640,   38,   38,   38,
       38,   38,   38,  547,  548,  546,  342,  549,   38,   38,
       38,   38,   38,   38,  640,  342,   38,   38,   38,   38,

      640,   38,   38,  555,   38,   38,  640,  550,  640,  551,
      552,  557,  640,  554,   38,   38,  556,  640,  553,   38,
       38,   38,   38,   38,   38,  228,  563,  228,   38,   38,
      640,   38,   38,  640,  558,  228,  559,  640,  560,  203,
      561,   38,   38,   38,   38,   38,   38,  640,  562,   38,
       38,   38,   38,  640,  564,   38,   38,  566,  640,  571,
       38,   38,   38,   38,  203,  565,  568,   38,   38,   38,
       38,  640,  567,   38,   38,  569,   38,   38,   38,   38,
       38,   38,   38,   38,  640,  570,   38,   38,   38,   38,
      640,  572,   38,   38,   38,   38,  640,  342,   38,   38,

      640,  573,   38,   38,  575,   38,   38,   38,   38,   38,
       38,  574,  579,  576,  640,  580,  581,   38,   38,   38,
       38,   38,   38,  640,  228,  577,  640,  578,   38,   38,
      228,  640,  584,   38,   38,  640,  583,   38,   38,  640,
      582,   38,   38,  203,   38,   38,  585,  228,   38,   38,
      640,  586,   38,   38,  640,  589,   38,   38,   38,   38,
      640,  587,  640,  588,   38,   38,   38,   38,   38,   38,
       38,   38,  590,   38,   38,   38,   38,   38,   38,  552,
      591,  640,  593,   38,   38,   38,   38,   38,   38,  552,
       38,   38,   38,   38,  594,   38,   38,  640,  592,  228,

      640,  597,  595,  640,  599,   38,   38,  640,  596,  598,
      601,  640,  602,  203,  640,  203,   38,   38,   38,   38,
       38,   38,   38,   38,  600,   38,   38,  640,  604,   38,
       38,  603,  640,  552,   38,   38,   38,   38,  605,  608,
       38,   38,  640,   38,   38,   38,   38,  640,   38,   38,
      606,  342,  342,  342,  640,  552,   38,   38,  228,   38,
       38,   38,   38,   38,   38,  640,  607,   38,   38,  228,
      612,   38,   38,  609,   38,   38,  640,  203,   38,   38,
       38,   38,  640,  610,   38,   38,  640,  611,   38,   38,
      616,  613,   38,   38,   38,   38,  640,  228,   38,   38,

      614,   38,   38,  615,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  640,  620,   38,   38,  622,  640,
      617,  619,  621,  627,  618,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,  623,   38,   38,  628,   38,
       38,  640,  624,  640,  625,  640,  630,  640,  631,   38,
       38,  626,  203,   38,   38,   38,   38,   38,   38,   38,
       38,  629,   38,   38,  640,  640,  632,  636,  640,  228,
      640,  633,  640,  640,  228,  635,  640,  640,  228,  634,
      640,  640,  640,  640,  640,  637,  640,  640,  640,  640,
      638,  228,  640,  640,  640,  228,  640,  640,  640,  640,

      228,  640,  640,  639,   36,   36,  640,  640,  640,   36,
       39,   39,   39,   39,   39,   39,   39,   72,   72,   72,
       72,   72,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   79,  640,   79,   79,   79,   79,   79,   79,   79,
       80,  640,   80,   82,   82,  640,   82,   38,   38,   38,
       38,   38,   38,   38,    3,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,

      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640
    } ;

static const flex_int16_t yy_chk[2420] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    7,    5,    8,    7,    9,
       10,   10,   11,   11,   12,   12,   16,   16,   15,   15,
       78,   13,   13,   14,   14,   17,   17,   36,   20,   20,
       77,   15,   18,   18,   33,   19,   19,    3,   21,   21,

       26,   26,   22,   22,    0,   23,   23,   28,   28,   25,
       25,   32,   15,   32,   10,   10,   11,    0,   12,   13,
       15,   12,    8,   13,    9,   15,   18,   12,   14,   19,
        0,   17,   21,    0,   18,   20,   22,   24,   24,   18,
       30,   30,   36,   31,   31,   21,   23,   25,   19,   23,
       26,   29,   29,   23,   28,   23,   35,   23,   39,   39,
       40,   40,    0,   24,   29,   41,   41,   42,   42,   31,
       43,   43,   44,   44,   30,   24,    0,   35,   45,   45,
        0,   31,   46,   46,    0,   29,    0,   24,   47,   47,
       48,   48,   24,   31,   80,   29,    0,   49,   49,    0,

       41,   50,   50,   51,   51,   42,   53,   53,   40,   52,
       52,    0,   43,   54,   54,   80,   44,    0,   49,   55,
       55,    0,   45,   56,   56,   57,   57,   47,   58,   58,
       46,    0,   48,   46,   59,   59,    0,   60,   60,    0,
       47,   49,    0,   51,    0,   50,   52,   61,   61,   62,
       62,   63,   63,   54,    0,   55,    0,   53,   64,   64,
        0,   65,   65,   66,   66,   67,   67,   68,   68,   57,
       69,   69,   70,   70,    0,   56,   71,   71,   58,   60,
       73,   73,    0,   62,   74,   74,   59,   75,   75,    0,
       76,   76,    0,   61,   67,    0,   64,   65,   63,   83,

       83,   66,   84,   84,   85,   85,   86,   86,   69,    0,
       71,   87,   87,   88,   88,   89,   89,    0,   67,   90,
       90,    0,   70,   68,    0,   73,   76,   91,   91,   92,
       92,   74,   93,   93,   94,   94,   95,   95,   75,    0,
       83,   97,   97,    0,   84,   98,   98,   96,   96,    0,
       85,   99,   99,    0,   86,  100,  100,   88,   87,  102,
      102,   94,   96,   96,   96,    0,   91,   89,  101,  101,
       92,   90,  103,  103,   96,   96,    0,   96,    0,   97,
       95,  105,  105,   93,    0,   94,  104,  104,    0,  100,
      106,  106,   99,    0,  107,  107,    0,   98,  108,  108,

      109,  109,  110,  110,  111,  111,  101,  112,  112,  113,
      113,  102,    0,  114,  114,    0,  110,  103,  115,  115,
      116,  116,  104,    0,  112,  117,  117,  105,  118,  118,
      106,  107,  119,  119,  120,  120,  109,  122,  122,  123,
      123,  124,  124,  126,  126,  112,  108,  125,  125,    0,
      111,  114,  127,  127,    0,  128,  128,  130,  130,  131,
      131,  113,  118,  132,  132,  129,  129,    0,  116,    0,
      115,  122,  125,  117,  127,  120,    0,  123,  124,  129,
        0,  133,  133,  119,  134,  134,  135,  135,  136,  136,
      137,  137,    0,  126,    0,  125,  128,  131,  133,  138,

      138,  139,  139,  140,  140,    0,  134,  141,  141,    0,
      130,    0,  142,  142,  132,  143,  143,  144,  144,  133,
      145,  145,  146,  146,  147,  147,  136,  148,  148,  149,
      149,  150,  150,  135,    0,  139,  137,  142,  151,  151,
        0,  140,  152,  152,  153,  153,  154,  154,  155,  155,
        0,  138,  156,  156,  157,  157,  158,  158,  147,  161,
      161,  144,    0,  141,  146,  159,  159,  143,  148,  150,
      145,  162,  162,  163,  163,    0,  151,    0,  164,  164,
      152,  149,  166,  166,  155,    0,  167,  167,  168,  168,
      154,  169,  169,  171,  171,  170,  170,  153,  173,  173,

        0,  161,  158,  159,  174,  174,    0,  157,  160,  160,
      167,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  165,  165,  162,  164,  170,  170,    0,  166,  172,
      172,    0,  168,  169,    0,  165,  175,  175,    0,  165,
      171,    0,  173,  172,    0,  176,  176,  165,    0,  165,
      177,  177,  178,  178,    0,  174,  179,  179,  180,  180,
      181,  181,  182,  182,  184,  184,  183,  183,  185,  185,
      186,  186,  188,  188,    0,  189,  189,    0,  190,  190,
      191,  191,  192,  192,  193,  193,  175,  176,    0,  194,
      194,  195,  195,    0,  181,    0,  182,  181,    0,  178,

      179,  183,  188,    0,  180,  190,  185,  194,    0,  192,
        0,  193,  186,  195,  184,  187,  187,  189,  196,  196,
      197,  197,  198,  198,  191,  199,  199,    0,  187,  200,
      200,  187,  187,  187,  201,  201,  202,  202,  203,  203,
      187,  187,  187,  187,    0,  196,  205,  205,  204,  207,
      207,    0,  201,  204,  204,  204,  204,  187,  208,  208,
      198,  209,  209,    0,  197,  206,  206,  199,  210,  210,
      206,  206,  206,  211,  211,  212,  212,  213,  213,  200,
        0,  214,  214,  215,  215,  216,  216,  217,  217,    0,
      205,  207,  202,  218,  218,    0,  219,  219,  220,  220,

      222,  222,  208,  221,  221,    0,  210,  223,  223,  224,
      224,  211,  225,  225,  209,  214,    0,  222,  226,  226,
      227,  227,    0,  216,    0,  213,    0,  212,    0,  215,
      218,  228,  228,  229,  229,    0,  220,  217,  219,  231,
      231,  221,  230,  230,  232,  232,  224,  233,  233,  234,
      234,  235,  235,  236,  236,  227,  237,  237,    0,  225,
        0,  223,    0,  238,  238,    0,  239,  239,    0,  226,
      240,  240,  241,  241,  242,  242,    0,  243,  243,  247,
      247,  232,    0,  229,  246,  246,  230,  244,  244,    0,
      237,  231,    0,  235,  234,    0,  245,  245,    0,  236,

      239,  234,    0,  233,  238,  248,  248,  249,  249,    0,
      238,  250,  250,  241,  251,  251,    0,  247,  240,  243,
      242,  244,  252,  252,  253,  253,  246,  254,  254,  241,
      245,  255,  255,  256,  256,  257,  257,  258,  258,  259,
      259,  248,  260,  260,  261,  261,    0,  248,    0,  257,
      251,  262,  262,  248,  249,    0,  252,    0,  250,  263,
      263,  264,  264,  265,  265,  266,  266,  256,    0,  255,
      253,  254,  267,  267,    0,  258,  268,  268,  269,  269,
      270,  270,  271,  271,    0,  272,  272,  273,  273,  274,
      274,  275,  275,    0,  267,  276,  276,  263,  277,  277,

      262,    0,  265,    0,  278,  278,    0,  264,  279,  279,
      280,  280,    0,  275,  282,  282,  266,    0,  269,  281,
      281,  273,  268,  272,  271,    0,  283,  283,  288,  288,
      270,  284,  284,  286,  286,  274,  277,  285,  285,  287,
      287,  276,  278,  289,  289,  290,  290,  291,  291,    0,
      292,  292,  280,  293,  293,  294,  294,    0,  279,  295,
      295,  296,  296,  281,  283,    0,  282,  285,    0,  284,
        0,  286,  297,  297,  287,  298,  298,  301,  301,  290,
      288,    0,  289,  299,  299,  300,  300,  302,  302,  304,
      304,  291,  292,  289,  303,  303,    0,  295,    0,  296,

        0,  294,  305,  305,  293,  306,  306,  307,  307,  308,
      308,  310,  310,  313,  313,  298,  309,  309,  314,  314,
      297,  299,  301,  304,    0,  311,  311,  315,  315,  300,
        0,  313,  316,  316,  303,  317,  317,  318,  318,  319,
      319,  312,  312,  320,  320,  302,  308,  307,  321,  321,
      309,  322,  322,    0,  314,  306,  323,  323,  312,  312,
      305,  310,  311,  312,  324,  324,  312,  312,  325,  325,
        0,  315,  312,  312,    0,  319,  326,  326,  327,  327,
      328,  328,  321,  318,  329,  329,  330,  330,  317,  322,
      331,  331,    0,  332,  332,  320,  333,  333,  334,  334,

      335,  335,    0,  336,  336,    0,  329,    0,  323,  337,
      337,    0,  327,  326,  328,  332,  324,  338,  338,  325,
      339,  339,  340,  340,  341,  341,  342,  342,  331,  343,
      343,    0,  344,  344,  345,  345,  334,    0,  330,  346,
      346,  347,  347,    0,  335,  336,    0,  337,  348,  348,
      349,  349,  333,  350,  350,    0,  338,  340,  339,  351,
      351,  352,  352,  349,  353,  353,  349,  349,  341,    0,
      345,  343,  344,  354,  354,  349,    0,  349,    0,  347,
      355,  355,  356,  356,    0,  357,  357,  358,  358,  360,
      360,  346,  359,  359,  361,  361,    0,  351,    0,  356,

        0,  350,    0,  348,  362,  362,  352,    0,  353,  359,
        0,  354,  363,  363,  359,  364,  364,  365,  365,  366,
      366,    0,  355,  357,  367,  367,  368,  368,  361,  371,
      371,  358,  369,  369,    0,  360,    0,  366,  362,  370,
      370,    0,  372,  372,  373,  373,  363,  361,  374,  374,
      375,  375,    0,  364,  376,  376,  377,  377,  367,  372,
      378,  378,    0,  379,  379,  374,  371,  365,  380,  380,
      369,  381,  381,  383,  383,  384,  384,  370,  368,  382,
      382,  385,  385,  386,  386,  387,  387,    0,  375,  388,
      388,    0,  376,  389,  389,  378,  373,  379,  390,  390,

        0,  382,    0,  391,  391,  392,  392,    0,  377,  393,
      393,  394,  394,  384,  395,  395,  398,  398,  381,  396,
      396,  387,    0,  383,    0,  380,    0,  385,  397,  397,
      399,  399,    0,  388,  401,  401,  386,  400,  400,    0,
      389,  391,    0,  393,  402,  402,  403,  403,    0,  394,
      390,    0,  404,  404,  405,  405,    0,  401,  392,  395,
        0,  396,    0,  398,  406,  406,  407,  407,  408,  408,
        0,  409,  409,  397,  410,  410,  411,  411,  399,  412,
      412,  400,  402,    0,  403,  404,  413,  413,  414,  414,
      415,  415,  416,  416,  417,  417,  418,  418,  419,  419,

      420,  420,  421,  421,  407,  409,  405,    0,  410,    0,
      406,  423,  423,    0,  408,    0,  422,  422,  411,    0,
      424,  424,  425,  425,    0,  412,  426,  426,  417,  415,
      427,  427,  418,  422,  416,  428,  428,  413,    0,  414,
      429,  429,  430,  430,    0,  419,  420,  427,  431,  431,
      432,  432,  433,  433,  434,  434,    0,  423,  424,  435,
      435,    0,  436,  436,  437,  437,  439,  439,  425,  438,
      438,  441,  441,  428,    0,  440,  440,  442,  442,  443,
      443,    0,  426,    0,  429,  431,  444,  444,  445,  445,
      446,  446,  449,  449,  430,  447,  447,  432,  448,  448,

      434,  450,  450,    0,  433,  439,    0,  438,    0,  451,
      451,    0,  435,  436,  443,  441,  437,  440,  452,  452,
      453,  453,  454,  454,    0,  444,  451,  442,  455,  455,
      445,  456,  456,  447,  457,  457,  448,  458,  458,  449,
      452,    0,  451,    0,  455,  446,    0,  450,  459,  459,
        0,  460,  460,  461,  461,    0,  454,    0,  453,  462,
      462,  463,  463,  464,  464,  456,  465,  465,    0,  466,
      466,    0,  458,    0,  467,  467,  468,  468,  469,  469,
      470,  470,  471,  471,  477,  477,  457,  460,  472,  472,
      473,  473,  459,  474,  474,    0,  461,  475,  475,  476,

      476,  478,  478,  479,  479,  464,    0,  480,  480,    0,
      462,  467,  469,  463,  481,  481,  471,    0,  465,  466,
        0,  477,  468,  482,  482,  483,  483,  484,  484,    0,
      470,  474,  485,  485,  472,  475,    0,  476,    0,  478,
      473,  480,  486,  486,  487,  487,  488,  488,  489,  489,
      491,  491,  481,  490,  490,  479,  492,  492,  493,  493,
        0,  494,  494,  491,  483,  482,  485,  495,  495,  496,
      496,    0,  491,    0,  484,  497,  497,  498,  498,    0,
      495,  495,  495,  487,  486,    0,  489,  499,  499,  490,
      502,  502,  497,  500,  500,  501,  501,  488,  503,  503,

      504,  504,    0,  496,  505,  505,  492,  494,  506,  506,
      493,  496,  498,  507,  507,  508,  508,  509,  509,  510,
      510,  511,  511,  512,  512,  499,  513,  513,  500,  514,
      514,  515,  515,  501,  502,    0,  503,  516,  516,    0,
      517,  517,  506,    0,  504,  518,  518,    0,  507,  519,
      519,  505,  509,  510,  520,  520,    0,  508,  521,  521,
      522,  522,    0,  511,  513,  523,  523,  524,  524,  525,
      525,  526,  526,  512,  527,  527,    0,  528,  528,  529,
      529,  530,  530,  515,  516,  514,  517,  519,  531,  531,
      533,  533,  532,  532,    0,  518,  534,  534,  535,  535,

        0,  536,  536,  525,  537,  537,    0,  520,    0,  521,
      522,  528,    0,  524,  538,  538,  526,    0,  523,  539,
      539,  540,  540,  541,  541,  527,  537,  530,  542,  542,
        0,  543,  543,    0,  531,  529,  532,    0,  533,  536,
      534,  544,  544,  545,  545,  546,  546,    0,  535,  547,
      547,  548,  548,    0,  539,  549,  549,  541,    0,  546,
      550,  550,  551,  551,  538,  540,  543,  552,  552,  553,
      553,    0,  542,  554,  554,  544,  555,  555,  556,  556,
      557,  557,  558,  558,    0,  545,  559,  559,  560,  560,
        0,  547,  561,  561,  562,  562,    0,  548,  563,  563,

        0,  549,  564,  564,  551,  565,  565,  566,  566,  567,
      567,  550,  556,  553,    0,  557,  558,  568,  568,  569,
      569,  570,  570,    0,  559,  554,    0,  555,  571,  571,
      561,    0,  563,  572,  572,    0,  562,  573,  573,    0,
      560,  574,  574,  565,  575,  575,  564,  567,  576,  576,
        0,  566,  577,  577,    0,  570,  578,  578,  579,  579,
        0,  568,    0,  569,  580,  580,  581,  581,  582,  582,
      583,  583,  571,  584,  584,  585,  585,  587,  587,  574,
      572,    0,  576,  586,  586,  588,  588,  589,  589,  573,
      590,  590,  591,  591,  577,  592,  592,    0,  575,  578,

        0,  581,  579,    0,  583,  593,  593,    0,  580,  582,
      586,    0,  588,  585,    0,  587,  594,  594,  595,  595,
      596,  596,  597,  597,  584,  598,  598,    0,  590,  599,
      599,  589,    0,  592,  600,  600,  601,  601,  591,  598,
      602,  602,    0,  603,  603,  604,  604,    0,  605,  605,
      594,  605,  605,  605,    0,  593,  606,  606,  596,  607,
      607,  608,  608,  609,  609,    0,  597,  610,  610,  595,
      603,  611,  611,  599,  612,  612,    0,  600,  613,  613,
      614,  614,    0,  601,  615,  615,    0,  602,  616,  616,
      609,  604,  617,  617,  618,  618,    0,  607,  619,  619,

      606,  622,  622,  608,  621,  621,  620,  620,  623,  623,
      624,  624,  625,  625,    0,  613,  626,  626,  615,    0,
      610,  612,  614,  620,  611,  627,  627,  628,  628,  629,
      629,  630,  630,  633,  633,  616,  631,  631,  621,  632,
      632,    0,  617,    0,  618,    0,  624,    0,  625,  634,
      634,  619,  622,  635,  635,  636,  636,  637,  637,  638,
      638,  623,  639,  639,    0,    0,  626,  633,    0,  630,
        0,  627,    0,    0,  631,  632,    0,    0,  628,  629,
        0,    0,    0,    0,    0,  634,    0,    0,    0,    0,
      636,  635,    0,    0,    0,  637,    0,    0,    0,    0,

      639,    0,    0,  638,  641,  641,    0,    0,    0,  641,
      642,  642,  642,  642,  642,  642,  642,  643,  643,  643,
      643,  643,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  645,    0,  645,  645,  645,  645,  645,  645,  645,
      646,    0,  646,  647,  647,    0,  647,  648,  648,  648,
      648,  648,  648,  648,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,

      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640
    } ;

static const flex_int16_t yy_rule_linenum[19] =
    {   0,
       75,   76,   78,   79,   80,   81,   82,   83,   84,   89,
       90,   93,   98,  104,  110,  118,  123,  128
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"

#include <string>

#include "scanner.h"

/* import the parser's token type into a local typedef */
typedef example::Parser::token token;
typedef example::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1238 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 49 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1251 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1253 "scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 64 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


#line 67 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

#line 1457 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 641 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 640 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 19 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 19 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 20 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 75 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 76 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 89 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 90 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 98 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 104 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
/* gobble up white-spaces */
case 16:
YY_RULE_SETUP
#line 118 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 123 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylloc->lines(yyleng); yylloc->step();
}
	YY_BREAK
/* pass all other characters up to bison */
case 18:
YY_RULE_SETUP
#line 128 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        return static_cast<token_type>(*yytext);
    }
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 19:
YY_RULE_SETUP
#line 134 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
ECHO;
	YY_BREAK
#line 1654 "scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Examplefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Examplefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Examplerealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Examplerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 641 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 641 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 640);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Examplealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Examplealloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Examplefree((void *) b->yy_ch_buf  );

	Examplefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Examplealloc(new_size  );

		else
			(yy_start_stack) = (int *) Examplerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Examplealloc (yy_size_t  size )
{
			return malloc(size);
}

void *Examplerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Examplefree (void * ptr )
{
			free( (char *) ptr );	/* see Examplerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 134 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


namespace example {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : ExampleFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int ExampleFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int ExampleFlexLexer::yywrap()
{
    return 1;
}

